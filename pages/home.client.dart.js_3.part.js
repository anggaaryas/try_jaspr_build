// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.3.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "home.client.dart.js_3", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, C, F, D, E,
  A = {
    AppBootstrap$(initializeEngine, runApp) {
      return new A.AppBootstrap(initializeEngine, runApp);
    },
    DomHTMLMetaElementExtension_get_content(_this) {
      return D.JSStringToString_get_toDart(C.getProperty(_this, "content", type$.String));
    },
    HttpFetchResponseExtension_read(_this, reader, $T) {
      return _this.get$payload().read$1$1(reader, $T);
    },
    DomKeyboardEventExtension_get_altKey(_this) {
      return D.JSBooleanToBool_get_toDart(C.getProperty(_this, "altKey", type$.bool));
    },
    DomKeyboardEventExtension_get_code(_this) {
      var t1 = C.getProperty(_this, "code", type$.nullable_String);
      return t1 == null ? null : D.JSStringToString_get_toDart(t1);
    },
    DomKeyboardEventExtension_get_ctrlKey(_this) {
      return D.JSBooleanToBool_get_toDart(C.getProperty(_this, "ctrlKey", type$.bool));
    },
    DomKeyboardEventExtension_get_key(_this) {
      var t1 = C.getProperty(_this, "key", type$.nullable_String);
      return t1 == null ? null : D.JSStringToString_get_toDart(t1);
    },
    DomKeyboardEventExtension_get_location(_this) {
      return D.JSNumberToNumber_get_toDartDouble(C.getProperty(_this, "location", type$.double));
    },
    DomKeyboardEventExtension_get_metaKey(_this) {
      return D.JSBooleanToBool_get_toDart(C.getProperty(_this, "metaKey", type$.bool));
    },
    DomKeyboardEventExtension_get_repeat(_this) {
      var t1 = C.getProperty(_this, "repeat", type$.nullable_bool);
      return t1 == null ? null : D.JSBooleanToBool_get_toDart(t1);
    },
    DomKeyboardEventExtension_get_isComposing(_this) {
      return D.JSBooleanToBool_get_toDart(C.getProperty(_this, "isComposing", type$.bool));
    },
    DomKeyboardEventExtension_getModifierState(_this, keyArg) {
      return D.JSBooleanToBool_get_toDart(C._callMethodUnchecked1(_this, "getModifierState", C.StringToJSString_get_toJS(keyArg), type$.bool));
    },
    DomHistoryExtension_get_state(_this) {
      var t1 = C.getProperty(_this, "state", type$.nullable_Object);
      return t1 == null ? null : D.JSAnyToObjectExtension_get_toObjectDeep(t1);
    },
    DomHistoryExtension_go(_this, delta) {
      var t1 = type$.void;
      if (delta == null)
        C._callMethodUnchecked0(_this, "go", t1);
      else
        C._callMethodUnchecked1(_this, "go", D.NumToJSExtension_get_toJS(delta), t1);
    },
    DomHistoryExtension_pushState(_this, data, title, url) {
      var t1 = data == null ? null : D.ObjectToJSAnyExtension_get_toJSAnyDeep(data),
        t2 = C.StringToJSString_get_toJS(title),
        t3 = url == null ? null : C.StringToJSString_get_toJS(url);
      return C._callMethodUnchecked3(_this, "pushState", t1, t2, t3, type$.void);
    },
    DomHistoryExtension_replaceState(_this, data, title, url) {
      var t1 = data == null ? null : D.ObjectToJSAnyExtension_get_toJSAnyDeep(data),
        t2 = C.StringToJSString_get_toJS(title),
        t3 = url == null ? null : C.StringToJSString_get_toJS(url);
      return C._callMethodUnchecked3(_this, "replaceState", t1, t2, t3, type$.void);
    },
    DomLocationExtension_get_pathname(_this) {
      var t1 = C.getProperty(_this, "pathname", type$.nullable_String);
      return t1 == null ? null : D.JSStringToString_get_toDart(t1);
    },
    DomLocationExtension_get_search(_this) {
      var t1 = C.getProperty(_this, "search", type$.nullable_String);
      return t1 == null ? null : D.JSStringToString_get_toDart(t1);
    },
    DomLocationExtension_get_locationHash(_this) {
      return D.JSStringToString_get_toDart(C.getProperty(_this, "hash", type$.String));
    },
    DomPopStateEventExtension_get_state(_this) {
      var t1 = C.getProperty(_this, "state", type$.nullable_Object);
      return t1 == null ? null : D.JSAnyToObjectExtension_get_toObjectDeep(t1);
    },
    FontAsset$(asset, descriptors) {
      return new A.FontAsset(asset, descriptors);
    },
    FontFamily$($name, fontAssets) {
      return new A.FontFamily($name, fontAssets);
    },
    FontManifest$(families) {
      return new A.FontManifest(families);
    },
    fetchFontManifest(assetManager) {
      return A.fetchFontManifest$body(assetManager);
    },
    fetchFontManifest$body(assetManager) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.FontManifest),
        $async$returnValue, t2, decoder, inputSink, t1, response, $async$temp1;
      var $async$fetchFontManifest = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $async$temp1 = type$.HttpFetchResponse;
              $async$goto = 3;
              return C._asyncAwait(assetManager.loadAsset$1("FontManifest.json"), $async$fetchFontManifest);
            case 3:
              // returning from await.
              response = $async$temp1._as($async$result);
              if (!C.boolConversionCheck(response.get$hasPayload())) {
                $.$get$printWarning().call$1("Font manifest does not exist at `" + C.S(response.url) + "` - ignoring.");
                $async$returnValue = A.FontManifest$(C._setArrayType([], type$.JSArray_FontFamily));
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = type$.nullable_Object;
              decoder = F.Utf8Decoder_false.fuse$1$1(F.JsonDecoder_null, t2);
              t1.fontManifestJson = null;
              inputSink = decoder.startChunkedConversion$1(A._SimpleCallbackSink$(new A.fetchFontManifest_closure(t1), t2));
              $async$goto = 4;
              return C._asyncAwait(A.HttpFetchResponseExtension_read(response, new A.fetchFontManifest_closure0(inputSink), type$.NativeUint8List), $async$fetchFontManifest);
            case 4:
              // returning from await.
              inputSink.close$0();
              t1 = t1.fontManifestJson;
              if (t1 == null)
                throw C.wrapException(C.AssertionError$(string$.There_));
              $async$returnValue = A.FontManifest$(J.toList$0$ax(J.map$1$1$ax(type$.List_dynamic._as(t1), new A.fetchFontManifest_closure1(), type$.FontFamily)));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$fetchFontManifest, $async$completer);
    },
    FrameTimingRecorder_recordCurrentFrameVsync() {
      if (C.boolConversionCheck(D.FrameTimingRecorder_frameTimingsEnabled()))
        $.FrameTimingRecorder__currentFrameVsyncStart = D.FrameTimingRecorder__nowMicros();
    },
    FrameTimingRecorder_recordCurrentFrameBuildStart() {
      if (C.boolConversionCheck(D.FrameTimingRecorder_frameTimingsEnabled()))
        $.FrameTimingRecorder__currentFrameBuildStart = D.FrameTimingRecorder__nowMicros();
    },
    ResourceManager$(_domManager) {
      return new A.ResourceManager(_domManager);
    },
    ensureResourceManagerInitialized(implicitView) {
      if ($.ResourceManager__instance != null)
        return;
      $.ResourceManager__instance = A.ResourceManager$(implicitView.get$dom());
    },
    initializeEngineServices(jsConfiguration) {
      return A.initializeEngineServices$body(jsConfiguration);
    },
    initializeEngineServices$body(jsConfiguration) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, assetManager, t1;
      var $async$initializeEngineServices = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              if (!C.boolConversionCheck(J.$eq$($._initializationState, B.DebugEngineInitializationState_0))) {
                // goto return
                $async$goto = 1;
                break;
              }
              $._initializationState = B.DebugEngineInitializationState_1;
              D.configuration().setUserConfiguration$1(jsConfiguration);
              A.registerExtension("ext.flutter.disassemble", new A.initializeEngineServices_closure());
              t1.waitingForAnimation = false;
              $.scheduleFrameCallback = new A.initializeEngineServices_closure0(t1);
              assetManager = A.AssetManager$(D.configuration().get$assetBase());
              A._setAssetManager(assetManager);
              $async$goto = 3;
              return C._asyncAwait(C.Future_wait(C._setArrayType([new A.initializeEngineServices_initializeRendererCallback().call$0(), A._downloadAssetFonts()], type$.JSArray_Future_void), type$.void), $async$initializeEngineServices);
            case 3:
              // returning from await.
              $._initializationState = B.DebugEngineInitializationState_2;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$initializeEngineServices, $async$completer);
    },
    initializeEngineUi() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, implicitView;
      var $async$initializeEngineUi = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!C.boolConversionCheck(J.$eq$($._initializationState, B.DebugEngineInitializationState_2))) {
                // goto return
                $async$goto = 1;
                break;
              }
              $._initializationState = B.DebugEngineInitializationState_3;
              A.RawKeyboard_initialize(J.$eq$($.$get$browser().get$operatingSystem(), E.OperatingSystem_4));
              A.KeyboardBinding_initInstance();
              if (!C.boolConversionCheck(D.configuration().get$multiViewEnabled())) {
                implicitView = A.ensureImplicitViewInitialized(D.configuration().get$hostElement());
                if (D.renderer() instanceof D.HtmlRenderer)
                  A.ensureResourceManagerInitialized(implicitView);
              }
              $._initializationState = B.DebugEngineInitializationState_4;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$initializeEngineUi, $async$completer);
    },
    _setAssetManager(assetManager) {
      if (assetManager === $._assetManager)
        return;
      $._assetManager = assetManager;
    },
    _downloadAssetFonts() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        t1, t2, $async$temp1;
      var $async$_downloadAssetFonts = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              J.clear$0$ax(D.renderer().get$fontCollection());
              $async$goto = C.boolConversionCheck(D.debugEmulateFlutterTesterEnvironment()) ? 2 : 3;
              break;
            case 2:
              // then
              t1 = D.renderer().get$fontCollection();
              t2 = $.$get$EmbeddedTestFont_flutterTest();
              $async$goto = 4;
              return C._asyncAwait(t1.loadFontFromList$2$fontFamily(t2.data, t2.fontFamily), $async$_downloadAssetFonts);
            case 4:
              // returning from await.
            case 3:
              // join
              t1 = $._assetManager;
              $async$goto = t1 != null ? 5 : 6;
              break;
            case 5:
              // then
              $async$temp1 = D.renderer().get$fontCollection();
              $async$goto = 8;
              return C._asyncAwait(A.fetchFontManifest(D.assetManager()), $async$_downloadAssetFonts);
            case 8:
              // returning from await.
              $async$goto = 7;
              return C._asyncAwait($async$temp1.loadAssetFonts$1($async$result), $async$_downloadAssetFonts);
            case 7:
              // returning from await.
            case 6:
              // join
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$_downloadAssetFonts, $async$completer);
    },
    FlutterApp__staticInteropFactoryStub(addView, removeView) {
      return type$.JavaScriptObject._as({addView: C._functionToJS1(addView), removeView: C._functionToJS1(new A.FlutterApp__staticInteropFactoryStub_closure(removeView))});
    },
    FlutterLoaderExtension_get_isAutoStart(_this) {
      return !C.boolConversionCheck(D.hasProperty(_this, "didCreateEngineInitializer"));
    },
    FlutterEngineInitializer__staticInteropFactoryStub(autoStart, initializeEngine) {
      return type$.JavaScriptObject._as({initializeEngine: C._functionToJS1(new A.FlutterEngineInitializer__staticInteropFactoryStub_closure(initializeEngine)), autoStart: A._functionToJS0(new A.FlutterEngineInitializer__staticInteropFactoryStub_closure0(autoStart))});
    },
    FlutterAppRunner__staticInteropFactoryStub(runApp) {
      return type$.JavaScriptObject._as({runApp: C._functionToJS1(new A.FlutterAppRunner__staticInteropFactoryStub_closure(runApp))});
    },
    createPromise(executor) {
      return C._callConstructorUnchecked1(self.Promise, executor, type$.JSObject);
    },
    futureToPromise(future, $T) {
      return A.createPromise(D._functionToJS2(new A.futureToPromise_closure(future, $T)));
    },
    _eventTimeStampToDuration(milliseconds) {
      var ms = F.JSNumber_methods.toInt$0(milliseconds);
      return D.Duration$(F.JSNumber_methods.toInt$0((milliseconds - ms) * 1000), ms);
    },
    _cached(body, $T) {
      var t1 = {};
      t1.cache = null;
      return new A._cached_closure(t1, body, $T);
    },
    KeyboardBinding$_() {
      var t1 = new A.KeyboardBinding(C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.JavaScriptObject));
      t1.KeyboardBinding$_$0();
      return t1;
    },
    KeyboardBinding_initInstance() {
      if ($.KeyboardBinding__instance == null)
        $.KeyboardBinding__instance = A.KeyboardBinding$_();
    },
    FlutterHtmlKeyboardEvent$(_event) {
      return new A.FlutterHtmlKeyboardEvent(_event);
    },
    KeyboardConverter$(performDispatchKeyData, platform) {
      var t3,
        t1 = type$.int,
        t2 = C.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      t1 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.void_Function);
      t3 = platform === E.OperatingSystem_4 || platform === E.OperatingSystem_0;
      return new A.KeyboardConverter(performDispatchKeyData, t3, A.KeyboardConverter__mappingFromPlatform(platform), t2, t1);
    },
    KeyboardConverter__mappingFromPlatform(platform) {
      switch (platform.index) {
        case 0:
        case 4:
          return A.LocaleKeymap$darwin();
        case 3:
          return A.LocaleKeymap$win();
        case 1:
        case 2:
        case 5:
          return A.LocaleKeymap$linux();
      }
    },
    KeyboardConverter__getPhysicalCode(code) {
      var t1;
      if (C.boolConversionCheck(F.JSString_methods.get$isEmpty(code)))
        return 98784247808;
      t1 = E.Map_ntMYA.$index(0, code);
      if (t1 == null) {
        t1 = F.JSString_methods.get$hashCode(code);
        if (typeof t1 !== "number")
          return t1.$add();
        t1 += 98784247808;
      }
      return t1;
    },
    KeyboardConverter__getModifierMask($event) {
      var altDown = $event.get$altKey(),
        ctrlDown = $event.get$ctrlKey(),
        shiftDown = $event.get$shiftKey(),
        metaDown = $event.get$metaKey(),
        t1 = altDown ? 1073741824 : 0,
        t2 = ctrlDown ? 268435456 : 0,
        t3 = shiftDown ? 536870912 : 0,
        t4 = metaDown ? 2147483648 : 0;
      return t1 + t2 + t3 + t4;
    },
    KeyboardConverter__eventKeyIsKeyName(key) {
      return key.length > 1 && key.charCodeAt(0) < 127 && key.charCodeAt(1) < 127;
    },
    KeyboardConverter__deadKeyToLogicalKey(physicalKey, $event) {
      var t1 = A.KeyboardConverter__getModifierMask($event);
      if (typeof t1 !== "number")
        return C.iae(t1);
      return physicalKey + t1 + 98784247808;
    },
    createHistoryForExistingState(urlStrategy) {
      var state;
      if (urlStrategy != null) {
        state = urlStrategy.getState$0();
        if (C.boolConversionCheck(A.SingleEntryBrowserHistory__isOriginEntry(state)) || C.boolConversionCheck(A.SingleEntryBrowserHistory__isFlutterEntry(state)))
          return A.SingleEntryBrowserHistory$(urlStrategy);
      }
      return A.MultiEntriesBrowserHistory$(urlStrategy);
    },
    MultiEntriesBrowserHistory$(urlStrategy) {
      var t1 = new A.MultiEntriesBrowserHistory(urlStrategy);
      t1.MultiEntriesBrowserHistory$1$urlStrategy(urlStrategy);
      return t1;
    },
    SingleEntryBrowserHistory$(urlStrategy) {
      var t1 = new A.SingleEntryBrowserHistory(urlStrategy, C.LinkedHashMap_LinkedHashMap$_literal(["flutter", true], type$.String, type$.bool));
      t1.SingleEntryBrowserHistory$1$urlStrategy(urlStrategy);
      return t1;
    },
    SingleEntryBrowserHistory__isOriginEntry(state) {
      return type$.Map_dynamic_dynamic._is(state) && C.boolConversionCheck(J.$eq$(state.$index(0, "origin"), true));
    },
    SingleEntryBrowserHistory__isFlutterEntry(state) {
      return type$.Map_dynamic_dynamic._is(state) && C.boolConversionCheck(J.$eq$(state.$index(0, "flutter"), true));
    },
    RawKeyboard$_(_onMacOs) {
      var t1 = new A.RawKeyboard(C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Timer), _onMacOs);
      t1.RawKeyboard$_$1(_onMacOs);
      return t1;
    },
    RawKeyboard_initialize(onMacOs) {
      if ($.RawKeyboard__instance == null)
        $.RawKeyboard__instance = A.RawKeyboard$_(onMacOs);
      A.KeyboardBinding_initInstance();
    },
    RawKeyboard_instance() {
      return $.RawKeyboard__instance;
    },
    _getMetaState($event) {
      var metaState = C.boolConversionCheck($event.getModifierState$1("Shift")) ? 1 : 0;
      if (C.boolConversionCheck($event.getModifierState$1("Alt")) || C.boolConversionCheck($event.getModifierState$1("AltGraph")))
        metaState |= 2;
      if (C.boolConversionCheck($event.getModifierState$1("Control")))
        metaState |= 4;
      return C.boolConversionCheck($event.getModifierState$1("Meta")) ? metaState | 8 : metaState;
    },
    _isModifierKey($event) {
      var t1 = $event.get$key();
      t1.toString;
      return t1 === "Meta" || t1 === "Shift" || t1 === "Alt" || t1 === "Control";
    },
    _isAffectedByModifiers($event) {
      return C.boolConversionCheck($event.get$ctrlKey()) || C.boolConversionCheck($event.get$shiftKey()) || C.boolConversionCheck($event.get$altKey()) || C.boolConversionCheck($event.get$metaKey());
    },
    _noopCallback(data) {
      type$.nullable_ByteData._as(data);
    },
    SemanticsUpdate$(nodeUpdates) {
      return new A.SemanticsUpdate(nodeUpdates);
    },
    SemanticsNodeUpdate$(actions, additionalActions, childrenInHitTestOrder, childrenInTraversalOrder, currentValueLength, decreasedValue, decreasedValueAttributes, elevation, flags, headingLevel, hint, hintAttributes, id, identifier, increasedValue, increasedValueAttributes, label, labelAttributes, maxValueLength, platformViewId, rect, scrollChildren, scrollExtentMax, scrollExtentMin, scrollIndex, scrollPosition, textDirection, textSelectionBase, textSelectionExtent, thickness, tooltip, transform, value, valueAttributes) {
      return new A.SemanticsNodeUpdate(id, flags, actions, textSelectionBase, textSelectionExtent, platformViewId, scrollChildren, scrollIndex, scrollPosition, scrollExtentMax, scrollExtentMin, rect, identifier, label, labelAttributes, hint, hintAttributes, value, valueAttributes, increasedValue, increasedValueAttributes, decreasedValue, decreasedValueAttributes, tooltip, textDirection, transform, childrenInTraversalOrder, childrenInHitTestOrder, additionalActions, headingLevel);
    },
    TestHistoryEntry$(state, title, url) {
      return new A.TestHistoryEntry(state, title, url);
    },
    TestUrlStrategy$fromEntry(initialEntry) {
      var t1 = C._setArrayType([], type$.JSArray_of_void_Function_nullable_Object);
      return new A.TestUrlStrategy(C._setArrayType([initialEntry], type$.JSArray_TestHistoryEntry), t1);
    },
    EngineFlutterView_implicit(platformDispatcher, hostElement) {
      return A.EngineFlutterWindow$_(platformDispatcher, hostElement);
    },
    EngineFlutterWindow$_(platformDispatcher, hostElement) {
      var t1 = new A.EngineFlutterWindow(C.Future_Future$value(null, type$.void), 0, platformDispatcher, D.EmbeddingStrategy_EmbeddingStrategy$create(hostElement), null, E.ViewPadding_0_0_0_0, D.DimensionsProvider_DimensionsProvider$create(hostElement));
      t1.EngineFlutterView$_$4$viewConstraints(0, platformDispatcher, hostElement, null);
      t1.EngineFlutterWindow$_$2(platformDispatcher, hostElement);
      return t1;
    },
    ensureImplicitViewInitialized(hostElement) {
      var t1, t2;
      if ($._window == null) {
        $._window = A.EngineFlutterView_implicit(D.EnginePlatformDispatcher_instance(), hostElement);
        t1 = D.EnginePlatformDispatcher_instance().get$viewManager();
        t2 = $._window;
        t2.toString;
        t1.registerView$1(t2);
      }
      t1 = $._window;
      t1.toString;
      return t1;
    },
    AppBootstrap: function AppBootstrap(t0, t1) {
      this._initializeEngine = t0;
      this._runApp = t1;
    },
    AppBootstrap_prepareEngineInitializer_closure: function AppBootstrap_prepareEngineInitializer_closure(t0) {
      this.$this = t0;
    },
    AppBootstrap_prepareEngineInitializer_closure0: function AppBootstrap_prepareEngineInitializer_closure0(t0) {
      this.$this = t0;
    },
    AppBootstrap__prepareAppRunner_closure: function AppBootstrap__prepareAppRunner_closure(t0) {
      this.$this = t0;
    },
    AppBootstrap__prepareFlutterApp_closure: function AppBootstrap__prepareFlutterApp_closure(t0) {
      this.$this = t0;
    },
    AppBootstrap__prepareFlutterApp_closure0: function AppBootstrap__prepareFlutterApp_closure0(t0) {
      this.$this = t0;
    },
    FontAsset: function FontAsset(t0, t1) {
      this.asset = t0;
      this.descriptors = t1;
    },
    FontFamily: function FontFamily(t0, t1) {
      this.name = t0;
      this.fontAssets = t1;
    },
    FontManifest: function FontManifest(t0) {
      this.families = t0;
    },
    fetchFontManifest_closure: function fetchFontManifest_closure(t0) {
      this._box_0 = t0;
    },
    fetchFontManifest_closure0: function fetchFontManifest_closure0(t0) {
      this.inputSink = t0;
    },
    fetchFontManifest_closure1: function fetchFontManifest_closure1() {
    },
    fetchFontManifest__closure: function fetchFontManifest__closure() {
    },
    ResourceManager: function ResourceManager(t0) {
      this._domManager = t0;
      this._resourcesHost = null;
    },
    DebugEngineInitializationState: function DebugEngineInitializationState(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    initializeEngineServices_closure: function initializeEngineServices_closure() {
    },
    initializeEngineServices_closure0: function initializeEngineServices_closure0(t0) {
      this._box_0 = t0;
    },
    initializeEngineServices__closure: function initializeEngineServices__closure(t0) {
      this._box_0 = t0;
    },
    initializeEngineServices_initializeRendererCallback: function initializeEngineServices_initializeRendererCallback() {
    },
    FlutterApp__staticInteropFactoryStub_closure: function FlutterApp__staticInteropFactoryStub_closure(t0) {
      this.removeView = t0;
    },
    FlutterEngineInitializer__staticInteropFactoryStub_closure: function FlutterEngineInitializer__staticInteropFactoryStub_closure(t0) {
      this.initializeEngine = t0;
    },
    FlutterEngineInitializer__staticInteropFactoryStub_closure0: function FlutterEngineInitializer__staticInteropFactoryStub_closure0(t0) {
      this.autoStart = t0;
    },
    FlutterAppRunner__staticInteropFactoryStub_closure: function FlutterAppRunner__staticInteropFactoryStub_closure(t0) {
      this.runApp = t0;
    },
    futureToPromise_closure: function futureToPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    },
    futureToPromise__closure: function futureToPromise__closure(t0, t1) {
      this.resolver = t0;
      this.T = t1;
    },
    futureToPromise__closure0: function futureToPromise__closure0(t0) {
      this.rejecter = t0;
    },
    _kLogicalKeyToModifierGetter_closure: function _kLogicalKeyToModifierGetter_closure() {
    },
    _kLogicalKeyToModifierGetter_closure0: function _kLogicalKeyToModifierGetter_closure0() {
    },
    _kLogicalKeyToModifierGetter_closure1: function _kLogicalKeyToModifierGetter_closure1() {
    },
    _kLogicalKeyToModifierGetter_closure2: function _kLogicalKeyToModifierGetter_closure2() {
    },
    _kLogicalKeyToModifierGetter_closure3: function _kLogicalKeyToModifierGetter_closure3() {
    },
    _kLogicalKeyToModifierGetter_closure4: function _kLogicalKeyToModifierGetter_closure4() {
    },
    _kLogicalKeyToModifierGetter_closure5: function _kLogicalKeyToModifierGetter_closure5() {
    },
    _kLogicalKeyToModifierGetter_closure6: function _kLogicalKeyToModifierGetter_closure6() {
    },
    _cached_closure: function _cached_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.body = t1;
      this.T = t2;
    },
    KeyboardBinding: function KeyboardBinding(t0) {
      this.__KeyboardBinding__converter_FI = $;
      this._listeners = t0;
    },
    KeyboardBinding$__closure: function KeyboardBinding$__closure(t0) {
      this.$this = t0;
    },
    KeyboardBinding$__closure0: function KeyboardBinding$__closure0(t0) {
      this.$this = t0;
    },
    KeyboardBinding__addEventListener_loggedHandler: function KeyboardBinding__addEventListener_loggedHandler(t0) {
      this.handler = t0;
    },
    KeyboardBinding__onKeyData_closure: function KeyboardBinding__onKeyData_closure(t0) {
      this._box_0 = t0;
    },
    FlutterHtmlKeyboardEvent: function FlutterHtmlKeyboardEvent(t0) {
      this._event = t0;
    },
    KeyboardConverter: function KeyboardConverter(t0, t1, t2, t3, t4) {
      var _ = this;
      _.performDispatchKeyData = t0;
      _.onDarwin = t1;
      _._mapping = t2;
      _._dispatchKeyData = null;
      _._disposed = false;
      _._pressingRecords = t3;
      _._keyGuards = t4;
    },
    KeyboardConverter__scheduleAsyncEvent_closure: function KeyboardConverter__scheduleAsyncEvent_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.callback = t2;
      _.getData = t3;
    },
    KeyboardConverter__scheduleAsyncEvent_closure0: function KeyboardConverter__scheduleAsyncEvent_closure0(t0) {
      this._box_0 = t0;
    },
    KeyboardConverter__startGuardingKey_closure: function KeyboardConverter__startGuardingKey_closure(t0, t1, t2) {
      this.currentTimeStamp = t0;
      this.physicalKey = t1;
      this.logicalKey = t2;
    },
    KeyboardConverter__startGuardingKey_closure0: function KeyboardConverter__startGuardingKey_closure0(t0, t1) {
      this.$this = t0;
      this.physicalKey = t1;
    },
    KeyboardConverter__handleEvent_closure: function KeyboardConverter__handleEvent_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.eventKey = t1;
      _.event = t2;
      _.logicalKeyIsCharacter = t3;
      _.physicalKey = t4;
    },
    KeyboardConverter__handleEvent_closure0: function KeyboardConverter__handleEvent_closure0(t0, t1, t2) {
      this.timeStamp = t0;
      this.physicalKey = t1;
      this.logicalKey = t2;
    },
    KeyboardConverter__handleEvent_closure1: function KeyboardConverter__handleEvent_closure1(t0, t1) {
      this.$this = t0;
      this.physicalKey = t1;
    },
    KeyboardConverter__handleEvent_closure2: function KeyboardConverter__handleEvent_closure2(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.logicalKey = t1;
      _.event = t2;
      _.timeStamp = t3;
    },
    KeyboardConverter__handleEvent__closure: function KeyboardConverter__handleEvent__closure(t0, t1, t2) {
      this.$this = t0;
      this.testeeLogicalKey = t1;
      this.timeStamp = t2;
    },
    KeyboardConverter_handleEvent_closure: function KeyboardConverter_handleEvent_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    BrowserHistory: function BrowserHistory() {
    },
    MultiEntriesBrowserHistory: function MultiEntriesBrowserHistory(t0) {
      var _ = this;
      _.urlStrategy = t0;
      _.__BrowserHistory__unsubscribe_A = _.__MultiEntriesBrowserHistory__lastSeenSerialCount_A = $;
      _._isDisposed = _._isTornDown = false;
    },
    MultiEntriesBrowserHistory_onPopState_closure: function MultiEntriesBrowserHistory_onPopState_closure() {
    },
    SingleEntryBrowserHistory: function SingleEntryBrowserHistory(t0, t1) {
      var _ = this;
      _.urlStrategy = t0;
      _._flutterState = t1;
      _._userProvidedRouteName = null;
      _.__BrowserHistory__unsubscribe_A = $;
      _._isDisposed = _._isTornDown = false;
    },
    SingleEntryBrowserHistory_onPopState_closure: function SingleEntryBrowserHistory_onPopState_closure() {
    },
    SingleEntryBrowserHistory_onPopState_closure0: function SingleEntryBrowserHistory_onPopState_closure0() {
    },
    RawKeyboard: function RawKeyboard(t0, t1) {
      this._keydownTimers = t0;
      this._lastMetaState = 0;
      this._onMacOs = t1;
    },
    RawKeyboard$__closure: function RawKeyboard$__closure(t0) {
      this.$this = t0;
    },
    RawKeyboard_handleHtmlEvent_closure: function RawKeyboard_handleHtmlEvent_closure(t0, t1, t2) {
      this.$this = t0;
      this.timerKey = t1;
      this.event = t2;
    },
    RawKeyboard_handleHtmlEvent_closure0: function RawKeyboard_handleHtmlEvent_closure0(t0) {
      this.event = t0;
    },
    SemanticsUpdate: function SemanticsUpdate(t0) {
      this._nodeUpdates = t0;
    },
    SemanticsNodeUpdate: function SemanticsNodeUpdate(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29) {
      var _ = this;
      _.id = t0;
      _.flags = t1;
      _.actions = t2;
      _.textSelectionBase = t3;
      _.textSelectionExtent = t4;
      _.platformViewId = t5;
      _.scrollChildren = t6;
      _.scrollIndex = t7;
      _.scrollPosition = t8;
      _.scrollExtentMax = t9;
      _.scrollExtentMin = t10;
      _.rect = t11;
      _.identifier = t12;
      _.label = t13;
      _.labelAttributes = t14;
      _.hint = t15;
      _.hintAttributes = t16;
      _.value = t17;
      _.valueAttributes = t18;
      _.increasedValue = t19;
      _.increasedValueAttributes = t20;
      _.decreasedValue = t21;
      _.decreasedValueAttributes = t22;
      _.tooltip = t23;
      _.textDirection = t24;
      _.transform = t25;
      _.childrenInTraversalOrder = t26;
      _.childrenInHitTestOrder = t27;
      _.additionalActions = t28;
      _.headingLevel = t29;
    },
    TestHistoryEntry: function TestHistoryEntry(t0, t1, t2) {
      this.state = t0;
      this.title = t1;
      this.url = t2;
    },
    TestUrlStrategy: function TestUrlStrategy(t0, t1) {
      this._currentEntryIndex = 0;
      this.history = t0;
      this.listeners = t1;
    },
    TestUrlStrategy_go_closure: function TestUrlStrategy_go_closure(t0, t1) {
      this.$this = t0;
      this.count = t1;
    },
    TestUrlStrategy_addPopStateListener_closure: function TestUrlStrategy_addPopStateListener_closure(t0, t1) {
      this.$this = t0;
      this.fn = t1;
    },
    TestUrlStrategy_addPopStateListener__closure: function TestUrlStrategy_addPopStateListener__closure(t0, t1) {
      this.$this = t0;
      this.fn = t1;
    },
    TestUrlStrategy__nextEventLoop_closure: function TestUrlStrategy__nextEventLoop_closure(t0) {
      this.callback = t0;
    },
    EngineFlutterWindow: function EngineFlutterWindow(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._browserHistory = null;
      _._endOfTheLine = t0;
      _.viewId = t1;
      _.platformDispatcher = t2;
      _.embeddingStrategy = t3;
      _.__EngineFlutterView__resizeSubscription_F = $;
      _.isDisposed = false;
      _.__EngineFlutterView_pointerBinding_F = _.__EngineFlutterView_dom_FI = _.__EngineFlutterView_contextMenu_FI = _.__EngineFlutterView_mouseCursor_FI = _.__EngineFlutterView__globalHtmlAttributes_FI = $;
      _._jsViewConstraints = t4;
      _.__EngineFlutterView_semantics_FI = $;
      _._physicalSize = null;
      _._viewInsets = t5;
      _.dimensionsProvider = t6;
    },
    EngineFlutterWindow_handleNavigationMessage_closure: function EngineFlutterWindow_handleNavigationMessage_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _isAscii(charCode) {
      return charCode >= 32 && charCode <= 127;
    },
    isLetter(charCode) {
      var t1 = $.$get$_kLowerA();
      if (typeof t1 !== "number")
        return C.iae(t1);
      if (charCode >= t1) {
        t1 = $.$get$_kLowerZ();
        if (typeof t1 !== "number")
          return C.iae(t1);
        t1 = charCode <= t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.$get$_kUpperA();
        if (typeof t1 !== "number")
          return C.iae(t1);
        if (charCode >= t1) {
          t1 = $.$get$_kUpperZ();
          if (typeof t1 !== "number")
            return C.iae(t1);
          t1 = charCode <= t1;
        } else
          t1 = false;
      } else
        t1 = true;
      return t1;
    },
    heuristicMapper(code, key) {
      var t1, charCode;
      if (C.boolConversionCheck(F.JSString_methods.startsWith$1(code, "Digit"))) {
        if (5 >= code.length)
          return C.ioore(code, 5);
        return code.charCodeAt(5);
      }
      t1 = key.length;
      if (0 >= t1)
        return C.ioore(key, 0);
      charCode = key.charCodeAt(0);
      if (t1 > 1 || !C.boolConversionCheck(A._isAscii(charCode))) {
        t1 = B.Map_Am4V8.$index(0, code);
        return t1 == null ? null : J.codeUnitAt$1$s(t1, 0);
      }
      if (C.boolConversionCheck(A.isLetter(charCode)))
        return J.codeUnitAt$1$s(F.JSString_methods.toLowerCase$0(key), 0);
      return null;
    },
    _StringStream$(_data) {
      return new A._StringStream(_data, A.Map_Map$fromEntries(J.map$1$1$ax(B.Map_Am4V8.get$entries(), new A._StringStream__goalToEventCode_closure(), type$.MapEntry_int_String), type$.int, type$.String));
    },
    _unmarshallCodeMap(stream) {
      var i,
        entryNum = stream.readIntAsVerbatim$0(),
        t1 = C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
      for (i = 0; i < entryNum; ++i)
        t1.$indexSet(0, stream.readEventKey$0(), stream.readIntAsChar$0());
      return t1;
    },
    unmarshallMappingData(compressed) {
      var i,
        stream = A._StringStream$(compressed),
        eventCodeNum = stream.readIntAsVerbatim$0(),
        t1 = C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Map_String_int);
      for (i = 0; i < eventCodeNum; ++i)
        t1.$indexSet(0, stream.readEventCode$0(), A._unmarshallCodeMap(stream));
      return t1;
    },
    getMappingDataWin() {
      return A.unmarshallMappingData(';b1{bc1&cf1[fg1]gm2<m?mn1}nq3/q@q\\qv1@vw3"w?w|wx2#x)xz2(z>y');
    },
    getMappingDataLinux() {
      return A.unmarshallMappingData("8a2@q\u03a9qk1&kq3@q\xc6a\xe6aw2<z\xabzx1>xy2\xa5\xff\u2190\xffz5<z\xbby\u0141w\u0142w\u203ay;2\xb5m\xbam");
    },
    getMappingDataDarwin() {
      return A.unmarshallMappingData("M,2\u201ew\u2211wa2\u03a9q\u2021qb2\u02dbx\u2248xc3 c\xd4j\u2206jd2\xfee\xb4ef2\xfeu\xa8ug2\xfe\xff\u02c6ih3 h\xce\xff\u2202di3 i\xc7c\xe7cj2\xd3h\u02d9hk2\u02c7\xff\u2020tl5 l@l\xfe\xff|l\u02dcnm1~mn3 n\u0131\xff\u222bbo2\xaer\u2030rp2\xacl\xd2lq2\xc6a\xe6ar3 r\u03c0p\u220fps3 s\xd8o\xf8ot2\xa5y\xc1yu3 u\xa9g\u02ddgv2\u02dak\uf8ffkw2\xc2z\xc5zx2\u0152q\u0153qy5 y\xcff\u0192f\u02c7z\u03a9zz5 z\xa5y\u2021y\u2039\xff\u203aw.2\u221av\u25cav;4\xb5m\xcds\xd3m\xdfs/2\xb8z\u03a9z");
    },
    _characterToLogicalKey(key) {
      if (key == null || key.length >= 2)
        return null;
      return J.codeUnitAt$1$s(J.toLowerCase$0$s(key), 0);
    },
    LocaleKeymap$win() {
      return new A.LocaleKeymap(A.getMappingDataWin());
    },
    LocaleKeymap$linux() {
      return new A.LocaleKeymap(A.getMappingDataLinux());
    },
    LocaleKeymap$darwin() {
      return new A.LocaleKeymap(A.getMappingDataDarwin());
    },
    _StringStream: function _StringStream(t0, t1) {
      this._data = t0;
      this._goalToEventCode = t1;
      this.__web_locale_keymap$_offset = 0;
    },
    _StringStream__goalToEventCode_closure: function _StringStream__goalToEventCode_closure() {
    },
    LocaleKeymap: function LocaleKeymap(t0) {
      this.__web_locale_keymap$_mapping = t0;
    },
    EmbeddedTestFont$_(data, fontFamily) {
      return new A.EmbeddedTestFont(fontFamily, data);
    },
    EmbeddedTestFont: function EmbeddedTestFont(t0, t1) {
      this.fontFamily = t0;
      this.data = t1;
    },
    StreamController_StreamController(onListen, $T) {
      var t1 = A._AsyncStreamController$(onListen, null, null, null, $T);
      return t1;
    },
    _AsyncStreamController$(onListen, onPause, onResume, onCancel, $T) {
      return new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    Timer_Timer$periodic(duration, callback) {
      var boundCallback;
      if (C.boolConversionCheck(J.$eq$(C.Zone_current(), F.C__RootZone)))
        return C.Zone_current().createPeriodicTimer$2(duration, callback);
      boundCallback = C.Zone_current().bindUnaryCallbackGuarded$1$1(callback, type$.Timer);
      return C.Zone_current().createPeriodicTimer$2(duration, boundCallback);
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SimpleCallbackSink$(_callback, $T) {
      return new A._SimpleCallbackSink(_callback, C._setArrayType([], $T._eval$1("JSArray<0>")), $T._eval$1("_SimpleCallbackSink<0>"));
    },
    _SimpleCallbackSink: function _SimpleCallbackSink(t0, t1, t2) {
      this._convert$_callback = t0;
      this._accumulated = t1;
      this.$ti = t2;
    },
    _lookupExtension(method) {
      return J.$index$asx($._extensions, method);
    },
    _registerExtension(method, handler) {
      J.$indexSet$ax($._extensions, method, handler);
    },
    UserTag_defaultTag() {
      return $.$get$_FakeUserTag__defaultTag();
    },
    _FakeUserTag$real(label) {
      return new A._FakeUserTag();
    },
    _FakeUserTag__FakeUserTag(label) {
      var t2,
        t1 = J.getInterceptor$asx($._FakeUserTag__instances),
        existingTag = t1.$index($._FakeUserTag__instances, label);
      if (existingTag != null)
        return existingTag;
      if (C.boolConversionCheck(J.$eq$(t1.get$length($._FakeUserTag__instances), 64)))
        throw C.wrapException(C.UnsupportedError$("UserTag instance limit (64) reached."));
      t2 = A._FakeUserTag$real(label);
      t1.$indexSet($._FakeUserTag__instances, label, t2);
      return t2;
    },
    ServiceExtensionResponse$result(result) {
      var t1 = new A.ServiceExtensionResponse();
      t1.ServiceExtensionResponse$result$1(result);
      return t1;
    },
    ServiceExtensionResponse$error(errorCode, errorDetail) {
      var t1 = new A.ServiceExtensionResponse();
      t1.ServiceExtensionResponse$error$2(errorCode, errorDetail);
      return t1;
    },
    ServiceExtensionResponse__validateErrorCode(errorCode) {
      var _s9_ = "errorCode";
      C.checkNotNullable(errorCode, _s9_, type$.int);
      if (errorCode === -32602)
        return;
      if (errorCode >= -32016 && errorCode <= -32000)
        return;
      throw C.wrapException(C.ArgumentError$value(errorCode, _s9_, "Out of range"));
    },
    registerExtension(method, handler) {
      var t1 = type$.String;
      C.checkNotNullable(method, "method", t1);
      if (!C.boolConversionCheck(F.JSString_methods.startsWith$1(method, "ext.")))
        throw C.wrapException(C.ArgumentError$value(method, "method", "Must begin with ext."));
      if (A._lookupExtension(method) != null)
        throw C.wrapException(C.ArgumentError$("Extension already registered: " + method, null));
      C.checkNotNullable(handler, "handler", type$.Future_ServiceExtensionResponse_Function_2_String_and_Map_String_String);
      A._registerExtension(method, C.Zone_current().bindBinaryCallback$3$1(handler, type$.Future_ServiceExtensionResponse, t1, type$.Map_String_String));
    },
    Timeline_instantSync($name, $arguments) {
      C.ArgumentError_checkNotNull($name, "name", type$.String);
      if (!C.boolConversionCheck(D._isDartStreamEnabled()))
        return;
      D._reportTaskEvent(0, -1, 4, $name, D._argumentsAsJson($arguments));
    },
    _FakeUserTag: function _FakeUserTag() {
    },
    ServiceExtensionResponse: function ServiceExtensionResponse() {
    },
    ObjectToJSBoxedDartObject_get_toJSBox(_this) {
      var box;
      if (type$.JavaScriptObject._is(_this))
        throw C.wrapException("Attempting to box non-Dart object.");
      box = A.newObject(type$.dynamic);
      box[$.$get$_jsBoxedDartObjectProperty()] = _this;
      return A.JSBoxedDartObject_constructor__(type$.JSObject._as(box));
    },
    JSBoxedDartObject_constructor__(_jsBoxedDartObject) {
      return _jsBoxedDartObject;
    },
    FutureOfJSAnyToJSPromise_get_toJS(_this, $T) {
      return C._callConstructorUnchecked1(C._getPropertyTrustType(C.staticInteropGlobalContext(), "Promise", type$.Object), D._functionToJS2(new A.FutureOfJSAnyToJSPromise_get_toJS_closure(_this)), type$.JSObject);
    },
    FutureOfJSAnyToJSPromise_get_toJS_closure: function FutureOfJSAnyToJSPromise_get_toJS_closure(t0) {
      this._this = t0;
    },
    FutureOfJSAnyToJSPromise_get_toJS__closure: function FutureOfJSAnyToJSPromise_get_toJS__closure(t0) {
      this.resolve = t0;
    },
    FutureOfJSAnyToJSPromise_get_toJS__closure0: function FutureOfJSAnyToJSPromise_get_toJS__closure0(t0) {
      this.reject = t0;
    },
    PictureRecorder_PictureRecorder() {
      return D.renderer().createPictureRecorder$0();
    },
    Canvas_Canvas(recorder) {
      return D.renderer().createCanvas$2(recorder, null);
    },
    KeyData$(character, logical, physical, synthesized, timeStamp, type) {
      return new A.KeyData(timeStamp, type, physical, logical, character, synthesized);
    },
    PlatformDispatcher_instance() {
      return D.EnginePlatformDispatcher_instance();
    },
    SemanticsUpdateBuilder$() {
      return new A.SemanticsUpdateBuilder(C._setArrayType([], type$.JSArray_SemanticsNodeUpdate));
    },
    KeyEventType: function KeyEventType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    KeyEventDeviceType: function KeyEventDeviceType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    KeyData: function KeyData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.timeStamp = t0;
      _.type = t1;
      _.physical = t2;
      _.logical = t3;
      _.character = t4;
      _.synthesized = t5;
    },
    KeyData__logicalToString_closure: function KeyData__logicalToString_closure(t0) {
      this.planeNum = t0;
    },
    KeyData__quotedCharCode_closure: function KeyData__quotedCharCode_closure() {
    },
    SemanticsUpdateBuilder: function SemanticsUpdateBuilder(t0) {
      this._ui$_nodeUpdates = t0;
    },
    AssetManager$(assetBase) {
      return new A.AssetManager(assetBase);
    },
    bootstrapEngine(runApp) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        bootstrap, t1, loader;
      var $async$bootstrapEngine = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              bootstrap = A.AppBootstrap$(new A.bootstrapEngine_closure(), new A.bootstrapEngine_closure0(null, runApp));
              t1 = self._flutter;
              loader = t1 == null ? null : C.getProperty(t1, "loader", type$.nullable_JavaScriptObject);
              $async$goto = loader == null || C.boolConversionCheck(A.FlutterLoaderExtension_get_isAutoStart(loader)) ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = 5;
              return C._asyncAwait(bootstrap.autoStart$0(), $async$bootstrapEngine);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              C._callMethodUnchecked1(loader, "didCreateEngineInitializer", bootstrap.prepareEngineInitializer$0(), type$.void);
            case 3:
              // join
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$bootstrapEngine, $async$completer);
    },
    _defaultUrlStrategy() {
      var t1 = $.$get$_realDefaultUrlStrategy();
      return t1;
    },
    urlStrategy() {
      var t1 = A._defaultUrlStrategy();
      return t1;
    },
    preventCustomUrlStrategy() {
    },
    AssetManager: function AssetManager(t0) {
      this._assetBase = t0;
    },
    bootstrapEngine_closure: function bootstrapEngine_closure() {
    },
    bootstrapEngine_closure0: function bootstrapEngine_closure0(t0, t1) {
      this.registerPlugins = t0;
      this.runApp = t1;
    },
    BrowserPlatformLocation: function BrowserPlatformLocation() {
    },
    BrowserPlatformLocation_getOrCreateDomEventListener_closure: function BrowserPlatformLocation_getOrCreateDomEventListener_closure(t0) {
      this.fn = t0;
    },
    HashUrlStrategy: function HashUrlStrategy() {
    },
    HashUrlStrategy_addPopStateListener_wrappedFn: function HashUrlStrategy_addPopStateListener_wrappedFn(t0) {
      this.fn = t0;
    },
    HashUrlStrategy_addPopStateListener_closure: function HashUrlStrategy_addPopStateListener_closure(t0, t1) {
      this.$this = t0;
      this.wrappedFn = t1;
    },
    HashUrlStrategy__waitForPopState_closure: function HashUrlStrategy__waitForPopState_closure(t0, t1) {
      this.unsubscribe = t0;
      this.completer = t1;
    },
    HeapPriorityQueue$(comparison, $E) {
      var t1 = C.List_List$filled(7, null, false, $E._eval$1("0?")),
        t2 = comparison == null ? A.utils__defaultCompare$closure() : comparison;
      return new A.HeapPriorityQueue(t2, t1, $E._eval$1("HeapPriorityQueue<0>"));
    },
    HeapPriorityQueue: function HeapPriorityQueue(t0, t1, t2) {
      var _ = this;
      _.comparison = t0;
      _._priority_queue$_queue = t1;
      _._priority_queue$_modificationCount = _._priority_queue$_length = 0;
      _.$ti = t2;
    },
    BindingBase: function BindingBase() {
    },
    BindingBase_initServiceExtensions_closure: function BindingBase_initServiceExtensions_closure() {
    },
    BindingBase_initServiceExtensions_closure0: function BindingBase_initServiceExtensions_closure0() {
    },
    BindingBase_initServiceExtensions_closure1: function BindingBase_initServiceExtensions_closure1() {
    },
    BindingBase_initServiceExtensions_closure2: function BindingBase_initServiceExtensions_closure2() {
    },
    BindingBase_lockEvents_closure: function BindingBase_lockEvents_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    BindingBase_registerBoolServiceExtension_closure: function BindingBase_registerBoolServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.setter = t1;
      _.name = t2;
      _.getter = t3;
    },
    BindingBase_registerNumericServiceExtension_closure: function BindingBase_registerNumericServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.setter = t2;
      _.getter = t3;
    },
    BindingBase_registerStringServiceExtension_closure: function BindingBase_registerStringServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.setter = t1;
      _.name = t2;
      _.getter = t3;
    },
    BindingBase_registerServiceExtension_closure: function BindingBase_registerServiceExtension_closure(t0) {
      this.callback = t0;
    },
    BindingBase_registerServiceExtension__closure: function BindingBase_registerServiceExtension__closure() {
    },
    LicenseEntryWithLineBreaks$(packages, text) {
      return new A.LicenseEntryWithLineBreaks();
    },
    LicenseRegistry_addLicense(collector) {
      var t1 = $.LicenseRegistry__collectors;
      J.add$1$ax(t1 == null ? $.LicenseRegistry__collectors = C._setArrayType([], type$.JSArray_of_Stream_LicenseEntry_Function) : t1, collector);
    },
    LicenseEntry: function LicenseEntry() {
    },
    LicenseEntryWithLineBreaks: function LicenseEntryWithLineBreaks() {
    },
    HashedObserverList$($T) {
      return new A.HashedObserverList(C.LinkedHashMap_LinkedHashMap($T, type$.int), $T._eval$1("HashedObserverList<0>"));
    },
    HashedObserverList: function HashedObserverList(t0, t1) {
      this._observer_list$_map = t0;
      this.$ti = t1;
    },
    FoundationServiceExtensions: function FoundationServiceExtensions(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    GestureArenaEntry$_(_arena, _pointer, _member) {
      return new A.GestureArenaEntry(_arena, _pointer, _member);
    },
    _GestureArena$() {
      return new A._GestureArena(C._setArrayType([], type$.JSArray_GestureArenaMember));
    },
    GestureArenaManager$() {
      return new A.GestureArenaManager(C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._GestureArena));
    },
    GestureArenaEntry: function GestureArenaEntry(t0, t1, t2) {
      this._arena = t0;
      this._arena$_pointer = t1;
      this._member = t2;
    },
    _GestureArena: function _GestureArena(t0) {
      var _ = this;
      _.members = t0;
      _.isOpen = true;
      _.hasPendingSweep = _.isHeld = false;
      _.eagerWinner = null;
    },
    _GestureArena_toString_closure: function _GestureArena_toString_closure(t0) {
      this.$this = t0;
    },
    GestureArenaManager: function GestureArenaManager(t0) {
      this._arenas = t0;
    },
    GestureArenaManager_add_closure: function GestureArenaManager_add_closure() {
    },
    GestureArenaManager__tryToResolveArena_closure: function GestureArenaManager__tryToResolveArena_closure(t0, t1, t2) {
      this.$this = t0;
      this.pointer = t1;
      this.state = t2;
    },
    SamplingClock$() {
      return new A.SamplingClock();
    },
    _Resampler$(_handlePointerEvent, _handleSampleTimeChanged, _samplingInterval) {
      return new A._Resampler(C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PointerEventResampler), F.Duration_0, D.Stopwatch$(), _handlePointerEvent, _handleSampleTimeChanged, _samplingInterval);
    },
    FlutterErrorDetailsForPointerEventDispatcher$(context, $event, exception, hitTestEntry, informationCollector, library, stack) {
      return new A.FlutterErrorDetailsForPointerEventDispatcher(exception, stack, library, context, informationCollector, false);
    },
    SamplingClock: function SamplingClock() {
    },
    _Resampler: function _Resampler(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._resamplers = t0;
      _._frameCallbackScheduled = false;
      _._frameTime = t1;
      _._frameTimeAge = t2;
      _._handlePointerEvent = t3;
      _._handleSampleTimeChanged = t4;
      _._samplingInterval = t5;
      _._binding$_timer = null;
    },
    _Resampler_addOrDispatch_closure: function _Resampler_addOrDispatch_closure() {
    },
    _Resampler_sample_closure: function _Resampler_sample_closure(t0) {
      this.$this = t0;
    },
    _Resampler_sample_closure0: function _Resampler_sample_closure0() {
    },
    _Resampler_sample_closure1: function _Resampler_sample_closure1(t0, t1) {
      this.$this = t0;
      this.scheduler = t1;
    },
    _Resampler_sample__closure: function _Resampler_sample__closure(t0) {
      this.$this = t0;
    },
    GestureBinding: function GestureBinding() {
    },
    GestureBinding_dispatchEvent_closure: function GestureBinding_dispatchEvent_closure(t0) {
      this.event = t0;
    },
    GestureBinding_dispatchEvent_closure0: function GestureBinding_dispatchEvent_closure0(t0, t1) {
      this.event = t0;
      this.entry = t1;
    },
    FlutterErrorDetailsForPointerEventDispatcher: function FlutterErrorDetailsForPointerEventDispatcher(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    _synthesiseDownButtons(buttons, kind) {
      switch (kind.index) {
        case 1:
        case 4:
          return buttons;
        case 0:
        case 2:
        case 3:
          return buttons === 0 ? 1 : buttons;
        case 5:
          return buttons === 0 ? 1 : buttons;
      }
    },
    PointerEventConverter_expand(data, devicePixelRatioForView) {
      return J.whereType$1$0$ax(J.map$1$1$ax(J.where$1$ax(data, new A.PointerEventConverter_expand_closure()), new A.PointerEventConverter_expand_closure0(devicePixelRatioForView), type$.nullable_PointerEvent), type$.PointerEvent);
    },
    PointerEventConverter__toLogicalPixels(physicalPixels, devicePixelRatio) {
      return physicalPixels / devicePixelRatio;
    },
    PointerEventConverter_expand_closure: function PointerEventConverter_expand_closure() {
    },
    PointerEventConverter_expand_closure0: function PointerEventConverter_expand_closure0(t0) {
      this.devicePixelRatioForView = t0;
    },
    PointerAddedEvent$(device, distance, distanceMax, embedderId, kind, obscured, orientation, position, pressureMax, pressureMin, radiusMax, radiusMin, tilt, timeStamp, viewId) {
      return new A.PointerAddedEvent(viewId, embedderId, timeStamp, 0, kind, device, position, E.Offset_0_0, 0, false, obscured, 0, pressureMin, pressureMax, distance, distanceMax, 0, 0, 0, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    _TransformedPointerAddedEvent$(original, transform) {
      return new A._TransformedPointerAddedEvent(original, transform);
    },
    PointerRemovedEvent$(device, distanceMax, embedderId, kind, obscured, position, pressureMax, pressureMin, radiusMax, radiusMin, timeStamp, viewId) {
      return new A.PointerRemovedEvent(viewId, embedderId, timeStamp, 0, kind, device, position, E.Offset_0_0, 0, false, obscured, 0, pressureMin, pressureMax, 0, distanceMax, 0, 0, 0, radiusMin, radiusMax, 0, 0, 0, false, null, null);
    },
    _TransformedPointerRemovedEvent$(original, transform) {
      return new A._TransformedPointerRemovedEvent(original, transform);
    },
    PointerHoverEvent$(buttons, delta, device, distance, distanceMax, embedderId, kind, obscured, orientation, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp, viewId) {
      return new A.PointerHoverEvent(viewId, embedderId, timeStamp, 0, kind, device, position, delta, buttons, false, obscured, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    _TransformedPointerHoverEvent$(original, transform) {
      return new A._TransformedPointerHoverEvent(original, transform);
    },
    PointerEnterEvent$(buttons, delta, device, distance, distanceMax, down, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp, viewId) {
      return new A.PointerEnterEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, delta, buttons, down, obscured, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    PointerEnterEvent_PointerEnterEvent$fromMouseEvent($event) {
      var t1 = $event.get$viewId(),
        t2 = $event.get$timeStamp(),
        t3 = $event.get$pointer(),
        t4 = $event.get$kind(),
        t5 = $event.get$device(),
        t6 = $event.get$position(),
        t7 = $event.get$delta(),
        t8 = $event.get$buttons(),
        t9 = $event.get$obscured(),
        t10 = $event.get$pressureMin(),
        t11 = $event.get$pressureMax(),
        t12 = $event.get$distance(),
        t13 = $event.get$distanceMax(),
        t14 = $event.get$size(),
        t15 = $event.get$radiusMajor(),
        t16 = $event.get$radiusMinor(),
        t17 = $event.get$radiusMin(),
        t18 = $event.get$radiusMax(),
        t19 = $event.get$orientation(),
        t20 = $event.get$tilt();
      return A.PointerEnterEvent$(t8, t7, t5, t12, t13, $event.get$down(), 0, t4, t9, t19, t3, t6, t11, t10, t15, t18, t17, t16, t14, $event.get$synthesized(), t20, t2, t1).transformed$1($event.get$transform());
    },
    _TransformedPointerEnterEvent$(original, transform) {
      return new A._TransformedPointerEnterEvent(original, transform);
    },
    PointerExitEvent$(buttons, delta, device, distance, distanceMax, down, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp, viewId) {
      return new A.PointerExitEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, delta, buttons, down, obscured, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    PointerExitEvent_PointerExitEvent$fromMouseEvent($event) {
      var t1 = $event.get$viewId(),
        t2 = $event.get$timeStamp(),
        t3 = $event.get$pointer(),
        t4 = $event.get$kind(),
        t5 = $event.get$device(),
        t6 = $event.get$position(),
        t7 = $event.get$delta(),
        t8 = $event.get$buttons(),
        t9 = $event.get$obscured(),
        t10 = $event.get$pressureMin(),
        t11 = $event.get$pressureMax(),
        t12 = $event.get$distance(),
        t13 = $event.get$distanceMax(),
        t14 = $event.get$size(),
        t15 = $event.get$radiusMajor(),
        t16 = $event.get$radiusMinor(),
        t17 = $event.get$radiusMin(),
        t18 = $event.get$radiusMax(),
        t19 = $event.get$orientation(),
        t20 = $event.get$tilt();
      return A.PointerExitEvent$(t8, t7, t5, t12, t13, $event.get$down(), 0, t4, t9, t19, t3, t6, t11, t10, t15, t18, t17, t16, t14, $event.get$synthesized(), t20, t2, t1).transformed$1($event.get$transform());
    },
    _TransformedPointerExitEvent$(original, transform) {
      return new A._TransformedPointerExitEvent(original, transform);
    },
    PointerDownEvent$(buttons, device, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp, viewId) {
      return new A.PointerDownEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, E.Offset_0_0, buttons, true, obscured, pressure, pressureMin, pressureMax, 0, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    _TransformedPointerDownEvent$(original, transform) {
      return new A._TransformedPointerDownEvent(original, transform);
    },
    PointerMoveEvent$(buttons, delta, device, distanceMax, embedderId, kind, obscured, orientation, platformData, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp, viewId) {
      return new A.PointerMoveEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, delta, buttons, true, obscured, pressure, pressureMin, pressureMax, 0, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, platformData, synthesized, null, null);
    },
    _TransformedPointerMoveEvent$(original, transform) {
      return new A._TransformedPointerMoveEvent(original, transform);
    },
    PointerUpEvent$(buttons, device, distance, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp, viewId) {
      return new A.PointerUpEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, E.Offset_0_0, buttons, false, obscured, pressure, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    _TransformedPointerUpEvent$(original, transform) {
      return new A._TransformedPointerUpEvent(original, transform);
    },
    PointerScrollEvent$(device, embedderId, kind, onRespond, position, scrollDelta, timeStamp, viewId) {
      return new A.PointerScrollEvent(scrollDelta, onRespond, viewId, embedderId, timeStamp, 0, kind, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, null, null);
    },
    _TransformedPointerScrollEvent$(original, transform) {
      return new A._TransformedPointerScrollEvent(original, transform);
    },
    PointerScrollInertiaCancelEvent$(device, embedderId, kind, position, timeStamp, viewId) {
      return new A.PointerScrollInertiaCancelEvent(viewId, embedderId, timeStamp, 0, kind, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, null, null);
    },
    _TransformedPointerScrollInertiaCancelEvent$(original, transform) {
      return new A._TransformedPointerScrollInertiaCancelEvent(original, transform);
    },
    PointerScaleEvent$(device, embedderId, kind, position, scale, timeStamp, viewId) {
      return new A.PointerScaleEvent(scale, viewId, embedderId, timeStamp, 0, kind, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, null, null);
    },
    _TransformedPointerScaleEvent$(original, transform) {
      return new A._TransformedPointerScaleEvent(original, transform);
    },
    PointerPanZoomStartEvent$(device, embedderId, pointer, position, synthesized, timeStamp, viewId) {
      return new A.PointerPanZoomStartEvent(viewId, embedderId, timeStamp, pointer, E.PointerDeviceKind_4, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, synthesized, null, null);
    },
    _TransformedPointerPanZoomStartEvent$(original, transform) {
      return new A._TransformedPointerPanZoomStartEvent(original, transform);
    },
    PointerPanZoomUpdateEvent$(device, embedderId, pan, panDelta, pointer, position, rotation, scale, synthesized, timeStamp, viewId) {
      return new A.PointerPanZoomUpdateEvent(pan, panDelta, scale, rotation, viewId, embedderId, timeStamp, pointer, E.PointerDeviceKind_4, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, synthesized, null, null);
    },
    _TransformedPointerPanZoomUpdateEvent$(original, transform) {
      return new A._TransformedPointerPanZoomUpdateEvent(original, transform);
    },
    PointerPanZoomEndEvent$(device, embedderId, pointer, position, synthesized, timeStamp, viewId) {
      return new A.PointerPanZoomEndEvent(viewId, embedderId, timeStamp, pointer, E.PointerDeviceKind_4, device, position, E.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, synthesized, null, null);
    },
    _TransformedPointerPanZoomEndEvent$(original, transform) {
      return new A._TransformedPointerPanZoomEndEvent(original, transform);
    },
    PointerCancelEvent$(buttons, device, distance, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp, viewId) {
      return new A.PointerCancelEvent(viewId, embedderId, timeStamp, pointer, kind, device, position, E.Offset_0_0, buttons, false, obscured, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    _TransformedPointerCancelEvent$(original, transform) {
      return new A._TransformedPointerCancelEvent(original, transform);
    },
    PointerEvent: function PointerEvent() {
    },
    _PointerEventDescription: function _PointerEventDescription() {
    },
    _AbstractPointerEvent: function _AbstractPointerEvent() {
    },
    _TransformedPointerEvent: function _TransformedPointerEvent() {
    },
    _CopyPointerAddedEvent: function _CopyPointerAddedEvent() {
    },
    PointerAddedEvent: function PointerAddedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerAddedEvent: function _TransformedPointerAddedEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerRemovedEvent: function _CopyPointerRemovedEvent() {
    },
    PointerRemovedEvent: function PointerRemovedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerRemovedEvent: function _TransformedPointerRemovedEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerHoverEvent: function _CopyPointerHoverEvent() {
    },
    PointerHoverEvent: function PointerHoverEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerHoverEvent: function _TransformedPointerHoverEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerEnterEvent: function _CopyPointerEnterEvent() {
    },
    PointerEnterEvent: function PointerEnterEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerEnterEvent: function _TransformedPointerEnterEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerExitEvent: function _CopyPointerExitEvent() {
    },
    PointerExitEvent: function PointerExitEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerExitEvent: function _TransformedPointerExitEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerDownEvent: function _CopyPointerDownEvent() {
    },
    PointerDownEvent: function PointerDownEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerDownEvent: function _TransformedPointerDownEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerMoveEvent: function _CopyPointerMoveEvent() {
    },
    PointerMoveEvent: function PointerMoveEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerMoveEvent: function _TransformedPointerMoveEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerUpEvent: function _CopyPointerUpEvent() {
    },
    PointerUpEvent: function PointerUpEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerUpEvent: function _TransformedPointerUpEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    PointerSignalEvent: function PointerSignalEvent() {
    },
    _RespondablePointerEvent: function _RespondablePointerEvent() {
    },
    _CopyPointerScrollEvent: function _CopyPointerScrollEvent() {
    },
    PointerScrollEvent: function PointerScrollEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28) {
      var _ = this;
      _.scrollDelta = t0;
      _._events$_onRespond = t1;
      _.viewId = t2;
      _.embedderId = t3;
      _.timeStamp = t4;
      _.pointer = t5;
      _.kind = t6;
      _.device = t7;
      _.position = t8;
      _.delta = t9;
      _.buttons = t10;
      _.down = t11;
      _.obscured = t12;
      _.pressure = t13;
      _.pressureMin = t14;
      _.pressureMax = t15;
      _.distance = t16;
      _.distanceMax = t17;
      _.size = t18;
      _.radiusMajor = t19;
      _.radiusMinor = t20;
      _.radiusMin = t21;
      _.radiusMax = t22;
      _.orientation = t23;
      _.tilt = t24;
      _.platformData = t25;
      _.synthesized = t26;
      _.transform = t27;
      _.original = t28;
    },
    _TransformedPointerScrollEvent: function _TransformedPointerScrollEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerScrollInertiaCancelEvent: function _CopyPointerScrollInertiaCancelEvent() {
    },
    PointerScrollInertiaCancelEvent: function PointerScrollInertiaCancelEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerScrollInertiaCancelEvent: function _TransformedPointerScrollInertiaCancelEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerScaleEvent: function _CopyPointerScaleEvent() {
    },
    PointerScaleEvent: function PointerScaleEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27) {
      var _ = this;
      _.scale = t0;
      _.viewId = t1;
      _.embedderId = t2;
      _.timeStamp = t3;
      _.pointer = t4;
      _.kind = t5;
      _.device = t6;
      _.position = t7;
      _.delta = t8;
      _.buttons = t9;
      _.down = t10;
      _.obscured = t11;
      _.pressure = t12;
      _.pressureMin = t13;
      _.pressureMax = t14;
      _.distance = t15;
      _.distanceMax = t16;
      _.size = t17;
      _.radiusMajor = t18;
      _.radiusMinor = t19;
      _.radiusMin = t20;
      _.radiusMax = t21;
      _.orientation = t22;
      _.tilt = t23;
      _.platformData = t24;
      _.synthesized = t25;
      _.transform = t26;
      _.original = t27;
    },
    _TransformedPointerScaleEvent: function _TransformedPointerScaleEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerPanZoomStartEvent: function _CopyPointerPanZoomStartEvent() {
    },
    PointerPanZoomStartEvent: function PointerPanZoomStartEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerPanZoomStartEvent: function _TransformedPointerPanZoomStartEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerPanZoomUpdateEvent: function _CopyPointerPanZoomUpdateEvent() {
    },
    PointerPanZoomUpdateEvent: function PointerPanZoomUpdateEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30) {
      var _ = this;
      _.pan = t0;
      _.panDelta = t1;
      _.scale = t2;
      _.rotation = t3;
      _.viewId = t4;
      _.embedderId = t5;
      _.timeStamp = t6;
      _.pointer = t7;
      _.kind = t8;
      _.device = t9;
      _.position = t10;
      _.delta = t11;
      _.buttons = t12;
      _.down = t13;
      _.obscured = t14;
      _.pressure = t15;
      _.pressureMin = t16;
      _.pressureMax = t17;
      _.distance = t18;
      _.distanceMax = t19;
      _.size = t20;
      _.radiusMajor = t21;
      _.radiusMinor = t22;
      _.radiusMin = t23;
      _.radiusMax = t24;
      _.orientation = t25;
      _.tilt = t26;
      _.platformData = t27;
      _.synthesized = t28;
      _.transform = t29;
      _.original = t30;
    },
    _TransformedPointerPanZoomUpdateEvent: function _TransformedPointerPanZoomUpdateEvent(t0, t1) {
      var _ = this;
      _.___TransformedPointerPanZoomUpdateEvent_localPanDelta_FI = _.___TransformedPointerPanZoomUpdateEvent_localPan_FI = $;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerPanZoomEndEvent: function _CopyPointerPanZoomEndEvent() {
    },
    PointerPanZoomEndEvent: function PointerPanZoomEndEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerPanZoomEndEvent: function _TransformedPointerPanZoomEndEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _CopyPointerCancelEvent: function _CopyPointerCancelEvent() {
    },
    PointerCancelEvent: function PointerCancelEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.viewId = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerCancelEvent: function _TransformedPointerCancelEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta_FI = _.___TransformedPointerEvent_localPosition_FI = $;
    },
    _PointerAddedEvent_PointerEvent__PointerEventDescription: function _PointerAddedEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent: function _PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent() {
    },
    _PointerCancelEvent_PointerEvent__PointerEventDescription: function _PointerCancelEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent: function _PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent() {
    },
    _PointerDownEvent_PointerEvent__PointerEventDescription: function _PointerDownEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent: function _PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent() {
    },
    _PointerEnterEvent_PointerEvent__PointerEventDescription: function _PointerEnterEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent: function _PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent() {
    },
    _PointerEvent_Object_Diagnosticable: function _PointerEvent_Object_Diagnosticable() {
    },
    _PointerExitEvent_PointerEvent__PointerEventDescription: function _PointerExitEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent: function _PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent() {
    },
    _PointerHoverEvent_PointerEvent__PointerEventDescription: function _PointerHoverEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent: function _PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent() {
    },
    _PointerMoveEvent_PointerEvent__PointerEventDescription: function _PointerMoveEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent: function _PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent() {
    },
    _PointerPanZoomEndEvent_PointerEvent__PointerEventDescription: function _PointerPanZoomEndEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent: function _PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent() {
    },
    _PointerPanZoomStartEvent_PointerEvent__PointerEventDescription: function _PointerPanZoomStartEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent: function _PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent() {
    },
    _PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription: function _PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent: function _PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent() {
    },
    _PointerRemovedEvent_PointerEvent__PointerEventDescription: function _PointerRemovedEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent: function _PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent() {
    },
    _PointerScaleEvent_PointerSignalEvent__PointerEventDescription: function _PointerScaleEvent_PointerSignalEvent__PointerEventDescription() {
    },
    _PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent: function _PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent() {
    },
    _PointerScrollEvent_PointerSignalEvent__PointerEventDescription: function _PointerScrollEvent_PointerSignalEvent__PointerEventDescription() {
    },
    _PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent: function _PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent() {
    },
    _PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription: function _PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription() {
    },
    _PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent: function _PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent() {
    },
    _PointerSignalEvent_PointerEvent__RespondablePointerEvent: function _PointerSignalEvent_PointerEvent__RespondablePointerEvent() {
    },
    _PointerUpEvent_PointerEvent__PointerEventDescription: function _PointerUpEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent: function _PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent() {
    },
    __TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent: function __TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent() {
    },
    __TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent: function __TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent() {
    },
    __TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent: function __TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent() {
    },
    __TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent: function __TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent() {
    },
    __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable: function __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable() {
    },
    __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription: function __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription() {
    },
    __TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent: function __TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent() {
    },
    __TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent: function __TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent() {
    },
    __TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent: function __TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent() {
    },
    __TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent: function __TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent() {
    },
    __TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent: function __TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent() {
    },
    __TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent: function __TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent() {
    },
    __TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent: function __TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent() {
    },
    __TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent: function __TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent() {
    },
    __TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent: function __TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent() {
    },
    __TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent: function __TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent() {
    },
    __TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent: function __TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent() {
    },
    __TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent: function __TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent() {
    },
    __TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent: function __TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent() {
    },
    DeviceGestureSettings$(touchSlop) {
      return new A.DeviceGestureSettings(touchSlop);
    },
    DeviceGestureSettings_DeviceGestureSettings$fromView(view) {
      view.get$gestureSettings().toString;
      return A.DeviceGestureSettings$(null);
    },
    DeviceGestureSettings: function DeviceGestureSettings(t0) {
      this.touchSlop = t0;
    },
    _MatrixTransformPart$(matrix) {
      return new A._MatrixTransformPart(matrix);
    },
    _OffsetTransformPart$(offset) {
      return new A._OffsetTransformPart(offset);
    },
    HitTestResult$() {
      return new A.HitTestResult(C._setArrayType([], type$.JSArray_HitTestEntry_HitTestTarget), C._setArrayType([D.Matrix4_Matrix4$identity()], type$.JSArray_Matrix4), C._setArrayType([], type$.JSArray__TransformPart));
    },
    _TransformPart: function _TransformPart() {
    },
    _MatrixTransformPart: function _MatrixTransformPart(t0) {
      this.matrix = t0;
    },
    _OffsetTransformPart: function _OffsetTransformPart(t0) {
      this.offset = t0;
    },
    HitTestResult: function HitTestResult(t0, t1, t2) {
      this._path = t0;
      this._transforms = t1;
      this._localTransforms = t2;
    },
    PointerRouter$() {
      return new A.PointerRouter(C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Map_of_void_Function_PointerEvent_and_nullable_Matrix4), C.LinkedHashMap_LinkedHashMap$_empty(type$.void_Function_PointerEvent, type$.nullable_Matrix4));
    },
    PointerRouter: function PointerRouter(t0, t1) {
      this._routeMap = t0;
      this._globalRoutes = t1;
    },
    PointerRouter_addRoute_closure: function PointerRouter_addRoute_closure() {
    },
    PointerRouter__dispatchEventToRoutes_closure: function PointerRouter__dispatchEventToRoutes_closure(t0, t1, t2) {
      this.$this = t0;
      this.referenceRoutes = t1;
      this.event = t2;
    },
    PointerSignalResolver$() {
      return new A.PointerSignalResolver();
    },
    PointerSignalResolver: function PointerSignalResolver() {
      this._currentEvent = this._firstRegisteredCallback = null;
    },
    PointerEventResampler$() {
      return new A.PointerEventResampler(D.ListQueue$(null, type$.PointerEvent), E.Offset_0_0);
    },
    PointerEventResampler: function PointerEventResampler(t0, t1) {
      var _ = this;
      _._queuedEvents = t0;
      _._resampler$_next = _._resampler$_last = null;
      _._resampler$_position = t1;
      _._isDown = _._isTracked = false;
      _._hasButtons = _._pointerIdentifier = 0;
    },
    _SystemFontsNotifier$() {
      return new A._SystemFontsNotifier(C.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function));
    },
    PaintingBinding: function PaintingBinding() {
    },
    _SystemFontsNotifier: function _SystemFontsNotifier(t0) {
      this._systemFontsCallbacks = t0;
    },
    ImageCache$() {
      var t1 = type$.Object;
      return new A.ImageCache(C.LinkedHashMap_LinkedHashMap$_empty(t1, type$._PendingImage), C.LinkedHashMap_LinkedHashMap$_empty(t1, type$._CachedImage), C.LinkedHashMap_LinkedHashMap$_empty(t1, type$._LiveImage));
    },
    ImageCache: function ImageCache(t0, t1, t2) {
      var _ = this;
      _._pendingImages = t0;
      _._image_cache$_cache = t1;
      _._liveImages = t2;
      _._currentSizeBytes = 0;
    },
    _debugCollectRenderTrees() {
      var t1, t2;
      if (C.boolConversionCheck(J.get$isEmpty$asx(D.RendererBinding_instance().get$renderViews())))
        return string$.No_ren;
      t1 = C._setArrayType([], type$.JSArray_String);
      for (t2 = J.get$iterator$ax(D.RendererBinding_instance().get$renderViews()); C.boolConversionCheck(t2.moveNext$0());)
        t1.push(t2.get$current().toStringDeep$0());
      return F.JSArray_methods.join$1(t1, "\n\n");
    },
    _debugCollectSemanticsTrees(childOrder) {
      var trees, t1, printedExplanation, t2, t3, tree, message;
      if (C.boolConversionCheck(J.get$isEmpty$asx(D.RendererBinding_instance().get$renderViews())))
        return string$.No_ren;
      trees = C._setArrayType([], type$.JSArray_String);
      for (t1 = J.get$iterator$ax(D.RendererBinding_instance().get$renderViews()), printedExplanation = false; C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t3 = t2.get$debugSemantics();
        tree = t3 == null ? null : t3.toStringDeep$1$childOrder(childOrder);
        if (tree != null)
          F.JSArray_methods.add$1(trees, tree);
        else {
          message = "Semantics not generated for " + C.S(t2) + ".";
          if (!printedExplanation) {
            message += "\nFor performance reasons, the framework only generates semantics when asked to do so by the platform.\nUsually, platforms only ask for semantics when assistive technologies (like screen readers) are running.\nTo generate semantics, try turning on an assistive technology (like VoiceOver or TalkBack) on your device.";
            printedExplanation = true;
          }
          F.JSArray_methods.add$1(trees, message);
        }
      }
      return F.JSArray_methods.join$1(trees, "\n\n");
    },
    _BindingPipelineManifold$(_binding) {
      var t1 = new A._BindingPipelineManifold(_binding, $.$get$ChangeNotifier__emptyListeners());
      t1._BindingPipelineManifold$1(_binding);
      return t1;
    },
    _DefaultRootPipelineOwner$() {
      var _null = null,
        t1 = type$.JSArray_RenderObject;
      t1 = new A._DefaultRootPipelineOwner(_null, A.binding1__DefaultRootPipelineOwner__onSemanticsUpdate$closure(), _null, C._setArrayType([], t1), C._setArrayType([], t1), C._setArrayType([], t1), C.LinkedHashSet_LinkedHashSet$_empty(type$.RenderObject), C.LinkedHashSet_LinkedHashSet$_empty(type$.PipelineOwner));
      t1.PipelineOwner$4$onNeedVisualUpdate$onSemanticsOwnerCreated$onSemanticsOwnerDisposed$onSemanticsUpdate(_null, _null, _null, A.binding1__DefaultRootPipelineOwner__onSemanticsUpdate$closure());
      return t1;
    },
    _DefaultRootPipelineOwner__onSemanticsUpdate(_) {
      type$.SemanticsUpdate._as(_);
    },
    RendererBinding: function RendererBinding() {
    },
    RendererBinding_initMouseTracker_closure: function RendererBinding_initMouseTracker_closure(t0) {
      this.$this = t0;
    },
    RendererBinding__scheduleMouseTrackerUpdate_closure: function RendererBinding__scheduleMouseTrackerUpdate_closure(t0) {
      this.$this = t0;
    },
    _BindingPipelineManifold: function _BindingPipelineManifold(t0, t1) {
      var _ = this;
      _._binding1$_binding = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = false;
    },
    _DefaultRootPipelineOwner: function _DefaultRootPipelineOwner(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.onSemanticsOwnerCreated = t0;
      _.onSemanticsUpdate = t1;
      _.onSemanticsOwnerDisposed = t2;
      _._rootNode = null;
      _._shouldMergeDirtyNodes = false;
      _._nodesNeedingLayout = t3;
      _._nodesNeedingCompositingBitsUpdate = t4;
      _._nodesNeedingPaint = t5;
      _._semanticsOwner = null;
      _._nodesNeedingSemantics = t6;
      _._object$_children = t7;
      _._debugParent = _._manifold = null;
    },
    BoxConstraints$fromViewConstraints(constraints) {
      return new D.BoxConstraints(constraints.minWidth, constraints.maxWidth, constraints.minHeight, constraints.maxHeight);
    },
    BoxHitTestResult$wrap(result) {
      return new A.BoxHitTestResult(result._path, result._transforms, result._localTransforms);
    },
    BoxHitTestResult: function BoxHitTestResult(t0, t1, t2) {
      this._path = t0;
      this._transforms = t1;
      this._localTransforms = t2;
    },
    _MouseState$(initialEvent) {
      return new A._MouseState(C.LinkedHashMap_LinkedHashMap(type$.MouseTrackerAnnotation, type$.Matrix4), initialEvent);
    },
    _MouseTrackerUpdateDetails$byNewFrame(lastAnnotations, nextAnnotations, previousEvent) {
      return new A._MouseTrackerUpdateDetails(lastAnnotations, nextAnnotations, previousEvent, null);
    },
    _MouseTrackerUpdateDetails$byPointerEvent(lastAnnotations, nextAnnotations, previousEvent, triggeringEvent) {
      return new A._MouseTrackerUpdateDetails(lastAnnotations, nextAnnotations, previousEvent, triggeringEvent);
    },
    MouseTracker$(hitTestInView) {
      return new A.MouseTracker(hitTestInView, A.MouseCursorManager$(E.SystemMouseCursor_basic), C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._MouseState), $.$get$ChangeNotifier__emptyListeners());
    },
    MouseTracker__shouldMarkStateDirty(state, $event) {
      var lastEvent;
      if (state == null)
        return true;
      lastEvent = state.get$latestEvent();
      if (type$.PointerSignalEvent._is($event))
        return false;
      return type$.PointerAddedEvent._is(lastEvent) || type$.PointerRemovedEvent._is($event) || !C.boolConversionCheck(J.$eq$(lastEvent.get$position(), $event.get$position()));
    },
    MouseTracker__handleDeviceUpdateMouseEvents(details) {
      var enteringAnnotations, baseEnterEvent, t1, t2, t3,
        latestEvent = details.get$latestEvent(),
        lastAnnotations = details.lastAnnotations,
        nextAnnotations = details.nextAnnotations;
      lastAnnotations.forEach$1(0, new A.MouseTracker__handleDeviceUpdateMouseEvents_closure(nextAnnotations, A.PointerExitEvent_PointerExitEvent$fromMouseEvent(latestEvent), lastAnnotations));
      enteringAnnotations = J.toList$0$ax(J.where$1$ax(nextAnnotations.get$keys(), new A.MouseTracker__handleDeviceUpdateMouseEvents_closure0(lastAnnotations)));
      baseEnterEvent = A.PointerEnterEvent_PointerEnterEvent$fromMouseEvent(latestEvent);
      for (t1 = J.get$iterator$ax(J.get$reversed$ax(enteringAnnotations)); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (C.boolConversionCheck(t2.get$validForMouseTracker())) {
          t3 = t2.get$onEnter();
          if (t3 != null)
            t3.call$1(baseEnterEvent.transformed$1(nextAnnotations.$index(0, t2)));
        }
      }
    },
    _MouseState: function _MouseState(t0, t1) {
      this._annotations = t0;
      this._latestEvent = t1;
    },
    _MouseTrackerUpdateDetails: function _MouseTrackerUpdateDetails(t0, t1, t2, t3) {
      var _ = this;
      _.lastAnnotations = t0;
      _.nextAnnotations = t1;
      _.previousEvent = t2;
      _.triggeringEvent = t3;
    },
    MouseTracker: function MouseTracker(t0, t1, t2, t3) {
      var _ = this;
      _._hitTestInView = t0;
      _._mouseCursorMixin = t1;
      _._mouseStates = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = false;
    },
    MouseTracker__handleDeviceUpdate_closure: function MouseTracker__handleDeviceUpdate_closure() {
    },
    MouseTracker_updateWithEvent_closure: function MouseTracker_updateWithEvent_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.existingState = t2;
      _.event = t3;
      _.device = t4;
    },
    MouseTracker_updateWithEvent__closure: function MouseTracker_updateWithEvent__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.existingState = t2;
      _.event = t3;
      _.device = t4;
    },
    MouseTracker_updateAllDevices_closure: function MouseTracker_updateAllDevices_closure(t0) {
      this.$this = t0;
    },
    MouseTracker__handleDeviceUpdateMouseEvents_closure: function MouseTracker__handleDeviceUpdateMouseEvents_closure(t0, t1, t2) {
      this.nextAnnotations = t0;
      this.baseExitEvent = t1;
      this.lastAnnotations = t2;
    },
    MouseTracker__handleDeviceUpdateMouseEvents_closure0: function MouseTracker__handleDeviceUpdateMouseEvents_closure0(t0) {
      this.lastAnnotations = t0;
    },
    __MouseTrackerUpdateDetails_Object_Diagnosticable: function __MouseTrackerUpdateDetails_Object_Diagnosticable() {
    },
    PipelineOwner$(onSemanticsOwnerCreated, onSemanticsOwnerDisposed, onSemanticsUpdate) {
      var t1 = type$.JSArray_RenderObject;
      t1 = new A.PipelineOwner(onSemanticsOwnerCreated, onSemanticsUpdate, onSemanticsOwnerDisposed, C._setArrayType([], t1), C._setArrayType([], t1), C._setArrayType([], t1), C.LinkedHashSet_LinkedHashSet$_empty(type$.RenderObject), C.LinkedHashSet_LinkedHashSet$_empty(type$.PipelineOwner));
      t1.PipelineOwner$4$onNeedVisualUpdate$onSemanticsOwnerCreated$onSemanticsOwnerDisposed$onSemanticsUpdate(null, onSemanticsOwnerCreated, onSemanticsOwnerDisposed, onSemanticsUpdate);
      return t1;
    },
    PipelineOwner: function PipelineOwner(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.onSemanticsOwnerCreated = t0;
      _.onSemanticsUpdate = t1;
      _.onSemanticsOwnerDisposed = t2;
      _._rootNode = null;
      _._shouldMergeDirtyNodes = false;
      _._nodesNeedingLayout = t3;
      _._nodesNeedingCompositingBitsUpdate = t4;
      _._nodesNeedingPaint = t5;
      _._semanticsOwner = null;
      _._nodesNeedingSemantics = t6;
      _._object$_children = t7;
      _._debugParent = _._manifold = null;
    },
    PipelineOwner_flushLayout_closure: function PipelineOwner_flushLayout_closure() {
    },
    PipelineOwner_flushCompositingBits_closure: function PipelineOwner_flushCompositingBits_closure() {
    },
    PipelineOwner_flushPaint_closure: function PipelineOwner_flushPaint_closure() {
    },
    PipelineOwner_flushSemantics_closure: function PipelineOwner_flushSemantics_closure() {
    },
    _PipelineOwner_Object_DiagnosticableTreeMixin: function _PipelineOwner_Object_DiagnosticableTreeMixin() {
    },
    RenderingServiceExtensions: function RenderingServiceExtensions(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ViewConfiguration$(devicePixelRatio, logicalConstraints, physicalConstraints) {
      return new A.ViewConfiguration(logicalConstraints, physicalConstraints, devicePixelRatio);
    },
    ViewConfiguration_ViewConfiguration$fromView(view) {
      var physicalConstraints = A.BoxConstraints$fromViewConstraints(view.get$physicalConstraints()),
        devicePixelRatio = view.get$devicePixelRatio();
      return A.ViewConfiguration$(devicePixelRatio, physicalConstraints.$div(0, devicePixelRatio), physicalConstraints);
    },
    RenderView$(view) {
      var t1 = new A.RenderView(E.Size_0_0, view, null, D.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.RenderView$3$child$configuration$view(null, null, view);
      return t1;
    },
    ViewConfiguration: function ViewConfiguration(t0, t1, t2) {
      this.logicalConstraints = t0;
      this.physicalConstraints = t1;
      this.devicePixelRatio = t2;
    },
    RenderView: function RenderView(t0, t1, t2, t3) {
      var _ = this;
      _._view0$_size = t0;
      _._view0$_configuration = null;
      _._view0$_view = t1;
      _._rootTransform = null;
      _.RenderObjectWithChildMixin__child = t2;
      _.parentData = null;
      _._object$_depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderView_RenderObject_RenderObjectWithChildMixin: function _RenderView_RenderObject_RenderObjectWithChildMixin() {
    },
    timeDilation() {
      return $._timeDilation;
    },
    timeDilation0(value) {
      var t1;
      if (C.boolConversionCheck(J.$eq$($._timeDilation, value)))
        return;
      t1 = $.SchedulerBinding__instance;
      if (t1 != null)
        t1.resetEpoch$0();
      $._timeDilation = value;
    },
    _FrameCallbackEntry$(callback, rescheduling) {
      return new A._FrameCallbackEntry(callback);
    },
    PerformanceModeRequestHandle$_(_cleanup) {
      var t1 = new A.PerformanceModeRequestHandle(_cleanup);
      t1.PerformanceModeRequestHandle$_$1(_cleanup);
      return t1;
    },
    SchedulerBinding__taskSorter(e1, e2) {
      var t1 = type$._TaskEntry_dynamic;
      t1._as(e1);
      t1._as(e2);
      return J.$negate$in(J.compareTo$1$ns(e1.get$priority(), e2.get$priority()));
    },
    defaultSchedulingStrategy(priority, scheduler) {
      var t1;
      C._asInt(priority);
      t1 = type$.SchedulerBinding._as(scheduler).get$transientCallbackCount();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = B.Priority_100000.get$value();
        if (typeof t1 !== "number")
          return C.iae(t1);
        return priority >= t1;
      }
      return true;
    },
    _FrameCallbackEntry: function _FrameCallbackEntry(t0) {
      this.callback = t0;
    },
    PerformanceModeRequestHandle: function PerformanceModeRequestHandle(t0) {
      this._cleanup = t0;
    },
    SchedulerBinding: function SchedulerBinding() {
    },
    SchedulerBinding_handleEventLoopCallback_closure: function SchedulerBinding_handleEventLoopCallback_closure(t0) {
      this.callbackStack = t0;
    },
    SchedulerBinding_endOfFrame_closure: function SchedulerBinding_endOfFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure: function SchedulerBinding_scheduleWarmUpFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure0: function SchedulerBinding_scheduleWarmUpFrame_closure0(t0, t1) {
      this.$this = t0;
      this.hadScheduledFrame = t1;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure1: function SchedulerBinding_scheduleWarmUpFrame_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    SchedulerBinding__handleDrawFrame_closure: function SchedulerBinding__handleDrawFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_handleBeginFrame_closure: function SchedulerBinding_handleBeginFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding__invokeFrameCallback_closure: function SchedulerBinding__invokeFrameCallback_closure(t0) {
      this.callbackStack = t0;
    },
    Priority$_(_value) {
      return new A.Priority(_value);
    },
    Priority: function Priority(t0) {
      this._priority$_value = t0;
    },
    SchedulerServiceExtensions: function SchedulerServiceExtensions(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SemanticsHandle$_(_onDispose) {
      var t1 = new A.SemanticsHandle(_onDispose);
      t1.SemanticsHandle$_$1(_onDispose);
      return t1;
    },
    SemanticsBinding: function SemanticsBinding() {
    },
    SemanticsHandle: function SemanticsHandle(t0) {
      this._onDispose = t0;
    },
    SemanticsOwner$(onSemanticsUpdate) {
      var t1 = type$.SemanticsNode;
      t1 = new A.SemanticsOwner(onSemanticsUpdate, C.LinkedHashSet_LinkedHashSet$_empty(t1), C.LinkedHashMap_LinkedHashMap$_empty(type$.int, t1), C.LinkedHashSet_LinkedHashSet$_empty(t1), $.$get$ChangeNotifier__emptyListeners());
      t1.SemanticsOwner$1$onSemanticsUpdate(onSemanticsUpdate);
      return t1;
    },
    SemanticsOwner: function SemanticsOwner(t0, t1, t2, t3, t4) {
      var _ = this;
      _.onSemanticsUpdate = t0;
      _._dirtyNodes = t1;
      _._nodes = t2;
      _._detachedNodes = t3;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t4;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = false;
    },
    SemanticsOwner_sendSemanticsUpdate_closure: function SemanticsOwner_sendSemanticsUpdate_closure(t0) {
      this.$this = t0;
    },
    SemanticsOwner_sendSemanticsUpdate_closure0: function SemanticsOwner_sendSemanticsUpdate_closure0() {
    },
    SemanticsOwner_sendSemanticsUpdate_closure1: function SemanticsOwner_sendSemanticsUpdate_closure1() {
    },
    SemanticsOwner__getSemanticsActionHandlerForId_closure: function SemanticsOwner__getSemanticsActionHandlerForId_closure(t0, t1) {
      this._box_0 = t0;
      this.action = t1;
    },
    SemanticsOwner__getSemanticsActionHandlerForPosition_closure: function SemanticsOwner__getSemanticsActionHandlerForPosition_closure(t0, t1) {
      this._box_0 = t0;
      this.action = t1;
    },
    BinaryMessenger: function BinaryMessenger() {
    },
    ServicesBinding__parseLicenses(rawLicenses) {
      var t1, t2, t3, _0_0, t4;
      C._asString(rawLicenses);
      t1 = C.S(F.JSString_methods.$mul("-", 80));
      t2 = C._setArrayType([], type$.JSArray_LicenseEntry);
      for (t1 = F.JSArray_methods.get$iterator(C._setArrayType(rawLicenses.split("\n" + t1 + "\n"), type$.JSArray_String)); C.boolConversionCheck(t1.moveNext$0());) {
        t3 = t1.get$current();
        _0_0 = F.JSString_methods.indexOf$1(t3, "\n\n");
        t4 = _0_0 >= 0;
        if (t4)
          t2.push(A.LicenseEntryWithLineBreaks$(J.split$1$s(F.JSString_methods.substring$2(t3, 0, _0_0), "\n"), F.JSString_methods.substring$1(t3, _0_0 + 2)));
        else
          t2.push(A.LicenseEntryWithLineBreaks$(E.List_empty, t3));
      }
      return t2;
    },
    ServicesBinding__parseAppLifecycleMessage(message) {
      var t1;
      $label0$0: {
        if ("AppLifecycleState.resumed" === message) {
          t1 = E.AppLifecycleState_1;
          break $label0$0;
        }
        if ("AppLifecycleState.inactive" === message) {
          t1 = E.AppLifecycleState_2;
          break $label0$0;
        }
        if ("AppLifecycleState.hidden" === message) {
          t1 = E.AppLifecycleState_3;
          break $label0$0;
        }
        if ("AppLifecycleState.paused" === message) {
          t1 = E.AppLifecycleState_4;
          break $label0$0;
        }
        if ("AppLifecycleState.detached" === message) {
          t1 = E.AppLifecycleState_0;
          break $label0$0;
        }
        t1 = null;
        break $label0$0;
      }
      return t1;
    },
    ServicesBinding: function ServicesBinding() {
    },
    ServicesBinding__initKeyboard_closure: function ServicesBinding__initKeyboard_closure(t0) {
      this.$this = t0;
    },
    ServicesBinding__addLicenses_closure: function ServicesBinding__addLicenses_closure(t0) {
      this.controller = t0;
    },
    _DefaultBinaryMessenger: function _DefaultBinaryMessenger() {
    },
    _DefaultBinaryMessenger_send_closure: function _DefaultBinaryMessenger_send_closure(t0) {
      this.completer = t0;
    },
    _DefaultBinaryMessenger_setMessageHandler_closure: function _DefaultBinaryMessenger_setMessageHandler_closure(t0) {
      this.handler = t0;
    },
    KeyboardLockMode_findLockByLogicalKey(logicalKey) {
      return J.$index$asx($.$get$KeyboardLockMode__knownLockModes(), logicalKey.keyId);
    },
    KeyDownEvent$(character, deviceType, logicalKey, physicalKey, synthesized, timeStamp) {
      return new A.KeyDownEvent(physicalKey, logicalKey, character, timeStamp, synthesized);
    },
    KeyUpEvent$(deviceType, logicalKey, physicalKey, synthesized, timeStamp) {
      return new A.KeyUpEvent(physicalKey, logicalKey, null, timeStamp, synthesized);
    },
    KeyRepeatEvent$(character, deviceType, logicalKey, physicalKey, timeStamp) {
      return new A.KeyRepeatEvent(physicalKey, logicalKey, character, timeStamp, false);
    },
    HardwareKeyboard$() {
      return new A.HardwareKeyboard(C.LinkedHashMap_LinkedHashMap$_empty(type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey), C.LinkedHashSet_LinkedHashSet$_empty(type$.KeyboardLockMode), C._setArrayType([], type$.JSArray_of_bool_Function_KeyEvent));
    },
    KeyMessage$(events, rawEvent) {
      return new A.KeyMessage(events, rawEvent);
    },
    KeyEventManager$(_hardwareKeyboard, _rawKeyboard) {
      return new A.KeyEventManager(_hardwareKeyboard, _rawKeyboard, C._setArrayType([], type$.JSArray_KeyEvent), C.LinkedHashSet_LinkedHashSet$_empty(type$.PhysicalKeyboardKey));
    },
    KeyEventManager__eventFromData(keyData) {
      var logicalKey, timeStamp,
        t1 = keyData.physical,
        physicalKey = A.PhysicalKeyboardKey_findKeyByCode(t1);
      if (physicalKey == null)
        physicalKey = A.PhysicalKeyboardKey$(t1);
      t1 = keyData.logical;
      logicalKey = A.LogicalKeyboardKey_findKeyByKeyId(t1);
      if (logicalKey == null)
        logicalKey = A.LogicalKeyboardKey$(t1);
      timeStamp = keyData.timeStamp;
      switch (keyData.type) {
        case B.KeyEventType_0:
          return A.KeyDownEvent$(keyData.character, B.KeyEventDeviceType_0, logicalKey, physicalKey, keyData.synthesized, timeStamp);
        case B.KeyEventType_1:
          return A.KeyUpEvent$(B.KeyEventDeviceType_0, logicalKey, physicalKey, keyData.synthesized, timeStamp);
        case B.KeyEventType_2:
          return A.KeyRepeatEvent$(keyData.character, B.KeyEventDeviceType_0, logicalKey, physicalKey, timeStamp);
      }
    },
    KeyEvent: function KeyEvent() {
    },
    KeyDownEvent: function KeyDownEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    KeyUpEvent: function KeyUpEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    KeyRepeatEvent: function KeyRepeatEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    HardwareKeyboard: function HardwareKeyboard(t0, t1, t2) {
      var _ = this;
      _._pressedKeys = t0;
      _._lockModes = t1;
      _._handlers = t2;
      _._modifiedHandlers = null;
    },
    KeyDataTransitMode: function KeyDataTransitMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    KeyMessage: function KeyMessage(t0, t1) {
      this.events = t0;
      this.rawEvent = t1;
    },
    KeyEventManager: function KeyEventManager(t0, t1, t2, t3) {
      var _ = this;
      _.keyMessageHandler = null;
      _._hardwareKeyboard = t0;
      _._rawKeyboard = t1;
      _._transitMode = null;
      _._keyEventsSinceLastMessage = t2;
      _._skippedRawKeysPressed = t3;
    },
    _KeyEvent_Object_Diagnosticable: function _KeyEvent_Object_Diagnosticable() {
    },
    KeyboardInsertedContent$fromJson(metadata) {
      var t1 = C._asString(metadata.$index(0, "mimeType")),
        t2 = C._asString(metadata.$index(0, "uri"));
      return new A.KeyboardInsertedContent(t1, t2, metadata.$index(0, "data") != null ? A.NativeUint8List_NativeUint8List$fromList(C.List_List$from(type$.Iterable_dynamic._as(metadata.$index(0, "data")), true, type$.int)) : null);
    },
    KeyboardInsertedContent: function KeyboardInsertedContent(t0, t1, t2) {
      this.mimeType = t0;
      this.uri = t1;
      this.data = t2;
    },
    LogicalKeyboardKey$(keyId) {
      return new D.LogicalKeyboardKey(keyId);
    },
    LogicalKeyboardKey_findKeyByKeyId(keyId) {
      return B.Map_2bMtF.$index(0, keyId);
    },
    PhysicalKeyboardKey$(usbHidUsage) {
      return new A.PhysicalKeyboardKey(usbHidUsage);
    },
    PhysicalKeyboardKey_findKeyByCode(usageCode) {
      return B.Map_arCny.$index(0, usageCode);
    },
    PhysicalKeyboardKey: function PhysicalKeyboardKey(t0) {
      this.usbHidUsage = t0;
    },
    MouseCursorManager$(fallbackMouseCursor) {
      return new A.MouseCursorManager(fallbackMouseCursor, C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.MouseCursorSession));
    },
    _DeferringMouseCursor_firstNonDeferred(cursors) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(cursors); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (!C.boolConversionCheck(t2.$eq(0, E.C__DeferringMouseCursor)))
          return t2;
      }
      return null;
    },
    MouseCursorManager: function MouseCursorManager(t0, t1) {
      this.fallbackMouseCursor = t0;
      this._lastSession = t1;
    },
    PredictiveBackEvent$_(progress, swipeEdge, touchOffset) {
      return new A.PredictiveBackEvent(touchOffset, progress, swipeEdge);
    },
    PredictiveBackEvent_PredictiveBackEvent$fromMap(map) {
      var t1, t2, t3,
        touchOffset = type$.nullable_List_nullable_Object._as(map.$index(0, "touchOffset"));
      if (touchOffset == null)
        t1 = null;
      else {
        t1 = J.getInterceptor$asx(touchOffset);
        t2 = t1.$index(touchOffset, 0);
        t2.toString;
        t2 = F.JSNumber_methods.toDouble$0(C._asNum(t2));
        t1 = t1.$index(touchOffset, 1);
        t1.toString;
        t1 = D.Offset$(t2, F.JSNumber_methods.toDouble$0(C._asNum(t1)));
      }
      t2 = map.$index(0, "progress");
      t2.toString;
      t2 = F.JSNumber_methods.toDouble$0(C._asNum(t2));
      t3 = map.$index(0, "swipeEdge");
      t3.toString;
      C._asInt(t3);
      if (!(t3 >= 0 && t3 < 2))
        return C.ioore(B.List_SwipeEdge_0_SwipeEdge_1, t3);
      return A.PredictiveBackEvent$_(t2, B.List_SwipeEdge_0_SwipeEdge_1[t3], t1);
    },
    SwipeEdge: function SwipeEdge(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    PredictiveBackEvent: function PredictiveBackEvent(t0, t1, t2) {
      this.touchOffset = t0;
      this.progress = t1;
      this.swipeEdge = t2;
    },
    RawKeyEvent_RawKeyEvent$fromMessage(message) {
      var data, repeat, t1, _box_0 = {};
      _box_0.character = null;
      data = new A.RawKeyEvent_RawKeyEvent$fromMessage_dataFromWeb(_box_0, message).call$0();
      repeat = J.contains$1$asx($.$get$RawKeyboard_instance().get$physicalKeysPressed(), data.get$physicalKey());
      t1 = message.$index(0, "type");
      t1.toString;
      C._asString(t1);
      $label0$0: {
        if ("keydown" === t1) {
          t1 = A.RawKeyDownEvent$(_box_0.character, data, repeat);
          break $label0$0;
        }
        if ("keyup" === t1) {
          t1 = A.RawKeyUpEvent$(data);
          break $label0$0;
        }
        t1 = C.throwExpression(D.FlutterError_FlutterError("Unknown key event type: " + t1));
      }
      return t1;
    },
    RawKeyDownEvent$(character, data, repeat) {
      return new A.RawKeyDownEvent(character, repeat, data);
    },
    RawKeyUpEvent$(data) {
      return new A.RawKeyUpEvent(null, false, data);
    },
    RawKeyboard$_0() {
      return new A.RawKeyboard0(C._setArrayType([], type$.JSArray_of_void_Function_RawKeyEvent), C.LinkedHashMap_LinkedHashMap$_empty(type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey));
    },
    _ModifierSidePair$(modifier, side) {
      return new A._ModifierSidePair(modifier, side);
    },
    KeyboardSide: function KeyboardSide(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ModifierKey: function ModifierKey(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RawKeyEventData: function RawKeyEventData() {
    },
    RawKeyEvent: function RawKeyEvent() {
    },
    RawKeyEvent_RawKeyEvent$fromMessage_dataFromWeb: function RawKeyEvent_RawKeyEvent$fromMessage_dataFromWeb(t0, t1) {
      this._box_0 = t0;
      this.message = t1;
    },
    RawKeyDownEvent: function RawKeyDownEvent(t0, t1, t2) {
      this.character = t0;
      this.repeat = t1;
      this.data = t2;
    },
    RawKeyUpEvent: function RawKeyUpEvent(t0, t1, t2) {
      this.character = t0;
      this.repeat = t1;
      this.data = t2;
    },
    RawKeyboard0: function RawKeyboard0(t0, t1) {
      this._raw_keyboard$_listeners = t0;
      this._keysPressed = t1;
    },
    _ModifierSidePair: function _ModifierSidePair(t0, t1) {
      this.modifier = t0;
      this.side = t1;
    },
    _RawKeyEvent_Object_Diagnosticable: function _RawKeyEvent_Object_Diagnosticable() {
    },
    _RawKeyEventData_Object_Diagnosticable: function _RawKeyEventData_Object_Diagnosticable() {
    },
    RawKeyEventDataWeb$(code, key, keyCode, $location, metaState) {
      return new A.RawKeyEventDataWeb(code, key, $location, metaState, keyCode);
    },
    RawKeyEventDataWeb: function RawKeyEventDataWeb(t0, t1, t2, t3, t4) {
      var _ = this;
      _.code = t0;
      _.key = t1;
      _.location = t2;
      _.metaState = t3;
      _.keyCode = t4;
    },
    RestorationManager$() {
      var t1 = new A.RestorationManager(C.LinkedHashSet_LinkedHashSet$_empty(type$.RestorationBucket), $.$get$ChangeNotifier__emptyListeners());
      t1.RestorationManager$0();
      return t1;
    },
    RestorationBucket$empty(debugOwner, restorationId) {
      var t1 = type$.String,
        t2 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RestorationBucket),
        t3 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_RestorationBucket);
      t3 = new A.RestorationBucket(C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_Object), null, null, restorationId, t2, t3);
      t3.RestorationBucket$empty$2$debugOwner$restorationId(debugOwner, restorationId);
      return t3;
    },
    RestorationBucket$root(manager, rawData) {
      var t3,
        t1 = type$.String,
        t2 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RestorationBucket);
      t1 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_RestorationBucket);
      if (rawData == null) {
        t3 = type$.nullable_Object;
        t3 = C.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      } else
        t3 = rawData;
      t1 = new A.RestorationBucket(t3, manager, null, "root", t2, t1);
      t1.RestorationBucket$root$2$manager$rawData(manager, rawData);
      return t1;
    },
    RestorationBucket$child(debugOwner, $parent, restorationId) {
      var t3, t4,
        t1 = type$.String,
        t2 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RestorationBucket);
      t1 = C.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_RestorationBucket);
      t3 = $parent._restoration$_manager;
      t4 = J.$index$asx($parent.get$_rawChildren(), restorationId);
      t4.toString;
      t1 = new A.RestorationBucket(type$.Map_of_nullable_Object_and_nullable_Object._as(t4), t3, $parent, restorationId, t2, t1);
      t1.RestorationBucket$child$3$debugOwner$parent$restorationId(debugOwner, $parent, restorationId);
      return t1;
    },
    RestorationManager: function RestorationManager(t0, t1) {
      var _ = this;
      _._pendingRootBucket = _._rootBucket = null;
      _._serializationScheduled = _._isReplacing = _._rootBucketIsValid = false;
      _._bucketsNeedingSerialization = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = false;
    },
    RestorationManager_handleRestorationUpdateFromEngine_closure: function RestorationManager_handleRestorationUpdateFromEngine_closure(t0) {
      this.$this = t0;
    },
    RestorationManager_scheduleSerializationFor_closure: function RestorationManager_scheduleSerializationFor_closure(t0) {
      this.$this = t0;
    },
    RestorationBucket: function RestorationBucket(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._rawData = t0;
      _._restoration$_manager = t1;
      _._restoration$_parent = t2;
      _._restorationId = t3;
      _._claimedChildren = t4;
      _._childrenToAdd = t5;
      _._needsSerialization = false;
    },
    RestorationBucket__rawChildren_closure: function RestorationBucket__rawChildren_closure() {
    },
    RestorationBucket__rawValues_closure: function RestorationBucket__rawValues_closure() {
    },
    RestorationBucket__addChildData_closure: function RestorationBucket__addChildData_closure() {
    },
    RestorationBucket__visitChildren_closure: function RestorationBucket__visitChildren_closure() {
    },
    ServicesServiceExtensions: function ServicesServiceExtensions(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SystemUiOverlayStyle$(statusBarBrightness, statusBarColor, statusBarIconBrightness, systemNavigationBarColor, systemNavigationBarContrastEnforced, systemNavigationBarDividerColor, systemNavigationBarIconBrightness, systemStatusBarContrastEnforced) {
      return new A.SystemUiOverlayStyle(systemNavigationBarColor, systemNavigationBarDividerColor, systemNavigationBarIconBrightness, systemNavigationBarContrastEnforced, statusBarColor, statusBarBrightness, statusBarIconBrightness, systemStatusBarContrastEnforced);
    },
    SystemChrome_setSystemUIOverlayStyle(style) {
      if ($.SystemChrome__pendingStyle != null) {
        $.SystemChrome__pendingStyle = style;
        return;
      }
      if (C.boolConversionCheck(style.$eq(0, $.SystemChrome__latestStyle)))
        return;
      $.SystemChrome__pendingStyle = style;
      C.scheduleMicrotask(new A.SystemChrome_setSystemUIOverlayStyle_closure());
    },
    SystemUiOverlayStyle: function SystemUiOverlayStyle(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.systemNavigationBarColor = t0;
      _.systemNavigationBarDividerColor = t1;
      _.systemNavigationBarIconBrightness = t2;
      _.systemNavigationBarContrastEnforced = t3;
      _.statusBarColor = t4;
      _.statusBarBrightness = t5;
      _.statusBarIconBrightness = t6;
      _.systemStatusBarContrastEnforced = t7;
    },
    SystemChrome_setSystemUIOverlayStyle_closure: function SystemChrome_setSystemUIOverlayStyle_closure() {
    },
    _toTextAffinity(affinity) {
      var t1;
      $label0$0: {
        if ("TextAffinity.downstream" === affinity) {
          t1 = E.TextAffinity_1;
          break $label0$0;
        }
        if ("TextAffinity.upstream" === affinity) {
          t1 = E.TextAffinity_0;
          break $label0$0;
        }
        t1 = null;
        break $label0$0;
      }
      return t1;
    },
    _replace0(originalText, replacementText, replacementRange) {
      return F.JSString_methods.replaceRange$3(originalText, replacementRange.start, replacementRange.end, replacementText);
    },
    TextEditingDelta_TextEditingDelta$fromJSON(encoded) {
      var t2, newComposing, t3, t4, newSelection, newText, isDeletionGreaterThanOne, isDeletingByReplacingWithEmpty, isReplacedByShorter, isReplacedBySame, isInsertingInsideComposingRegion, isDeletingInsideComposingRegion, newComposingText, originalComposingText, isReplaced,
        oldText = C._asString(encoded.$index(0, "oldText")),
        replacementDestinationStart = C._asInt(encoded.$index(0, "deltaStart")),
        replacementDestinationEnd = C._asInt(encoded.$index(0, "deltaEnd")),
        replacementSource = C._asString(encoded.$index(0, "deltaText")),
        replacementSourceEnd = replacementSource.length,
        isNonTextUpdate = replacementDestinationStart === -1 && replacementDestinationStart === replacementDestinationEnd,
        t1 = C._asIntQ(encoded.$index(0, "composingBase"));
      if (t1 == null)
        t1 = -1;
      t2 = C._asIntQ(encoded.$index(0, "composingExtent"));
      newComposing = D.TextRange$(t2 == null ? -1 : t2, t1);
      t1 = C._asIntQ(encoded.$index(0, "selectionBase"));
      if (t1 == null)
        t1 = -1;
      t2 = C._asIntQ(encoded.$index(0, "selectionExtent"));
      if (t2 == null)
        t2 = -1;
      t3 = A._toTextAffinity(C._asStringQ(encoded.$index(0, "selectionAffinity")));
      if (t3 == null)
        t3 = E.TextAffinity_1;
      t4 = C._asBoolQ(encoded.$index(0, "selectionIsDirectional"));
      newSelection = D.TextSelection$(t3, t1, t2, t4 === true);
      if (isNonTextUpdate)
        return A.TextEditingDeltaNonTextUpdate$(newComposing, oldText, newSelection);
      newText = A._replace0(oldText, replacementSource, D.TextRange$(replacementDestinationEnd, replacementDestinationStart));
      t1 = replacementDestinationEnd - replacementDestinationStart;
      isDeletionGreaterThanOne = t1 - replacementSourceEnd > 1;
      if (C.boolConversionCheck(F.JSString_methods.get$isEmpty(replacementSource)))
        isDeletingByReplacingWithEmpty = 0 === replacementSourceEnd;
      else
        isDeletingByReplacingWithEmpty = false;
      isReplacedByShorter = isDeletionGreaterThanOne && replacementSourceEnd < t1;
      isReplacedBySame = replacementSourceEnd === t1;
      t2 = replacementDestinationStart + replacementSourceEnd;
      isInsertingInsideComposingRegion = t2 > replacementDestinationEnd;
      t3 = !isReplacedByShorter;
      isDeletingInsideComposingRegion = t3 && !isDeletingByReplacingWithEmpty && t2 < replacementDestinationEnd;
      t4 = !isDeletingByReplacingWithEmpty;
      if (!t4 || isDeletingInsideComposingRegion || isReplacedByShorter) {
        newComposingText = F.JSString_methods.substring$2(replacementSource, 0, replacementSourceEnd);
        originalComposingText = F.JSString_methods.substring$2(oldText, replacementDestinationStart, t2);
      } else {
        newComposingText = F.JSString_methods.substring$2(replacementSource, 0, t1);
        originalComposingText = F.JSString_methods.substring$2(oldText, replacementDestinationStart, replacementDestinationEnd);
      }
      t2 = originalComposingText === newComposingText;
      isReplaced = !t2 || replacementSourceEnd > t1 || !t3 || isReplacedBySame;
      if (oldText === newText)
        return A.TextEditingDeltaNonTextUpdate$(newComposing, oldText, newSelection);
      else if ((!t4 || isDeletingInsideComposingRegion) && t2)
        return A.TextEditingDeltaDeletion$(newComposing, D.TextRange$(replacementDestinationEnd, !isDeletionGreaterThanOne ? replacementDestinationEnd - 1 : replacementDestinationStart), oldText, newSelection);
      else if ((replacementDestinationStart === replacementDestinationEnd || isInsertingInsideComposingRegion) && t2)
        return A.TextEditingDeltaInsertion$(newComposing, replacementDestinationEnd, oldText, newSelection, F.JSString_methods.substring$2(replacementSource, t1, t1 + (replacementSourceEnd - t1)));
      else if (isReplaced)
        return A.TextEditingDeltaReplacement$(newComposing, oldText, D.TextRange$(replacementDestinationEnd, replacementDestinationStart), replacementSource, newSelection);
      return A.TextEditingDeltaNonTextUpdate$(newComposing, oldText, newSelection);
    },
    TextEditingDeltaInsertion$(composing, insertionOffset, oldText, selection, textInserted) {
      return new A.TextEditingDeltaInsertion(textInserted, insertionOffset, oldText, selection, composing);
    },
    TextEditingDeltaDeletion$(composing, deletedRange, oldText, selection) {
      return new A.TextEditingDeltaDeletion(deletedRange, oldText, selection, composing);
    },
    TextEditingDeltaReplacement$(composing, oldText, replacedRange, replacementText, selection) {
      return new A.TextEditingDeltaReplacement(replacementText, replacedRange, oldText, selection, composing);
    },
    TextEditingDeltaNonTextUpdate$(composing, oldText, selection) {
      return new A.TextEditingDeltaNonTextUpdate(oldText, selection, composing);
    },
    TextEditingDelta: function TextEditingDelta() {
    },
    TextEditingDeltaInsertion: function TextEditingDeltaInsertion(t0, t1, t2, t3, t4) {
      var _ = this;
      _.textInserted = t0;
      _.insertionOffset = t1;
      _.oldText = t2;
      _.selection = t3;
      _.composing = t4;
    },
    TextEditingDeltaDeletion: function TextEditingDeltaDeletion(t0, t1, t2, t3) {
      var _ = this;
      _.deletedRange = t0;
      _.oldText = t1;
      _.selection = t2;
      _.composing = t3;
    },
    TextEditingDeltaReplacement: function TextEditingDeltaReplacement(t0, t1, t2, t3, t4) {
      var _ = this;
      _.replacementText = t0;
      _.replacedRange = t1;
      _.oldText = t2;
      _.selection = t3;
      _.composing = t4;
    },
    TextEditingDeltaNonTextUpdate: function TextEditingDeltaNonTextUpdate(t0, t1, t2) {
      this.oldText = t0;
      this.selection = t1;
      this.composing = t2;
    },
    _TextEditingDelta_Object_Diagnosticable: function _TextEditingDelta_Object_Diagnosticable() {
    },
    _toTextAffinity0(affinity) {
      var t1;
      $label0$0: {
        if ("TextAffinity.downstream" === affinity) {
          t1 = E.TextAffinity_1;
          break $label0$0;
        }
        if ("TextAffinity.upstream" === affinity) {
          t1 = E.TextAffinity_0;
          break $label0$0;
        }
        t1 = null;
        break $label0$0;
      }
      return t1;
    },
    RawFloatingCursorPoint$(offset, state) {
      return new A.RawFloatingCursorPoint(offset);
    },
    TextEditingValue$(composing, selection, text) {
      return new A.TextEditingValue(text, selection, composing);
    },
    TextEditingValue_TextEditingValue$fromJSON(encoded) {
      var t2, t3, t4, selection,
        text = C._asString(encoded.$index(0, "text")),
        t1 = C._asIntQ(encoded.$index(0, "selectionBase"));
      if (t1 == null)
        t1 = -1;
      t2 = C._asIntQ(encoded.$index(0, "selectionExtent"));
      if (t2 == null)
        t2 = -1;
      t3 = A._toTextAffinity0(C._asStringQ(encoded.$index(0, "selectionAffinity")));
      if (t3 == null)
        t3 = E.TextAffinity_1;
      t4 = C._asBoolQ(encoded.$index(0, "selectionIsDirectional"));
      selection = D.TextSelection$(t3, t1, t2, t4 === true);
      t1 = C._asIntQ(encoded.$index(0, "composingBase"));
      if (t1 == null)
        t1 = -1;
      t2 = C._asIntQ(encoded.$index(0, "composingExtent"));
      return A.TextEditingValue$(D.TextRange$(t2 == null ? -1 : t2, t1), selection, text);
    },
    _toTextInputAction(action) {
      var t1;
      $label0$0: {
        if ("TextInputAction.none" === action) {
          t1 = B.TextInputAction_0;
          break $label0$0;
        }
        if ("TextInputAction.unspecified" === action) {
          t1 = B.TextInputAction_1;
          break $label0$0;
        }
        if ("TextInputAction.go" === action) {
          t1 = B.TextInputAction_3;
          break $label0$0;
        }
        if ("TextInputAction.search" === action) {
          t1 = B.TextInputAction_4;
          break $label0$0;
        }
        if ("TextInputAction.send" === action) {
          t1 = B.TextInputAction_5;
          break $label0$0;
        }
        if ("TextInputAction.next" === action) {
          t1 = B.TextInputAction_6;
          break $label0$0;
        }
        if ("TextInputAction.previous" === action) {
          t1 = B.TextInputAction_7;
          break $label0$0;
        }
        if ("TextInputAction.continueAction" === action) {
          t1 = B.TextInputAction_8;
          break $label0$0;
        }
        if ("TextInputAction.join" === action) {
          t1 = B.TextInputAction_9;
          break $label0$0;
        }
        if ("TextInputAction.route" === action) {
          t1 = B.TextInputAction_10;
          break $label0$0;
        }
        if ("TextInputAction.emergencyCall" === action) {
          t1 = B.TextInputAction_11;
          break $label0$0;
        }
        if ("TextInputAction.done" === action) {
          t1 = B.TextInputAction_2;
          break $label0$0;
        }
        if ("TextInputAction.newline" === action) {
          t1 = B.TextInputAction_12;
          break $label0$0;
        }
        t1 = C.throwExpression(D.FlutterError$fromParts(C._setArrayType([D.ErrorSummary$("Unknown text input action: " + action)], type$.JSArray_DiagnosticsNode)));
      }
      return t1;
    },
    _toTextCursorAction(state) {
      var t1;
      $label0$0: {
        if ("FloatingCursorDragState.start" === state) {
          t1 = B.FloatingCursorDragState_0;
          break $label0$0;
        }
        if ("FloatingCursorDragState.update" === state) {
          t1 = B.FloatingCursorDragState_1;
          break $label0$0;
        }
        if ("FloatingCursorDragState.end" === state) {
          t1 = B.FloatingCursorDragState_2;
          break $label0$0;
        }
        t1 = C.throwExpression(D.FlutterError$fromParts(C._setArrayType([D.ErrorSummary$("Unknown text cursor action: " + state)], type$.JSArray_DiagnosticsNode)));
      }
      return t1;
    },
    _toTextPoint(state, encoded) {
      return A.RawFloatingCursorPoint$(state === B.FloatingCursorDragState_1 ? D.Offset$(F.JSNumber_methods.toDouble$0(C._asNum(encoded.$index(0, "X"))), F.JSNumber_methods.toDouble$0(C._asNum(encoded.$index(0, "Y")))) : E.Offset_0_0, state);
    },
    TextInput$_() {
      var t1 = $.$get$_PlatformTextInputControl_instance();
      t1 = new A.TextInput(t1, C.LinkedHashSet_LinkedHashSet$_literal([t1], type$.TextInputControl), C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ScribbleClient));
      t1.TextInput$_$0();
      return t1;
    },
    TextInput_ensureInitialized() {
      $.$get$TextInput__instance();
    },
    _PlatformTextInputControl$_() {
      return new A._PlatformTextInputControl();
    },
    TextInputType: function TextInputType(t0) {
      this.index = t0;
    },
    TextInputAction: function TextInputAction(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    FloatingCursorDragState: function FloatingCursorDragState(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RawFloatingCursorPoint: function RawFloatingCursorPoint(t0) {
      this.offset = t0;
    },
    TextEditingValue: function TextEditingValue(t0, t1, t2) {
      this.text = t0;
      this.selection = t1;
      this.composing = t2;
    },
    TextInput: function TextInput(t0, t1, t2) {
      var _ = this;
      _._currentControl = t0;
      _._inputControls = t1;
      _.__TextInput__channel_A = $;
      _._currentConnection = null;
      _.__TextInput__currentConfiguration_A = $;
      _._scribbleClients = t2;
    },
    TextInput__loudlyHandleTextInputInvocation_closure: function TextInput__loudlyHandleTextInputInvocation_closure(t0) {
      this.$call = t0;
    },
    TextInput__handleTextInputInvocation_closure: function TextInput__handleTextInputInvocation_closure() {
    },
    TextInput__handleTextInputInvocation_closure0: function TextInput__handleTextInputInvocation_closure0(t0, t1) {
      this.$this = t0;
      this.args = t1;
    },
    TextInput__handleTextInputInvocation_closure1: function TextInput__handleTextInputInvocation_closure1(t0) {
      this.$this = t0;
    },
    TextInputControl: function TextInputControl() {
    },
    _PlatformTextInputControl: function _PlatformTextInputControl() {
    },
    __PlatformTextInputControl_Object_TextInputControl: function __PlatformTextInputControl_Object_TextInputControl() {
    },
    Actions_maybeInvoke(context, intent, $T) {
      var t1 = {};
      t1.returnValue = null;
      D.Actions__visitActionsAncestors(context, new A.Actions_maybeInvoke_closure(t1, intent, context, $T));
      return null;
    },
    Actions_maybeInvoke_closure: function Actions_maybeInvoke_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.intent = t1;
      _.context = t2;
      _.T = t3;
    },
    SizedBox$shrink() {
      return new D.SizedBox(0, 0, null, null);
    },
    StatefulBuilder$(builder) {
      return new A.StatefulBuilder(builder, null);
    },
    _StatefulBuilderState$() {
      return new A._StatefulBuilderState();
    },
    StatefulBuilder: function StatefulBuilder(t0, t1) {
      this.builder = t0;
      this.key = t1;
    },
    _StatefulBuilderState: function _StatefulBuilderState() {
      this._framework0$_element = this._widget = null;
    },
    runWidget(app) {
      A._runWidget(app, A.WidgetsFlutterBinding_ensureInitialized(), "runWidget");
    },
    _runWidget(app, binding, debugEntryPoint) {
      binding.scheduleAttachRootWidget$1(app);
      binding.scheduleWarmUpFrame$0();
    },
    _debugDumpAppString() {
      var buffer = C.StringBuffer$("");
      buffer.writeln$1(C.S(J.get$runtimeType$(D.WidgetsBinding_instance())) + " - DEBUG MODE");
      if (D.WidgetsBinding_instance().get$rootElement() != null)
        buffer.writeln$1(D.WidgetsBinding_instance().get$rootElement().toStringDeep$0());
      else
        buffer.writeln$1("<no tree currently mounted>");
      return buffer.toString$0(0);
    },
    RootWidget$(child, debugShortDescription) {
      return new A.RootWidget(child, debugShortDescription, null);
    },
    RootElement$(widget) {
      var t1 = new A.RootElement(widget, E._ElementLifecycle_00, C.HashSet_HashSet(type$.Element));
      t1.Element$1(widget);
      return t1;
    },
    WidgetsFlutterBinding$() {
      var _null = null,
        t1 = type$.PipelineOwner,
        t2 = type$.RenderView,
        t3 = type$.int,
        t4 = type$.JSArray_of_void_Function_Duration;
      t3 = new A.WidgetsFlutterBinding(_null, _null, C.createSentinel(type$.PlatformMenuDelegate), C._setArrayType([], type$.JSArray_WidgetsBindingObserver), _null, true, C.Completer_Completer(type$.void), false, _null, false, C.createSentinel(type$.PipelineManifold), _null, C.createSentinel(t1), C.createSentinel(t2), C.createSentinel(t1), C.LinkedHashMap_LinkedHashMap$_empty(type$.Object, t2), false, 0, false, C.createSentinel(type$.ValueNotifier_bool), 0, _null, C.createSentinel(type$.AccessibilityFeatures), C.createSentinel(type$.ImageCache), A._SystemFontsNotifier$(), C.createSentinel(type$.HardwareKeyboard), C.createSentinel(type$.KeyEventManager), C.createSentinel(type$.BinaryMessenger), D.ValueNotifier$(_null, type$.nullable_int), C.createSentinel(type$.RestorationManager), _null, C.LinkedHashSet_LinkedHashSet$_empty(type$.SystemContextMenuClient), C._setArrayType([], type$.JSArray_of_void_Function_List_FrameTiming), _null, A.binding3__defaultSchedulingStrategy$closure(), A.HeapPriorityQueue$(A.binding3_SchedulerBinding__taskSorter$closure(), type$._TaskEntry_dynamic), false, 0, C.LinkedHashMap_LinkedHashMap$_empty(t3, type$._FrameCallbackEntry), C.HashSet_HashSet(t3), C._setArrayType([], t4), C._setArrayType([], t4), _null, false, E.SchedulerPhase_0, true, false, _null, F.Duration_0, F.Duration_0, _null, 0, _null, false, D.TimelineTask$(), _null, 0, D.ListQueue$(_null, type$.PointerEvent), A.PointerRouter$(), A.GestureArenaManager$(), A.PointerSignalResolver$(), C.LinkedHashMap_LinkedHashMap$_empty(t3, type$.HitTestResult), C.createSentinel(type$._Resampler), false, B.Duration_m38000);
      t3.BindingBase$0();
      return t3;
    },
    WidgetsFlutterBinding_ensureInitialized() {
      if ($.WidgetsBinding__instance == null)
        A.WidgetsFlutterBinding$();
      return D.WidgetsBinding_instance();
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure0(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure0() {
    },
    WidgetsBinding: function WidgetsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure5: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure5() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure6: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure6() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    WidgetsBinding_scheduleAttachRootWidget_closure: function WidgetsBinding_scheduleAttachRootWidget_closure(t0, t1) {
      this.$this = t0;
      this.rootWidget = t1;
    },
    RootWidget: function RootWidget(t0, t1, t2) {
      this.child = t0;
      this.debugShortDescription = t1;
      this.key = t2;
    },
    RootWidget_attach_closure: function RootWidget_attach_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.owner = t2;
    },
    RootWidget_attach_closure0: function RootWidget_attach_closure0(t0) {
      this._box_0 = t0;
    },
    RootElement: function RootElement(t0, t1, t2) {
      var _ = this;
      _._slot = _._framework0$_notificationTree = _._framework0$_parent = _._newWidget = _._child = null;
      _.__Element__depth_A = $;
      _._widget = t0;
      _._parentBuildScope = _._framework0$_owner = null;
      _._framework0$_lifecycleState = t1;
      _._debugForgottenChildrenWithGlobalKey = t2;
      _._framework0$_dependencies = _._framework0$_inheritedElements = null;
      _._framework0$_hadUnsatisfiedDependencies = false;
      _._framework0$_dirty = true;
      _._framework0$_inDirtyList = false;
    },
    WidgetsFlutterBinding: function WidgetsFlutterBinding(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64) {
      var _ = this;
      _.WidgetsBinding__debugShowWidgetInspectorOverrideNotifierObject = t0;
      _.WidgetsBinding__buildOwner = t1;
      _.WidgetsBinding___WidgetsBinding_platformMenuDelegate_A = t2;
      _.WidgetsBinding__observers = t3;
      _.WidgetsBinding__backGestureObserver = t4;
      _.WidgetsBinding__needToReportFirstFrame = t5;
      _.WidgetsBinding__firstFrameCompleter = t6;
      _.WidgetsBinding_debugBuildingDirtyElements = t7;
      _.WidgetsBinding__rootElement = t8;
      _.WidgetsBinding__readyToProduceFrames = t9;
      _.RendererBinding___RendererBinding__manifold_FI = t10;
      _.RendererBinding__mouseTracker = t11;
      _.RendererBinding___RendererBinding_pipelineOwner_FI = t12;
      _.RendererBinding___RendererBinding_renderView_FI = t13;
      _.RendererBinding___RendererBinding__rootPipelineOwner_A = t14;
      _.RendererBinding__viewIdToRenderView = t15;
      _.RendererBinding__debugMouseTrackerUpdateScheduled = t16;
      _.RendererBinding__firstFrameDeferredCount = t17;
      _.RendererBinding__firstFrameSent = t18;
      _.SemanticsBinding___SemanticsBinding__semanticsEnabled_FI = t19;
      _.SemanticsBinding__outstandingHandles = t20;
      _.SemanticsBinding__semanticsHandle = t21;
      _.SemanticsBinding___SemanticsBinding__accessibilityFeatures_A = t22;
      _.PaintingBinding___PaintingBinding__imageCache_A = t23;
      _.PaintingBinding__systemFonts = t24;
      _.ServicesBinding___ServicesBinding__keyboard_F = t25;
      _.ServicesBinding___ServicesBinding__keyEventManager_F = t26;
      _.ServicesBinding___ServicesBinding__defaultBinaryMessenger_F = t27;
      _.ServicesBinding_accessibilityFocus = t28;
      _.ServicesBinding___ServicesBinding__restorationManager_A = t29;
      _.ServicesBinding__systemUiChangeCallback = t30;
      _.ServicesBinding__systemContextMenuClients = t31;
      _.SchedulerBinding__timingsCallbacks = t32;
      _.SchedulerBinding__lifecycleState = t33;
      _.SchedulerBinding_schedulingStrategy = t34;
      _.SchedulerBinding__taskQueue = t35;
      _.SchedulerBinding__hasRequestedAnEventLoopCallback = t36;
      _.SchedulerBinding__nextFrameCallbackId = t37;
      _.SchedulerBinding__transientCallbacks = t38;
      _.SchedulerBinding__removedIds = t39;
      _.SchedulerBinding__persistentCallbacks = t40;
      _.SchedulerBinding__postFrameCallbacks0 = t41;
      _.SchedulerBinding__nextFrameCompleter = t42;
      _.SchedulerBinding__hasScheduledFrame = t43;
      _.SchedulerBinding__schedulerPhase0 = t44;
      _.SchedulerBinding__framesEnabled = t45;
      _.SchedulerBinding__warmUpFrame = t46;
      _.SchedulerBinding__firstRawTimeStampInEpoch = t47;
      _.SchedulerBinding__epochStart = t48;
      _.SchedulerBinding__lastRawTimeStamp = t49;
      _.SchedulerBinding__currentFrameTimeStamp = t50;
      _.SchedulerBinding__debugFrameNumber = t51;
      _.SchedulerBinding__debugBanner = t52;
      _.SchedulerBinding__rescheduleAfterWarmUpFrame = t53;
      _.SchedulerBinding__frameTimelineTask = t54;
      _.SchedulerBinding__performanceMode = t55;
      _.SchedulerBinding__numPerformanceModeRequests = t56;
      _.GestureBinding__pendingPointerEvents = t57;
      _.GestureBinding_pointerRouter = t58;
      _.GestureBinding_gestureArena = t59;
      _.GestureBinding_pointerSignalResolver = t60;
      _.GestureBinding__hitTests = t61;
      _.GestureBinding___GestureBinding__resampler_FI = t62;
      _.GestureBinding_resamplingEnabled = t63;
      _.GestureBinding_samplingOffset = t64;
      _._lockCount = 0;
    },
    _RootElement_Element_RootElementMixin: function _RootElement_Element_RootElementMixin() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding() {
    },
    combineKeyEventResults(results) {
      var t1, hasSkipRemainingHandlers;
      for (t1 = J.get$iterator$ax(results), hasSkipRemainingHandlers = false; C.boolConversionCheck(t1.moveNext$0());)
        switch (t1.get$current().index) {
          case 0:
            return E.KeyEventResult_0;
          case 2:
            hasSkipRemainingHandlers = true;
            break;
          case 1:
            break;
        }
      return hasSkipRemainingHandlers ? E.KeyEventResult_2 : E.KeyEventResult_1;
    },
    _AppLifecycleListener$(onLifecycleStateChanged) {
      return new A._AppLifecycleListener(onLifecycleStateChanged);
    },
    FocusManager$() {
      var t1 = new A.FocusManager(A._HighlightModeManager$(), D.FocusScopeNode$(true, "Root Focus Scope", false), C.LinkedHashSet_LinkedHashSet$_empty(type$.FocusNode), C._setArrayType([], type$.JSArray__Autofocus), $.$get$ChangeNotifier__emptyListeners());
      t1.FocusManager$0();
      return t1;
    },
    _HighlightModeManager$() {
      var t1 = type$.KeyEventResult_Function_KeyEvent;
      t1 = new A._HighlightModeManager(A.HashedObserverList$(t1), A.HashedObserverList$(t1), A.HashedObserverList$(type$.void_Function_FocusHighlightMode));
      t1._HighlightModeManager$0();
      return t1;
    },
    _HighlightModeManager__defaultModeForPlatform() {
      switch (D.defaultTargetPlatform()) {
        case E.TargetPlatform_0:
        case E.TargetPlatform_1:
        case E.TargetPlatform_2:
          if (C.boolConversionCheck(D.WidgetsBinding_instance().get$mouseTracker().get$mouseIsConnected()))
            return E.FocusHighlightMode_1;
          return E.FocusHighlightMode_0;
        case E.TargetPlatform_3:
        case E.TargetPlatform_4:
        case E.TargetPlatform_5:
          return E.FocusHighlightMode_1;
      }
    },
    FocusHighlightStrategy: function FocusHighlightStrategy(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    _AppLifecycleListener: function _AppLifecycleListener(t0) {
      this.onLifecycleStateChanged = t0;
    },
    FocusManager: function FocusManager(t0, t1, t2, t3, t4) {
      var _ = this;
      _._highlightManager = t0;
      _.rootScope = t1;
      _._primaryFocus = null;
      _._focus_manager$_dirtyNodes = t2;
      _._markedForFocus = _._suspendedNode = _._appLifecycleListener = null;
      _._pendingAutofocuses = t3;
      _._haveScheduledUpdate = false;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t4;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = false;
    },
    _HighlightModeManager: function _HighlightModeManager(t0, t1, t2) {
      var _ = this;
      _._highlightMode = _._lastInteractionWasTouch = null;
      _._earlyKeyEventHandlers = t0;
      _._lateKeyEventHandlers = t1;
      _._focus_manager$_listeners = t2;
    },
    _FocusManager_Object_DiagnosticableTreeMixin: function _FocusManager_Object_DiagnosticableTreeMixin() {
    },
    _FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier: function _FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier() {
    },
    _InactiveElements$() {
      return new A._InactiveElements(C.HashSet_HashSet(type$.Element));
    },
    _InactiveElements__deactivateRecursively(element) {
      type$.Element._as(element);
      element.deactivate$0();
      element.visitChildren$1(A.framework0__InactiveElements__deactivateRecursively$closure());
    },
    BuildScope$() {
      return new A.BuildScope(C._setArrayType([], type$.JSArray_Element));
    },
    BuildOwner$0() {
      var t5,
        t1 = A._InactiveElements$(),
        t2 = type$.Element,
        t3 = C.LinkedHashMap_LinkedHashMap$_empty(type$.GlobalKey_State_StatefulWidget, t2),
        t4 = C.HashSet_HashSet(t2);
      t2 = C.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Map_of_Element_and_GlobalKey_State_StatefulWidget);
      t5 = A.FocusManager$();
      t5.registerGlobalHandlers$0();
      return new A.BuildOwner(t1, t5, t3, t4, t2);
    },
    Element__sort0(a, b) {
      var t2, diff, isBDirty,
        t1 = type$.Element;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      diff = t1 - t2;
      if (diff !== 0)
        return diff;
      isBDirty = b.get$dirty();
      if (!C.boolConversionCheck(J.$eq$(a.get$dirty(), isBDirty)))
        return isBDirty ? -1 : 1;
      return 0;
    },
    _InactiveElements: function _InactiveElements(t0) {
      this._framework0$_elements = t0;
    },
    _InactiveElements__unmount_closure: function _InactiveElements__unmount_closure(t0) {
      this.$this = t0;
    },
    BuildScope: function BuildScope(t0) {
      var _ = this;
      _._building = _._buildScheduled = false;
      _._dirtyElementsNeedsResorting = null;
      _._dirtyElements = t0;
    },
    BuildScope__tryRebuild_closure: function BuildScope__tryRebuild_closure(t0) {
      this.element = t0;
    },
    BuildOwner: function BuildOwner(t0, t1, t2, t3, t4) {
      var _ = this;
      _.onBuildScheduled = null;
      _._framework0$_inactiveElements = t0;
      _._scheduledFlushDirtyElements = false;
      _.focusManager = t1;
      _._globalKeyRegistry = t2;
      _._debugIllFatedElements = t3;
      _._debugGlobalKeyReservations = t4;
    },
    RootElementMixin: function RootElementMixin() {
    },
    RenderTreeRootElement: function RenderTreeRootElement() {
    },
    MediaQueryData$(accessibleNavigation, alwaysUse24HourFormat, boldText, devicePixelRatio, disableAnimations, displayFeatures, gestureSettings, highContrast, invertColors, navigationMode, onOffSwitchLabels, padding, platformBrightness, size, supportsShowingSystemContextMenu, systemGestureInsets, textScaler, viewInsets, viewPadding) {
      return new A.MediaQueryData(size, devicePixelRatio, textScaler, platformBrightness, viewInsets, padding, viewPadding, systemGestureInsets, alwaysUse24HourFormat, accessibleNavigation, invertColors, highContrast, onOffSwitchLabels, disableAnimations, boldText, navigationMode, gestureSettings, displayFeatures, supportsShowingSystemContextMenu);
    },
    MediaQueryData$fromView(view, platformData) {
      var t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, _null = null,
        t1 = J.$div$n(view.get$physicalSize(), view.get$devicePixelRatio()),
        t2 = view.get$devicePixelRatio(),
        t3 = A.MediaQueryData__textScalerFromView(view, platformData),
        t4 = platformData == null,
        t5 = t4 ? _null : platformData.platformBrightness;
      if (t5 == null)
        t5 = view.platformDispatcher.get$platformBrightness();
      t6 = A.EdgeInsets$fromViewPadding(view.get$padding(), view.get$devicePixelRatio());
      t7 = A.EdgeInsets$fromViewPadding(view.get$viewPadding(), view.get$devicePixelRatio());
      t8 = A.EdgeInsets$fromViewPadding(view.get$viewInsets(), view.get$devicePixelRatio());
      t9 = A.EdgeInsets$fromViewPadding(view.get$systemGestureInsets(), view.get$devicePixelRatio());
      t10 = t4 ? _null : platformData.accessibleNavigation;
      if (t10 == null)
        t10 = view.platformDispatcher.get$accessibilityFeatures().get$accessibleNavigation();
      t11 = t4 ? _null : platformData.invertColors;
      if (t11 == null)
        t11 = view.platformDispatcher.get$accessibilityFeatures().get$invertColors();
      t12 = t4 ? _null : platformData.disableAnimations;
      if (t12 == null)
        t12 = view.platformDispatcher.get$accessibilityFeatures().get$disableAnimations();
      t13 = t4 ? _null : platformData.boldText;
      if (t13 == null)
        t13 = view.platformDispatcher.get$accessibilityFeatures().get$boldText();
      t14 = t4 ? _null : platformData.highContrast;
      if (t14 == null)
        t14 = view.platformDispatcher.get$accessibilityFeatures().get$highContrast();
      t15 = t4 ? _null : platformData.onOffSwitchLabels;
      if (t15 == null)
        t15 = view.platformDispatcher.get$accessibilityFeatures().get$onOffSwitchLabels();
      t16 = t4 ? _null : platformData.alwaysUse24HourFormat;
      if (t16 == null)
        t16 = view.platformDispatcher.get$alwaysUse24HourFormat();
      t17 = t4 ? _null : platformData.navigationMode;
      if (t17 == null)
        t17 = E.NavigationMode_0;
      t18 = A.DeviceGestureSettings_DeviceGestureSettings$fromView(view);
      t19 = view.get$displayFeatures();
      t4 = t4 ? _null : platformData.supportsShowingSystemContextMenu;
      return new A.MediaQueryData(t1, t2, t3, t5, t8, t6, t7, t9, t16, t10, t11, t14, t15, t12, t13, t17, t18, t19, t4 == null ? view.platformDispatcher.get$supportsShowingSystemContextMenu() : t4);
    },
    MediaQueryData__textScalerFromView(view, platformData) {
      var scaleFactor = platformData == null ? null : platformData.get$textScaleFactor();
      if (scaleFactor == null)
        scaleFactor = view.platformDispatcher.get$textScaleFactor();
      return scaleFactor === 1 ? E._LinearTextScaler_1 : D._LinearTextScaler$(scaleFactor);
    },
    MediaQuery_fromView(child, view) {
      return A._MediaQueryFromView$(child, null, view);
    },
    _MediaQueryFromView$(child, key, view) {
      return new A._MediaQueryFromView(view, child, key);
    },
    _MediaQueryFromViewState$() {
      return new A._MediaQueryFromViewState();
    },
    Orientation: function Orientation(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    MediaQueryData: function MediaQueryData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.size = t0;
      _.devicePixelRatio = t1;
      _._textScaler = t2;
      _.platformBrightness = t3;
      _.viewInsets = t4;
      _.padding = t5;
      _.viewPadding = t6;
      _.systemGestureInsets = t7;
      _.alwaysUse24HourFormat = t8;
      _.accessibleNavigation = t9;
      _.invertColors = t10;
      _.highContrast = t11;
      _.onOffSwitchLabels = t12;
      _.disableAnimations = t13;
      _.boldText = t14;
      _.navigationMode = t15;
      _.gestureSettings = t16;
      _.displayFeatures = t17;
      _.supportsShowingSystemContextMenu = t18;
    },
    _MediaQueryFromView: function _MediaQueryFromView(t0, t1, t2) {
      this.view = t0;
      this.child = t1;
      this.key = t2;
    },
    _MediaQueryFromViewState: function _MediaQueryFromViewState() {
      var _ = this;
      _._framework0$_element = _._widget = _._media_query$_data = _._parentData = null;
    },
    _MediaQueryFromViewState__updateData_closure: function _MediaQueryFromViewState__updateData_closure(t0, t1) {
      this.$this = t0;
      this.newData = t1;
    },
    _UnspecifiedTextScaler: function _UnspecifiedTextScaler() {
    },
    __MediaQueryFromViewState_State_WidgetsBindingObserver: function __MediaQueryFromViewState_State_WidgetsBindingObserver() {
    },
    DefaultPlatformMenuDelegate$() {
      var t1 = new A.DefaultPlatformMenuDelegate(C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PlatformMenuItem), B.OptionalMethodChannel_ayZ);
      t1.DefaultPlatformMenuDelegate$1$channel(null);
      return t1;
    },
    PlatformMenuDelegate: function PlatformMenuDelegate() {
    },
    DefaultPlatformMenuDelegate: function DefaultPlatformMenuDelegate(t0, t1) {
      this._idMap = t0;
      this.channel = t1;
    },
    WidgetsServiceExtensions: function WidgetsServiceExtensions(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    View$(child, view) {
      return new A.View(view, child, null);
    },
    _ViewState$() {
      return new A._ViewState(D.FocusScopeNode$(true, "View Scope", false), D.ReadingOrderTraversalPolicy$());
    },
    RawView$(child, deprecatedDoNotUseWillBeRemovedWithoutNoticePipelineOwner, deprecatedDoNotUseWillBeRemovedWithoutNoticeRenderView, view) {
      return new A.RawView(view, child, deprecatedDoNotUseWillBeRemovedWithoutNoticePipelineOwner, deprecatedDoNotUseWillBeRemovedWithoutNoticeRenderView, null);
    },
    _RawViewInternal$(builder, deprecatedPipelineOwner, deprecatedRenderView, view) {
      return new A._RawViewInternal(view, builder, deprecatedPipelineOwner, deprecatedRenderView, A._DeprecatedRawViewKey$(view, deprecatedPipelineOwner, deprecatedRenderView, type$.State_StatefulWidget));
    },
    _RawViewElement$(widget) {
      var t1 = new A._RawViewElement(widget, E._ElementLifecycle_00, C.HashSet_HashSet(type$.Element));
      t1.Element$1(widget);
      return t1;
    },
    _ViewScope$(child, view) {
      return new A._ViewScope(view, child, null);
    },
    _PipelineOwnerScope$(child, pipelineOwner) {
      return new A._PipelineOwnerScope(pipelineOwner, child, null);
    },
    ViewCollection$(views) {
      return new A.ViewCollection(views, null);
    },
    _MultiChildComponentElement$(widget) {
      var t1 = type$.Element;
      t1 = new A._MultiChildComponentElement(C._setArrayType([], type$.JSArray_Element), C.HashSet_HashSet(t1), widget, E._ElementLifecycle_00, C.HashSet_HashSet(t1));
      t1.Element$1(widget);
      return t1;
    },
    _DeprecatedRawViewKey$(view, owner, renderView, $T) {
      return new A._DeprecatedRawViewKey(view, owner, renderView, $T._eval$1("_DeprecatedRawViewKey<0>"));
    },
    View: function View(t0, t1, t2) {
      this.view = t0;
      this.child = t1;
      this.key = t2;
    },
    _ViewState: function _ViewState(t0, t1) {
      var _ = this;
      _._scopeNode = t0;
      _._policy = t1;
      _._framework0$_element = _._widget = null;
    },
    RawView: function RawView(t0, t1, t2, t3, t4) {
      var _ = this;
      _.view = t0;
      _.child = t1;
      _._deprecatedPipelineOwner = t2;
      _._deprecatedRenderView = t3;
      _.key = t4;
    },
    RawView_build_closure: function RawView_build_closure(t0) {
      this.$this = t0;
    },
    _RawViewInternal: function _RawViewInternal(t0, t1, t2, t3, t4) {
      var _ = this;
      _.view = t0;
      _.builder = t1;
      _._deprecatedPipelineOwner = t2;
      _._deprecatedRenderView = t3;
      _.key = t4;
    },
    _RawViewElement: function _RawViewElement(t0, t1, t2) {
      var _ = this;
      _.___RawViewElement__pipelineOwner_FI = $;
      _._slot = _._framework0$_notificationTree = _._framework0$_parent = _._ancestorRenderObjectElement = _._framework0$_renderObject = _._parentPipelineOwner = _._view$_child = null;
      _.__Element__depth_A = $;
      _._widget = t0;
      _._parentBuildScope = _._framework0$_owner = null;
      _._framework0$_lifecycleState = t1;
      _._debugForgottenChildrenWithGlobalKey = t2;
      _._framework0$_dependencies = _._framework0$_inheritedElements = null;
      _._framework0$_hadUnsatisfiedDependencies = false;
      _._framework0$_dirty = true;
      _._framework0$_inDirtyList = false;
    },
    _RawViewElement__updateChild_closure: function _RawViewElement__updateChild_closure(t0) {
      this.$this = t0;
    },
    _ViewScope: function _ViewScope(t0, t1, t2) {
      this.view = t0;
      this.child = t1;
      this.key = t2;
    },
    _PipelineOwnerScope: function _PipelineOwnerScope(t0, t1, t2) {
      this.pipelineOwner = t0;
      this.child = t1;
      this.key = t2;
    },
    _MultiChildComponentWidget: function _MultiChildComponentWidget() {
    },
    ViewCollection: function ViewCollection(t0, t1) {
      this._view$_views = t0;
      this.key = t1;
    },
    _MultiChildComponentElement: function _MultiChildComponentElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _._viewElements = t0;
      _._forgottenViewElements = t1;
      _._slot = _._framework0$_notificationTree = _._framework0$_parent = _._childElement = null;
      _.__Element__depth_A = $;
      _._widget = t2;
      _._parentBuildScope = _._framework0$_owner = null;
      _._framework0$_lifecycleState = t3;
      _._debugForgottenChildrenWithGlobalKey = t4;
      _._framework0$_dependencies = _._framework0$_inheritedElements = null;
      _._framework0$_hadUnsatisfiedDependencies = false;
      _._framework0$_dirty = true;
      _._framework0$_inDirtyList = false;
    },
    _DeprecatedRawViewKey: function _DeprecatedRawViewKey(t0, t1, t2, t3) {
      var _ = this;
      _.view = t0;
      _.owner = t1;
      _.renderView = t2;
      _.$ti = t3;
    },
    __ViewState_State_WidgetsBindingObserver: function __ViewState_State_WidgetsBindingObserver() {
    },
    UniqueKey$0() {
      return new A.UniqueKey0();
    },
    Key0: function Key0() {
    },
    LocalKey0: function LocalKey0() {
    },
    UniqueKey0: function UniqueKey0() {
    },
    FlutterEmbedView$(classes, constraints, id, loader, styles, widget) {
      return new A.FlutterEmbedView(widget, loader, constraints, id, classes, styles, null);
    },
    FlutterEmbedView_preload() {
      return A.preloadEngine();
    },
    _FlutterEmbedViewState$() {
      return new A._FlutterEmbedViewState(A.UniqueKey$0());
    },
    FlutterEmbedView: function FlutterEmbedView(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.widget = t0;
      _.loader = t1;
      _.constraints = t2;
      _.id = t3;
      _.classes = t4;
      _.styles = t5;
      _.key = t6;
    },
    _FlutterEmbedViewState: function _FlutterEmbedViewState(t0) {
      var _ = this;
      _.viewId = _.rebuildFlutterApp = null;
      _._frame = 0;
      _.flutterDivKey = t0;
      _._framework$_element = _._component = null;
    },
    _FlutterEmbedViewState_initState_closure: function _FlutterEmbedViewState_initState_closure(t0) {
      this.$this = t0;
    },
    _FlutterEmbedViewState_initState__closure: function _FlutterEmbedViewState_initState__closure(t0) {
      this.$this = t0;
    },
    _FlutterEmbedViewState_initState___closure: function _FlutterEmbedViewState_initState___closure(t0, t1) {
      this.context = t0;
      this.setState = t1;
    },
    _FlutterEmbedViewState_initState____closure: function _FlutterEmbedViewState_initState____closure() {
    },
    _FlutterEmbedViewState_waitOnWarmupFrames_closure: function _FlutterEmbedViewState_waitOnWarmupFrames_closure() {
    },
    _FlutterEmbedViewState_waitOnWarmupFrames_closure0: function _FlutterEmbedViewState_waitOnWarmupFrames_closure0(t0) {
      this.$this = t0;
    },
    _FlutterEmbedViewState_findChildDomElement_closure: function _FlutterEmbedViewState_findChildDomElement_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    MultiViewApp$(viewBuilder) {
      return new A.MultiViewApp(viewBuilder, null);
    },
    _MultiViewAppState$() {
      return new A._MultiViewAppState(C.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.Widget));
    },
    MultiViewApp: function MultiViewApp(t0, t1) {
      this.viewBuilder = t0;
      this.key = t1;
    },
    _MultiViewAppState: function _MultiViewAppState(t0) {
      this._views = t0;
      this._framework0$_element = this._widget = null;
    },
    _MultiViewAppState__updateViews_closure: function _MultiViewAppState__updateViews_closure(t0, t1) {
      this.$this = t0;
      this.newViews = t1;
    },
    __MultiViewAppState_State_WidgetsBindingObserver: function __MultiViewAppState_State_WidgetsBindingObserver() {
    },
    preloadEngine() {
      return $.$get$_flutterApp();
    },
    addView(target, constraints, widget) {
      return A.addView$body(target, constraints, widget);
    },
    addView$body(target, constraints, widget) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, id, $async$temp1;
      var $async$addView = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = C;
              $async$goto = 3;
              return C._asyncAwait($.$get$_flutterApp(), $async$addView);
            case 3:
              // returning from await.
              id = $async$temp1._callMethodUnchecked1($async$result, "addView", {hostElement: target, viewConstraints: constraints}, type$.int);
              J.$indexSet$ax($._viewWidgets, id, widget);
              $async$returnValue = id;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$addView, $async$completer);
    },
    removeView(viewId) {
      return A.removeView$body(viewId);
    },
    removeView$body(viewId) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$temp1;
      var $async$removeView = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = C;
              $async$goto = 2;
              return C._asyncAwait($.$get$_flutterApp(), $async$removeView);
            case 2:
              // returning from await.
              $async$temp1._callMethodUnchecked1($async$result, "removeView", viewId, type$.void);
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$removeView, $async$completer);
    },
    _flutterApp_closure: function _flutterApp_closure() {
    },
    _flutterApp__closure: function _flutterApp__closure(t0) {
      this.completer = t0;
    },
    _flutterApp___closure0: function _flutterApp___closure0(t0, t1) {
      this.engineInitializer = t0;
      this.completer = t1;
    },
    _flutterApp__closure0: function _flutterApp__closure0() {
    },
    _flutterApp___closure: function _flutterApp___closure() {
    },
    createObjectLiteral($T) {
      return {};
    },
    NativeUint8List_NativeUint8List$fromList(elements) {
      return C.NativeUint8List__create1(D._ensureNativeList(elements));
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = C.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    JSObjectUnsafeUtilExtension_setProperty(_this, property, value) {
      return _this[property] = value;
    },
    JSFunctionUnsafeUtilExtension__callAsConstructor(_this, arg1, arg2, arg3, arg4) {
      var t1;
      if (arg1 == null)
        t1 = null;
      else {
        t1 = [arg1];
        if (arg2 != null)
          t1.push(arg2);
        if (arg3 != null)
          t1.push(arg3);
        if (arg4 != null)
          t1.push(arg4);
      }
      return A.callConstructor(_this, t1, type$.JSObject);
    },
    JSObjectUnsafeUtilExtension____(_this, property, value) {
      return A.JSObjectUnsafeUtilExtension_setProperty(_this, C.StringToJSString_get_toJS(property), value);
    },
    JSFunctionUnsafeUtilExtension_callAsConstructor(_this, arg1, $R) {
      return $R._as(A.JSFunctionUnsafeUtilExtension__callAsConstructor(_this, arg1, null, null, null));
    },
    _functionToJS0(f) {
      var result;
      if (C.boolConversionCheck(C.isJSFunction(f)))
        throw C.wrapException(C.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function() {
          return _call(f);
        };
      }(A._callDartFunctionFast0, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast0(callback) {
      return type$.Function._as(callback).call$0();
    },
    newObject($T) {
      return A.createObjectLiteral($T);
    },
    callConstructor(constr, $arguments, $T) {
      var args, factoryFunction;
      if ($arguments == null)
        return $T._as(new constr());
      else
        D.assertInteropArgs($arguments);
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return $T._as(new constr());
          case 1:
            return $T._as(new constr($arguments[0]));
          case 2:
            return $T._as(new constr($arguments[0], $arguments[1]));
          case 3:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2]));
          case 4:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]));
        }
      args = [null];
      F.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return $T._as(new factoryFunction());
    },
    defaultCompare(value1, value2) {
      return J.compareTo$1$ns(type$.Comparable_nullable_Object._as(value1), value2);
    },
    debugInstrumentAction(description, action, $T) {
      return A.debugInstrumentAction$body(description, action, $T, $T);
    },
    debugInstrumentAction$body(description, action, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, t1;
      var $async$debugInstrumentAction = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = action.call$0();
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$debugInstrumentAction, $async$completer);
    },
    EdgeInsets$fromViewPadding(padding, devicePixelRatio) {
      var t2, t3, t4,
        t1 = padding.left;
      if (typeof t1 !== "number")
        return t1.$div();
      t2 = padding.top;
      if (typeof t2 !== "number")
        return t2.$div();
      t3 = padding.right;
      if (typeof t3 !== "number")
        return t3.$div();
      t4 = padding.bottom;
      if (typeof t4 !== "number")
        return t4.$div();
      return new D.EdgeInsets(t1 / devicePixelRatio, t2 / devicePixelRatio, t3 / devicePixelRatio, t4 / devicePixelRatio);
    },
    SystemNavigator_pop() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$SystemNavigator_pop = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return C._asyncAwait(E.OptionalMethodChannel_ENd.invokeMethod$1$2("SystemNavigator.pop", null, type$.void), $async$SystemNavigator_pop);
            case 2:
              // returning from await.
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$SystemNavigator_pop, $async$completer);
    }
  },
  B;
  J = holdersList[1];
  C = holdersList[0];
  F = holdersList[2];
  D = holdersList[5];
  E = holdersList[6];
  A = hunkHelpers.updateHolder(holdersList[3], A);
  B = holdersList[7];
  A.AppBootstrap.prototype = {
    autoStart$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$autoStart$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return C._asyncAwait($async$self._initializeEngine.call$0(), $async$autoStart$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return C._asyncAwait($async$self._runApp.call$0(), $async$autoStart$0);
            case 3:
              // returning from await.
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$autoStart$0, $async$completer);
    },
    prepareEngineInitializer$0() {
      return A.FlutterEngineInitializer__staticInteropFactoryStub(new A.AppBootstrap_prepareEngineInitializer_closure(this), new A.AppBootstrap_prepareEngineInitializer_closure0(this));
    },
    _prepareAppRunner$0() {
      return A.FlutterAppRunner__staticInteropFactoryStub(new A.AppBootstrap__prepareAppRunner_closure(this));
    },
    get$viewManager() {
      return D.EnginePlatformDispatcher_instance().get$viewManager();
    },
    _prepareFlutterApp$0() {
      return A.FlutterApp__staticInteropFactoryStub(new A.AppBootstrap__prepareFlutterApp_closure(this), new A.AppBootstrap__prepareFlutterApp_closure0(this));
    },
    _initializeEngine$1(arg0) {
      return this._initializeEngine.call$1(arg0);
    },
    _runApp$0() {
      return this._runApp.call$0();
    }
  };
  A.FontAsset.prototype = {};
  A.FontFamily.prototype = {};
  A.FontManifest.prototype = {};
  A.ResourceManager.prototype = {};
  A.DebugEngineInitializationState.prototype = {
    _enumToString$0() {
      return "DebugEngineInitializationState." + C.S(this._core$_name);
    }
  };
  A.KeyboardBinding.prototype = {
    KeyboardBinding$_$0() {
      var _this = this;
      _this._addEventListener$2("keydown", new A.KeyboardBinding$__closure(_this));
      _this._addEventListener$2("keyup", new A.KeyboardBinding$__closure0(_this));
    },
    get$localPlatform() {
      return $.$get$browser().get$operatingSystem();
    },
    get$converter() {
      return this.get$_converter();
    },
    get$_converter() {
      var result, _this = this,
        value = _this.__KeyboardBinding__converter_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = A.KeyboardConverter$(_this.get$_onKeyData(), _this.get$localPlatform());
        _this.__KeyboardBinding__converter_FI !== $ && C.throwLateFieldADI("_converter");
        _this.__KeyboardBinding__converter_FI = result;
        value = result;
      }
      return value;
    },
    _addEventListener$2(eventName, handler) {
      var wrappedHandler;
      C._asString(eventName);
      wrappedHandler = D.createDomEventListener(new A.KeyboardBinding__addEventListener_loggedHandler(type$.void_Function_JavaScriptObject._as(handler)));
      J.$indexSet$ax(this._listeners, eventName, wrappedHandler);
      D.DomEventTargetExtension_addEventListener(self.window, eventName, wrappedHandler, true);
    },
    _onKeyData$1(data) {
      var t1 = {};
      type$.KeyData._as(data);
      t1.result = null;
      D.EnginePlatformDispatcher_instance().invokeOnKeyData$2(data, new A.KeyboardBinding__onKeyData_closure(t1));
      t1 = t1.result;
      t1.toString;
      return t1;
    }
  };
  A.FlutterHtmlKeyboardEvent.prototype = {
    get$type() {
      return D.DomEventExtension_get_type(this._event);
    },
    get$code() {
      return A.DomKeyboardEventExtension_get_code(this._event);
    },
    get$key() {
      return A.DomKeyboardEventExtension_get_key(this._event);
    },
    get$keyCode() {
      return J.toInt$0$n(D.DomKeyboardEventExtension_get_keyCode(this._event));
    },
    get$repeat() {
      return A.DomKeyboardEventExtension_get_repeat(this._event);
    },
    get$location() {
      return J.toInt$0$n(A.DomKeyboardEventExtension_get_location(this._event));
    },
    get$timeStamp() {
      return D.DomEventExtension_get_timeStamp(this._event);
    },
    get$altKey() {
      return A.DomKeyboardEventExtension_get_altKey(this._event);
    },
    get$ctrlKey() {
      return A.DomKeyboardEventExtension_get_ctrlKey(this._event);
    },
    get$shiftKey() {
      var t1 = D.DomKeyboardEventExtension_get_shiftKey(this._event);
      return t1 == null ? false : t1;
    },
    get$metaKey() {
      return A.DomKeyboardEventExtension_get_metaKey(this._event);
    },
    get$isComposing() {
      return A.DomKeyboardEventExtension_get_isComposing(this._event);
    },
    getModifierState$1(key) {
      return A.DomKeyboardEventExtension_getModifierState(this._event, C._asString(key));
    },
    preventDefault$0() {
      return C._callMethodUnchecked0(this._event, "preventDefault", type$.void);
    },
    stopPropagation$0() {
      return C._callMethodUnchecked0(this._event, "stopPropagation", type$.void);
    }
  };
  A.KeyboardConverter.prototype = {
    _shouldSynthesizeCapsLockUp$0() {
      return this.onDarwin;
    },
    _shouldDoKeyGuard$0() {
      return this.onDarwin;
    },
    _scheduleAsyncEvent$3(duration, getData, callback) {
      var t2, t1 = {};
      type$.Duration._as(duration);
      type$.KeyData_Function._as(getData);
      type$.void_Function._as(callback);
      t1.canceled = false;
      t2 = type$.void;
      D.Future_Future$delayed(duration, null, t2).then$1$1(new A.KeyboardConverter__scheduleAsyncEvent_closure(t1, this, callback, getData), t2);
      return new A.KeyboardConverter__scheduleAsyncEvent_closure0(t1);
    },
    _startGuardingKey$3(physicalKey, logicalKey, currentTimeStamp) {
      var cancelingCallback, t1, t2, t3, _this = this;
      C._asInt(physicalKey);
      C._asInt(logicalKey);
      type$.Duration._as(currentTimeStamp);
      if (!C.boolConversionCheck(_this._shouldDoKeyGuard$0()))
        return;
      cancelingCallback = _this._scheduleAsyncEvent$3(E.Duration_2000000, new A.KeyboardConverter__startGuardingKey_closure(currentTimeStamp, physicalKey, logicalKey), new A.KeyboardConverter__startGuardingKey_closure0(_this, physicalKey));
      t1 = _this._keyGuards;
      t2 = J.getInterceptor$ax(t1);
      t3 = t2.remove$1(t1, physicalKey);
      if (t3 != null)
        t3.call$0();
      t2.$indexSet(t1, physicalKey, cancelingCallback);
    },
    _stopGuardingKey$1(physicalKey) {
      var t1 = J.remove$1$ax(this._keyGuards, C._asInt(physicalKey));
      if (t1 != null)
        t1.call$0();
    },
    _handleEvent$1($event) {
      var t1, timeStamp, t2, physicalKey, logicalKeyIsCharacter, logicalKey, isPhysicalDown, type, t3, t4, t5, lastLogicalRecord, nextLogicalRecord, character, keyData, _this = this,
        _s8_ = "CapsLock",
        _null = null;
      type$.FlutterHtmlKeyboardEvent._as($event);
      t1 = $event.get$timeStamp();
      t1.toString;
      timeStamp = A._eventTimeStampToDuration(t1);
      t1 = $event.get$key();
      t1.toString;
      t2 = $event.get$code();
      t2.toString;
      physicalKey = A.KeyboardConverter__getPhysicalCode(t2);
      logicalKeyIsCharacter = !C.boolConversionCheck(A.KeyboardConverter__eventKeyIsKeyName(t1));
      logicalKey = A._cached(new A.KeyboardConverter__handleEvent_closure(_this, t1, $event, logicalKeyIsCharacter, physicalKey), type$.int);
      if (!C.boolConversionCheck(J.$eq$($event.get$type(), "keydown")))
        if (C.boolConversionCheck(_this._shouldSynthesizeCapsLockUp$0())) {
          t2 = $event.get$code();
          t2.toString;
          t2 = C.boolConversionCheck(J.$eq$(t2, _s8_));
          isPhysicalDown = t2;
        } else
          isPhysicalDown = false;
      else
        isPhysicalDown = true;
      if (C.boolConversionCheck(_this._shouldSynthesizeCapsLockUp$0())) {
        t2 = $event.get$code();
        t2.toString;
        t2 = C.boolConversionCheck(J.$eq$(t2, _s8_));
      } else
        t2 = false;
      if (t2) {
        _this._scheduleAsyncEvent$3(F.Duration_0, new A.KeyboardConverter__handleEvent_closure0(timeStamp, physicalKey, logicalKey), new A.KeyboardConverter__handleEvent_closure1(_this, physicalKey));
        type = B.KeyEventType_0;
      } else if (isPhysicalDown) {
        t2 = _this._pressingRecords;
        t3 = J.getInterceptor$asx(t2);
        if (t3.$index(t2, physicalKey) != null) {
          t4 = $event.get$repeat();
          if (C.boolConversionCheck(t4 == null ? false : t4))
            type = B.KeyEventType_2;
          else {
            t4 = _this._dispatchKeyData;
            t4.toString;
            t5 = t3.$index(t2, physicalKey);
            t5.toString;
            t4.call$1(A.KeyData$(_null, t5, physicalKey, true, timeStamp, B.KeyEventType_1));
            t3.remove$1(t2, physicalKey);
            type = B.KeyEventType_0;
          }
        } else
          type = B.KeyEventType_0;
      } else {
        if (J.$index$asx(_this._pressingRecords, physicalKey) == null) {
          $event.preventDefault$0();
          return;
        }
        type = B.KeyEventType_1;
      }
      t2 = _this._pressingRecords;
      t3 = J.getInterceptor$asx(t2);
      lastLogicalRecord = t3.$index(t2, physicalKey);
      nextLogicalRecord = _null;
      switch (type.index) {
        case 0:
          nextLogicalRecord = logicalKey.call$0();
          break;
        case 1:
          break;
        case 2:
          nextLogicalRecord = lastLogicalRecord;
          break;
      }
      t4 = nextLogicalRecord == null;
      if (t4)
        t3.remove$1(t2, physicalKey);
      else
        t3.$indexSet(t2, physicalKey, nextLogicalRecord);
      J.forEach$1$ax($.$get$_kLogicalKeyToModifierGetter(), new A.KeyboardConverter__handleEvent_closure2(_this, logicalKey, $event, timeStamp));
      if (logicalKeyIsCharacter)
        if (!t4)
          _this._startGuardingKey$3(physicalKey, logicalKey.call$0(), timeStamp);
        else
          _this._stopGuardingKey$1(physicalKey);
      if (logicalKeyIsCharacter)
        character = t1;
      else
        character = _null;
      t1 = lastLogicalRecord == null ? logicalKey.call$0() : lastLogicalRecord;
      keyData = A.KeyData$(type === B.KeyEventType_1 ? _null : character, t1, physicalKey, false, timeStamp, type);
      if (_this._dispatchKeyData.call$1(keyData))
        $event.preventDefault$0();
    },
    handleEvent$1($event) {
      var _this = this, t1 = {};
      type$.FlutterHtmlKeyboardEvent._as($event);
      if ($event.get$key() == null || $event.get$code() == null)
        return;
      t1.sentAnyEvents = false;
      _this.set$_dispatchKeyData(new A.KeyboardConverter_handleEvent_closure(t1, _this));
      try {
        _this._handleEvent$1($event);
      } finally {
        if (!C.boolConversionCheck(t1.sentAnyEvents))
          _this._dispatchKeyData.call$1(B.KeyData_65R);
        _this.set$_dispatchKeyData(null);
      }
    },
    synthesizeModifiersIfNeeded$5(altPressed, controlPressed, metaPressed, shiftPressed, eventTimestamp) {
      var t1, t2, t3, _this = this;
      C._asBool(altPressed);
      C._asBool(controlPressed);
      C._asBool(metaPressed);
      C._asBool(shiftPressed);
      C._asNum(eventTimestamp);
      t1 = $.$get$_kPhysicalAltLeft();
      t2 = $.$get$_kPhysicalAltRight();
      t3 = $.$get$_kLogicalAltLeft();
      _this._synthesizeModifierIfNeeded$5(t1, t2, t3, altPressed ? B.KeyEventType_0 : B.KeyEventType_1, eventTimestamp);
      t1 = $.$get$kPhysicalControlLeft();
      t2 = $.$get$kPhysicalControlRight();
      t3 = $.$get$_kLogicalControlLeft();
      _this._synthesizeModifierIfNeeded$5(t1, t2, t3, controlPressed ? B.KeyEventType_0 : B.KeyEventType_1, eventTimestamp);
      t1 = $.$get$_kPhysicalMetaLeft();
      t2 = $.$get$_kPhysicalMetaRight();
      t3 = $.$get$_kLogicalMetaLeft();
      _this._synthesizeModifierIfNeeded$5(t1, t2, t3, metaPressed ? B.KeyEventType_0 : B.KeyEventType_1, eventTimestamp);
      t1 = $.$get$_kPhysicalShiftLeft();
      t2 = $.$get$_kPhysicalShiftRight();
      t3 = $.$get$_kLogicalShiftLeft();
      _this._synthesizeModifierIfNeeded$5(t1, t2, t3, shiftPressed ? B.KeyEventType_0 : B.KeyEventType_1, eventTimestamp);
    },
    _synthesizeModifierIfNeeded$5(physicalLeft, physicalRight, logicalLeft, type, domTimestamp) {
      var t1, leftPressed, rightPressed, alreadyPressed, synthesizeDown, synthesizeUp, t2, _this = this;
      C._asInt(physicalLeft);
      C._asInt(physicalRight);
      C._asInt(logicalLeft);
      type$.KeyEventType._as(type);
      C._asNum(domTimestamp);
      t1 = _this._pressingRecords;
      leftPressed = t1.containsKey$1(physicalLeft);
      rightPressed = t1.containsKey$1(physicalRight);
      alreadyPressed = leftPressed || rightPressed;
      synthesizeDown = type === B.KeyEventType_0 && !alreadyPressed;
      synthesizeUp = type === B.KeyEventType_1 && alreadyPressed;
      if (synthesizeDown)
        _this._synthesizeKeyDownEvent$3(domTimestamp, physicalLeft, logicalLeft);
      if (synthesizeUp && leftPressed) {
        t2 = J.$index$asx(t1, physicalLeft);
        t2.toString;
        _this._synthesizeKeyUpEvent$3(domTimestamp, physicalLeft, t2);
      }
      if (synthesizeUp && rightPressed) {
        t1 = J.$index$asx(t1, physicalRight);
        t1.toString;
        _this._synthesizeKeyUpEvent$3(domTimestamp, physicalRight, t1);
      }
    },
    _synthesizeKeyDownEvent$3(domTimestamp, physical, logical) {
      C._asNum(domTimestamp);
      C._asInt(physical);
      C._asInt(logical);
      this.performDispatchKeyData.call$1(A.KeyData$(null, logical, physical, true, A._eventTimeStampToDuration(domTimestamp), B.KeyEventType_0));
      J.$indexSet$ax(this._pressingRecords, physical, logical);
    },
    _synthesizeKeyUpEvent$3(domTimestamp, physical, logical) {
      C._asNum(domTimestamp);
      C._asInt(physical);
      this.performDispatchKeyData.call$1(A.KeyData$(null, C._asInt(logical), physical, true, A._eventTimeStampToDuration(domTimestamp), B.KeyEventType_1));
      J.remove$1$ax(this._pressingRecords, physical);
    },
    keyIsPressed$1(physical) {
      return this._pressingRecords.containsKey$1(C._asInt(physical));
    },
    set$_dispatchKeyData(_dispatchKeyData) {
      this._dispatchKeyData = type$.nullable_bool_Function_KeyData._as(_dispatchKeyData);
    },
    performDispatchKeyData$1(arg0) {
      return this.performDispatchKeyData.call$1(arg0);
    }
  };
  A.BrowserHistory.prototype = {
    get$_unsubscribe() {
      return this.__BrowserHistory__unsubscribe_A;
    },
    set$_unsubscribe(value) {
      this.set$__BrowserHistory__unsubscribe_A(type$.void_Function._as(value));
    },
    _setupStrategy$1(strategy) {
      this.set$_unsubscribe(type$.UrlStrategy._as(strategy).addPopStateListener$1(this.get$onPopState()));
    },
    dispose$0() {
      var _this = this;
      if (C.boolConversionCheck(_this._isDisposed) || _this.get$urlStrategy() == null)
        return;
      _this._isDisposed = true;
      _this._unsubscribe$0();
    },
    exit$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$exit$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self.get$urlStrategy() != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return C._asyncAwait($async$self.tearDown$0(), $async$exit$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return C._asyncAwait($async$self.get$urlStrategy().go$1(-1), $async$exit$0);
            case 5:
              // returning from await.
            case 3:
              // join
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$exit$0, $async$completer);
    },
    get$currentPath() {
      var t1 = this.get$urlStrategy();
      t1 = t1 == null ? null : t1.getPath$0();
      return t1 == null ? "/" : t1;
    },
    get$currentState() {
      var t1 = this.get$urlStrategy();
      return t1 == null ? null : t1.getState$0();
    },
    set$__BrowserHistory__unsubscribe_A(__BrowserHistory__unsubscribe_A) {
      this.__BrowserHistory__unsubscribe_A = type$.void_Function._as(__BrowserHistory__unsubscribe_A);
    },
    _unsubscribe$0() {
      return this.get$_unsubscribe().call$0();
    }
  };
  A.MultiEntriesBrowserHistory.prototype = {
    MultiEntriesBrowserHistory$1$urlStrategy(urlStrategy) {
      var _this = this,
        strategy = _this.urlStrategy;
      if (strategy == null)
        return;
      _this._setupStrategy$1(strategy);
      if (!C.boolConversionCheck(_this._hasSerialCount$1(_this.get$currentState())))
        strategy.replaceState$3(_this._tagWithSerialCount$2(_this.get$currentState(), 0), "flutter", _this.get$currentPath());
      _this.set$_lastSeenSerialCount(_this.get$_currentSerialCount());
    },
    get$_lastSeenSerialCount() {
      return this.__MultiEntriesBrowserHistory__lastSeenSerialCount_A;
    },
    set$_lastSeenSerialCount(value) {
      this.__MultiEntriesBrowserHistory__lastSeenSerialCount_A = C._asInt(value);
    },
    get$_currentSerialCount() {
      if (C.boolConversionCheck(this._hasSerialCount$1(this.get$currentState()))) {
        var t1 = this.get$currentState();
        t1.toString;
        return F.JSNumber_methods.toInt$0(C._asDouble(type$.Map_dynamic_dynamic._as(t1).$index(0, "serialCount")));
      }
      return 0;
    },
    _tagWithSerialCount$2(originialState, count) {
      var t1 = type$.dynamic;
      return C.LinkedHashMap_LinkedHashMap$_literal(["serialCount", F.JSInt_methods.toDouble$0(C._asInt(count)), "state", originialState], t1, t1);
    },
    _hasSerialCount$1(state) {
      return type$.Map_dynamic_dynamic._is(state) && state.$index(0, "serialCount") != null;
    },
    setRouteName$3$replace$state(routeName, replace, state) {
      var t1, t2, _this = this;
      C._asStringQ(routeName);
      C._asBool(replace);
      t1 = _this.urlStrategy;
      if (t1 != null)
        if (replace) {
          t2 = _this._tagWithSerialCount$2(state, _this.get$_lastSeenSerialCount());
          routeName.toString;
          t1.replaceState$3(t2, "flutter", routeName);
        } else {
          t2 = _this.get$_lastSeenSerialCount();
          if (typeof t2 !== "number")
            return t2.$add();
          _this.set$_lastSeenSerialCount(t2 + 1);
          t2 = _this._tagWithSerialCount$2(state, _this.get$_lastSeenSerialCount());
          routeName.toString;
          t1.pushState$3(t2, "flutter", routeName);
        }
    },
    setRouteName$1(routeName) {
      return this.setRouteName$3$replace$state(routeName, false, null);
    },
    onPopState$1(state) {
      var t1, t2, t3, t4, _this = this;
      if (!C.boolConversionCheck(_this._hasSerialCount$1(state))) {
        t1 = _this.urlStrategy;
        t1.toString;
        t2 = _this.get$_lastSeenSerialCount();
        if (typeof t2 !== "number")
          return t2.$add();
        t1.replaceState$3(_this._tagWithSerialCount$2(state, t2 + 1), "flutter", _this.get$currentPath());
      }
      _this.set$_lastSeenSerialCount(_this.get$_currentSerialCount());
      t1 = D.EnginePlatformDispatcher_instance();
      t2 = _this.get$currentPath();
      type$.nullable_Map_dynamic_dynamic._as(state);
      t3 = state == null ? null : state.$index(0, "state");
      t4 = type$.dynamic;
      t1.invokeOnPlatformMessage$3("flutter/navigation", E.C_JSONMethodCodec.encodeMethodCall$1(D.MethodCall$0("pushRouteInformation", C.LinkedHashMap_LinkedHashMap$_literal(["location", t2, "state", t3], t4, t4))), new A.MultiEntriesBrowserHistory_onPopState_closure());
    },
    tearDown$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, backCount, t1, t2;
      var $async$tearDown$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.dispose$0();
              if (C.boolConversionCheck($async$self._isTornDown) || $async$self.urlStrategy == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._isTornDown = true;
              backCount = $async$self.get$_currentSerialCount();
              $async$goto = backCount > 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return C._asyncAwait($async$self.urlStrategy.go$1(-backCount), $async$tearDown$0);
            case 5:
              // returning from await.
            case 4:
              // join
              t1 = $async$self.get$currentState();
              t1.toString;
              type$.Map_dynamic_dynamic._as(t1);
              t2 = $async$self.urlStrategy;
              t2.toString;
              t2.replaceState$3(t1.$index(0, "state"), "flutter", $async$self.get$currentPath());
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$tearDown$0, $async$completer);
    },
    get$urlStrategy() {
      return this.urlStrategy;
    }
  };
  A.SingleEntryBrowserHistory.prototype = {
    SingleEntryBrowserHistory$1$urlStrategy(urlStrategy) {
      var path, _this = this,
        strategy = _this.urlStrategy;
      if (strategy == null)
        return;
      _this._setupStrategy$1(strategy);
      path = _this.get$currentPath();
      if (!C.boolConversionCheck(A.SingleEntryBrowserHistory__isFlutterEntry(A.DomHistoryExtension_get_state(C.getProperty(self.window, "history", type$.JavaScriptObject))))) {
        _this._setupOriginEntry$1(strategy);
        _this._setupFlutterEntry$2$path(strategy, path);
      }
    },
    _wrapOriginState$1(state) {
      return C.LinkedHashMap_LinkedHashMap$_literal(["origin", true, "state", state], type$.String, type$.dynamic);
    },
    _unwrapOriginState$1(state) {
      state.toString;
      return type$.Map_dynamic_dynamic._as(state).$index(0, "state");
    },
    setRouteName$3$replace$state(routeName, replace, state) {
      var t1;
      C._asStringQ(routeName);
      C._asBool(replace);
      t1 = this.urlStrategy;
      if (t1 != null)
        this._setupFlutterEntry$3$path$replace(t1, routeName, true);
    },
    setRouteName$1(routeName) {
      return this.setRouteName$3$replace$state(routeName, false, null);
    },
    onPopState$1(state) {
      var t1, _this = this,
        _s18_ = "flutter/navigation";
      if (C.boolConversionCheck(A.SingleEntryBrowserHistory__isOriginEntry(state))) {
        t1 = _this.urlStrategy;
        t1.toString;
        _this._setupFlutterEntry$1(t1);
        D.EnginePlatformDispatcher_instance().invokeOnPlatformMessage$3(_s18_, E.C_JSONMethodCodec.encodeMethodCall$1(B.MethodCall_popRoute_null), new A.SingleEntryBrowserHistory_onPopState_closure());
      } else if (C.boolConversionCheck(A.SingleEntryBrowserHistory__isFlutterEntry(state))) {
        t1 = _this._userProvidedRouteName;
        t1.toString;
        _this._userProvidedRouteName = null;
        D.EnginePlatformDispatcher_instance().invokeOnPlatformMessage$3(_s18_, E.C_JSONMethodCodec.encodeMethodCall$1(D.MethodCall$0("pushRoute", t1)), new A.SingleEntryBrowserHistory_onPopState_closure0());
      } else {
        _this.set$_userProvidedRouteName(_this.get$currentPath());
        _this.urlStrategy.go$1(-1);
      }
    },
    _setupOriginEntry$1(strategy) {
      type$.UrlStrategy._as(strategy).replaceState$3(this._wrapOriginState$1(this.get$currentState()), "origin", "");
    },
    _setupFlutterEntry$3$path$replace(strategy, path, replace) {
      var t1;
      type$.UrlStrategy._as(strategy);
      C._asBool(replace);
      C._asStringQ(path);
      if (path == null)
        path = this.get$currentPath();
      t1 = this._flutterState;
      if (replace)
        strategy.replaceState$3(t1, "flutter", path);
      else
        strategy.pushState$3(t1, "flutter", path);
    },
    _setupFlutterEntry$2$path(strategy, path) {
      return this._setupFlutterEntry$3$path$replace(strategy, path, false);
    },
    _setupFlutterEntry$1(strategy) {
      return this._setupFlutterEntry$3$path$replace(strategy, null, false);
    },
    tearDown$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$tearDown$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.dispose$0();
              if (C.boolConversionCheck($async$self._isTornDown) || $async$self.urlStrategy == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._isTornDown = true;
              t1 = $async$self.urlStrategy;
              $async$goto = 3;
              return C._asyncAwait(t1.go$1(-1), $async$tearDown$0);
            case 3:
              // returning from await.
              t1.replaceState$3($async$self._unwrapOriginState$1($async$self.get$currentState()), "flutter", $async$self.get$currentPath());
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$tearDown$0, $async$completer);
    },
    set$_userProvidedRouteName(_userProvidedRouteName) {
      this._userProvidedRouteName = C._asStringQ(_userProvidedRouteName);
    },
    get$urlStrategy() {
      return this.urlStrategy;
    }
  };
  A.RawKeyboard.prototype = {
    RawKeyboard$_$1(_onMacOs) {
      D.registerHotRestartListener(new A.RawKeyboard$__closure(this));
    },
    dispose$0() {
      var t1, t2, t3;
      for (t1 = this._keydownTimers, t2 = J.get$iterator$ax(t1.get$keys()), t3 = J.getInterceptor$asx(t1); C.boolConversionCheck(t2.moveNext$0());)
        t3.$index(t1, t2.get$current()).cancel$0();
      t3.clear$0(t1);
      $.RawKeyboard__instance = null;
    },
    _shouldDoKeyGuard$0() {
      return this._onMacOs;
    },
    _shouldIgnore$1($event) {
      type$.FlutterHtmlKeyboardEvent._as($event);
      return C.boolConversionCheck(J.$eq$($event.get$type(), "keydown")) && C.boolConversionCheck(J.$eq$($event.get$key(), "Tab")) && C.boolConversionCheck($event.get$isComposing());
    },
    handleHtmlEvent$1(domEvent) {
      var $event, t1, t2, t3, t4, eventData, _this = this;
      type$.JavaScriptObject._as(domEvent);
      if (!C.boolConversionCheck(D.domInstanceOfString(domEvent, "KeyboardEvent")))
        return;
      $event = A.FlutterHtmlKeyboardEvent$(domEvent);
      t1 = $event.get$code();
      t1.toString;
      if (C.boolConversionCheck(_this._shouldIgnore$1($event)))
        return;
      if (!C.boolConversionCheck(A._isModifierKey($event)) && C.boolConversionCheck(_this._shouldDoKeyGuard$0())) {
        t2 = _this._keydownTimers;
        t3 = J.getInterceptor$asx(t2);
        t4 = t3.$index(t2, t1);
        if (t4 != null)
          t4.cancel$0();
        if (C.boolConversionCheck(J.$eq$($event.get$type(), "keydown")) && C.boolConversionCheck(A._isAffectedByModifiers($event)))
          t3.$indexSet(t2, t1, D.Timer_Timer(E.Duration_2000000, new A.RawKeyboard_handleHtmlEvent_closure(_this, t1, $event)));
        else
          t3.remove$1(t2, t1);
      }
      _this.set$_lastMetaState(A._getMetaState($event));
      if (C.boolConversionCheck(J.$eq$($event.get$type(), "keydown")))
        if (C.boolConversionCheck(J.$eq$($event.get$key(), "CapsLock"))) {
          t1 = _this._lastMetaState;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._lastMetaState = (t1 | 32) >>> 0;
        } else if (C.boolConversionCheck(J.$eq$($event.get$code(), "NumLock"))) {
          t1 = _this._lastMetaState;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._lastMetaState = (t1 | 16) >>> 0;
        } else if (C.boolConversionCheck(J.$eq$($event.get$key(), "ScrollLock"))) {
          t1 = _this._lastMetaState;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._lastMetaState = (t1 | 64) >>> 0;
        } else if (C.boolConversionCheck(J.$eq$($event.get$key(), "Meta")) && C.boolConversionCheck(J.$eq$($.$get$browser().get$operatingSystem(), E.OperatingSystem_2))) {
          t1 = _this._lastMetaState;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._lastMetaState = (t1 | 8) >>> 0;
        } else if (C.boolConversionCheck(J.$eq$($event.get$code(), "MetaLeft")) && C.boolConversionCheck(J.$eq$($event.get$key(), "Process"))) {
          t1 = _this._lastMetaState;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._lastMetaState = (t1 | 8) >>> 0;
        }
      eventData = C.LinkedHashMap_LinkedHashMap$_literal(["type", $event.get$type(), "keymap", "web", "code", $event.get$code(), "key", $event.get$key(), "location", $event.get$location(), "metaState", _this._lastMetaState, "keyCode", $event.get$keyCode()], type$.String, type$.dynamic);
      D.EnginePlatformDispatcher_instance().invokeOnPlatformMessage$3("flutter/keyevent", E.C_JSONMessageCodec.encodeMessage$1(eventData), new A.RawKeyboard_handleHtmlEvent_closure0($event));
    },
    _synthesizeKeyup$1($event) {
      var eventData;
      type$.FlutterHtmlKeyboardEvent._as($event);
      eventData = C.LinkedHashMap_LinkedHashMap$_literal(["type", "keyup", "keymap", "web", "code", $event.get$code(), "key", $event.get$key(), "location", $event.get$location(), "metaState", this._lastMetaState, "keyCode", $event.get$keyCode()], type$.String, type$.dynamic);
      D.EnginePlatformDispatcher_instance().invokeOnPlatformMessage$3("flutter/keyevent", E.C_JSONMessageCodec.encodeMessage$1(eventData), A._engine___noopCallback$closure());
    },
    set$_lastMetaState(_lastMetaState) {
      this._lastMetaState = C._asInt(_lastMetaState);
    }
  };
  A.SemanticsUpdate.prototype = {$isSemanticsUpdate0: 1};
  A.SemanticsNodeUpdate.prototype = {};
  A.TestHistoryEntry.prototype = {
    toString$0(_) {
      var _this = this;
      return C.S(_this.get$runtimeType(0)) + "(state:" + C.S(_this.state) + ', title:"' + C.S(_this.title) + '", url:"' + C.S(_this.url) + '")';
    }
  };
  A.TestUrlStrategy.prototype = {
    getPath$0() {
      return this.get$currentEntry().url;
    },
    getState$0() {
      return this.get$currentEntry().state;
    },
    get$currentEntry() {
      return J.$index$asx(this.history, this._currentEntryIndex);
    },
    set$currentEntry(entry) {
      type$.TestHistoryEntry._as(entry);
      J.$indexSet$ax(this.history, this._currentEntryIndex, entry);
    },
    get$withinAppHistory() {
      var t1 = this._currentEntryIndex;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    pushState$3(state, title, url) {
      var t1, t2, _this = this;
      C._asString(title);
      C._asString(url);
      t1 = _this._currentEntryIndex;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_currentEntryIndex(t1 + 1);
      t1 = _this.history;
      t2 = J.getInterceptor$asx(t1);
      t2.removeRange$2(t1, _this._currentEntryIndex, t2.get$length(t1));
      t2.add$1(t1, A.TestHistoryEntry$(state, title, url));
    },
    replaceState$3(state, title, url) {
      C._asString(title);
      C._asStringQ(url);
      this.set$currentEntry(A.TestHistoryEntry$(state, title, url == null || url === "" ? this.get$currentEntry().url : url));
    },
    go$1(count) {
      return this._nextEventLoop$1(new A.TestUrlStrategy_go_closure(this, C._asInt(count)));
    },
    addPopStateListener$1(fn) {
      type$.void_Function_nullable_Object._as(fn);
      J.add$1$ax(this.listeners, fn);
      return new A.TestUrlStrategy_addPopStateListener_closure(this, fn);
    },
    _nextEventLoop$1(callback) {
      var t1;
      type$.void_Function._as(callback);
      t1 = type$.void;
      return D.Future_Future$delayed(F.Duration_0, null, t1).then$1$1(new A.TestUrlStrategy__nextEventLoop_closure(callback), t1);
    },
    _firePopStateEvent$0() {
      var t3,
        t1 = this.listeners,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return C.iae(t3);
        if (!(i < t3))
          break;
        t2.$index(t1, i).call$1(this.get$currentEntry().state);
        ++i;
      }
    },
    toString$0(_) {
      var t3, entry,
        lines = C._setArrayType([], type$.JSArray_String),
        t1 = this.history,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return C.iae(t3);
        if (!(i < t3))
          break;
        entry = t2.$index(t1, i);
        F.JSArray_methods.add$1(lines, C.boolConversionCheck(J.$eq$(this._currentEntryIndex, i)) ? "* " + C.S(entry) : "  " + C.S(entry));
        ++i;
      }
      return C.S(this.get$runtimeType(0)) + ": [\n" + C.S(F.JSArray_methods.join$1(lines, "\n")) + "\n]";
    },
    set$_currentEntryIndex(_currentEntryIndex) {
      this._currentEntryIndex = C._asInt(_currentEntryIndex);
    },
    $isUrlStrategy: 1
  };
  A.EngineFlutterWindow.prototype = {
    EngineFlutterWindow$_$2(platformDispatcher, hostElement) {
    },
    dispose$0() {
      this.super$EngineFlutterView$dispose();
      var t1 = this._browserHistory;
      if (t1 != null)
        t1.dispose$0();
    },
    get$browserHistory() {
      var t1 = this._browserHistory;
      if (t1 == null) {
        t1 = A.createHistoryForExistingState(this.get$_urlStrategyForInitialization());
        this.set$_browserHistory(t1);
      }
      return t1;
    },
    get$_urlStrategyForInitialization() {
      A.preventCustomUrlStrategy();
      return A.urlStrategy();
    },
    _useSingleEntryBrowserHistory$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, strategy;
      var $async$_useSingleEntryBrowserHistory$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._browserHistory == null)
                $async$self.set$_browserHistory(A.createHistoryForExistingState($async$self.get$_urlStrategyForInitialization()));
              t1 = $async$self._browserHistory;
              if (t1 instanceof A.SingleEntryBrowserHistory) {
                // goto return
                $async$goto = 1;
                break;
              }
              strategy = t1 == null ? null : t1.get$urlStrategy();
              t1 = $async$self._browserHistory;
              t1 = t1 == null ? null : t1.tearDown$0();
              $async$goto = 3;
              return C._asyncAwait(D._wrapAwaitedExpression(t1, type$.void), $async$_useSingleEntryBrowserHistory$0);
            case 3:
              // returning from await.
              $async$self._browserHistory = A.SingleEntryBrowserHistory$(strategy);
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_useSingleEntryBrowserHistory$0, $async$completer);
    },
    _useMultiEntryBrowserHistory$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, strategy;
      var $async$_useMultiEntryBrowserHistory$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._browserHistory == null)
                $async$self.set$_browserHistory(A.createHistoryForExistingState($async$self.get$_urlStrategyForInitialization()));
              t1 = $async$self._browserHistory;
              if (t1 instanceof A.MultiEntriesBrowserHistory) {
                // goto return
                $async$goto = 1;
                break;
              }
              strategy = t1 == null ? null : t1.get$urlStrategy();
              t1 = $async$self._browserHistory;
              t1 = t1 == null ? null : t1.tearDown$0();
              $async$goto = 3;
              return C._asyncAwait(D._wrapAwaitedExpression(t1, type$.void), $async$_useMultiEntryBrowserHistory$0);
            case 3:
              // returning from await.
              $async$self._browserHistory = A.MultiEntriesBrowserHistory$(strategy);
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_useMultiEntryBrowserHistory$0, $async$completer);
    },
    _waitInTheLine$1(callback) {
      return this._waitInTheLine$body$EngineFlutterWindow(type$.Future_bool_Function._as(callback));
    },
    _waitInTheLine$body$EngineFlutterWindow(callback) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, currentPosition, completer;
      var $async$_waitInTheLine$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              currentPosition = $async$self._endOfTheLine;
              completer = C.Completer_Completer(type$.void);
              $async$self.set$_endOfTheLine(completer.get$future());
              $async$goto = 3;
              return C._asyncAwait(currentPosition, $async$_waitInTheLine$1);
            case 3:
              // returning from await.
              result = false;
              $async$handler = 4;
              $async$goto = 7;
              return C._asyncAwait(callback.call$0(), $async$_waitInTheLine$1);
            case 7:
              // returning from await.
              result = $async$result;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              completer.complete$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return C._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return C._asyncStartSync($async$_waitInTheLine$1, $async$completer);
    },
    handleNavigationMessage$1(data) {
      return this.handleNavigationMessage$body$EngineFlutterWindow(type$.nullable_ByteData._as(data));
    },
    handleNavigationMessage$body$EngineFlutterWindow(data) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$handleNavigationMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._waitInTheLine$1(new A.EngineFlutterWindow_handleNavigationMessage_closure($async$self, data));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handleNavigationMessage$1, $async$completer);
    },
    set$_browserHistory(_browserHistory) {
      this._browserHistory = type$.nullable_BrowserHistory._as(_browserHistory);
    },
    set$_endOfTheLine(_endOfTheLine) {
      this._endOfTheLine = type$.Future_void._as(_endOfTheLine);
    },
    $isSingletonFlutterWindow: 1
  };
  A._StringStream.prototype = {
    readIntAsVerbatim$0() {
      var _this = this,
        result = J.codeUnitAt$1$s(_this._data, _this.__web_locale_keymap$_offset),
        t1 = _this.__web_locale_keymap$_offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__web_locale_keymap$_offset(t1 + 1);
      t1 = $.$get$_kMarshallIntBase();
      if (typeof t1 !== "number")
        return C.iae(t1);
      return result - t1;
    },
    readIntAsChar$0() {
      var _this = this,
        result = J.codeUnitAt$1$s(_this._data, _this.__web_locale_keymap$_offset),
        t1 = _this.__web_locale_keymap$_offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__web_locale_keymap$_offset(t1 + 1);
      return result;
    },
    readEventKey$0() {
      var char = C.String_String$fromCharCode(this.readIntAsChar$0());
      if (char === $.$get$_kUseDead())
        return "Dead";
      else
        return char;
    },
    readEventCode$0() {
      var _this = this,
        charCode = J.codeUnitAt$1$s(_this._data, _this.__web_locale_keymap$_offset),
        t1 = _this.__web_locale_keymap$_offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__web_locale_keymap$_offset(t1 + 1);
      t1 = J.$index$asx(_this._goalToEventCode, charCode);
      t1.toString;
      return t1;
    },
    set$__web_locale_keymap$_offset(_offset) {
      this.__web_locale_keymap$_offset = C._asInt(_offset);
    }
  };
  A.LocaleKeymap.prototype = {
    getLogicalKey$3(eventCode, eventKey, eventKeyCode) {
      var t1, result, t2, heuristicResult, characterLogicalKey;
      C._asStringQ(eventCode);
      C._asStringQ(eventKey);
      C._asInt(eventKeyCode);
      t1 = J.$index$asx(this.__web_locale_keymap$_mapping, eventCode);
      result = t1 == null ? null : J.$index$asx(t1, eventKey);
      if (result === 255)
        return eventKeyCode;
      if (result == null) {
        t1 = eventCode == null;
        if (C.boolConversionCheck(F.JSString_methods.get$isEmpty(t1 ? "" : eventCode)))
          t2 = C.boolConversionCheck(F.JSString_methods.get$isEmpty(eventKey == null ? "" : eventKey));
        else
          t2 = false;
        if (t2)
          return null;
        t1 = t1 ? "" : eventCode;
        heuristicResult = A.heuristicMapper(t1, eventKey == null ? "" : eventKey);
        if (heuristicResult != null)
          return heuristicResult;
        characterLogicalKey = A._characterToLogicalKey(eventKey);
        if (characterLogicalKey != null)
          return characterLogicalKey;
      }
      return result;
    }
  };
  A.EmbeddedTestFont.prototype = {};
  A._StreamController.prototype = {
    get$stream() {
      return D._ControllerStream$(this, C._instanceType(this)._precomputed1);
    },
    get$_isCanceled() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasListener() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$_isInitialState() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 3) === 0;
    },
    get$isClosed() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_isAddingStream() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 8) !== 0;
    },
    get$_mayAddEvent() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 4;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if (!C.boolConversionCheck(_this.get$_isAddingStream()))
        return C._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = C._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData());
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if (!C.boolConversionCheck(_this.get$_isAddingStream())) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = D._PendingEvents$(C._instanceType(_this)._precomputed1);
        return C._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = C._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.get$_varData();
      if (events == null) {
        events = D._PendingEvents$(t1._precomputed1);
        state.set$_varData(events);
      }
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if (C.boolConversionCheck(this.get$_isAddingStream()))
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).get$_varData();
      return C._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if (C.boolConversionCheck(this.get$isClosed()))
        return C.StateError$("Cannot add event after closing");
      return C.StateError$("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = C.boolConversionCheck(this.get$_isCanceled()) ? $.$get$Future__nullFuture() : C._Future$(type$.void);
        this.set$_doneFuture(t1);
      }
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      C._instanceType(_this)._precomputed1._as(value);
      if (!C.boolConversionCheck(_this.get$_mayAddEvent()))
        throw C.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    close$0() {
      var _this = this;
      if (C.boolConversionCheck(_this.get$isClosed()))
        return _this._ensureDoneFuture$0();
      if (!C.boolConversionCheck(_this.get$_mayAddEvent()))
        throw C.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 4) >>> 0;
      if (C.boolConversionCheck(_this.get$hasListener()))
        _this._sendDone$0();
      else if (C.boolConversionCheck(_this.get$_isInitialState()))
        J.add$1$ax(_this._ensurePendingEvents$0(), E.C__DelayedDone);
    },
    _async$_add$1(value) {
      var _this = this,
        t1 = C._instanceType(_this)._precomputed1;
      t1._as(value);
      if (C.boolConversionCheck(_this.get$hasListener()))
        _this._sendData$1(value);
      else if (C.boolConversionCheck(_this.get$_isInitialState()))
        J.add$1$ax(_this._ensurePendingEvents$0(), D._DelayedData$(value, t1));
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = C._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      C._asBool(cancelOnError);
      if (!C.boolConversionCheck(_this.get$_isInitialState()))
        throw C.wrapException(C.StateError$("Stream has already been listened to."));
      subscription = D._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$or();
      _this._state = (t2 | 1) >>> 0;
      if (C.boolConversionCheck(_this.get$_isAddingStream())) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.set$_varData(subscription);
        addState.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = C._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if (C.boolConversionCheck(_this.get$_isAddingStream()))
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967286 | 2) >>> 0;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = C.unwrapException(exception);
            s = C.getTraceFromException(exception);
            result0 = C._Future$(type$.void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = C._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if (C.boolConversionCheck(_this.get$_isAddingStream()))
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).pause$0();
      D._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = C._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if (C.boolConversionCheck(_this.get$_isAddingStream()))
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).resume$0();
      D._runGuarded(_this.onResume);
    },
    set$_doneFuture(_doneFuture) {
      this._doneFuture = type$.nullable__Future_void._as(_doneFuture);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = this.$ti._precomputed1;
      t1._as(data);
      this.get$_subscription()._addPending$1(D._DelayedData$(data, t1));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(E.C__DelayedDone);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_StreamController: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._AsyncStreamController.prototype = {$is_AsyncStreamControllerDispatch: 1};
  A._SimpleCallbackSink.prototype = {
    add$1(_, chunk) {
      J.add$1$ax(this._accumulated, this.$ti._precomputed1._as(chunk));
    },
    close$0() {
      this._convert$_callback.call$1(this._accumulated);
    },
    $isChunkedConversionSink: 1,
    $isSink: 1
  };
  A._FakeUserTag.prototype = {
    makeCurrent$0() {
      var old = $.$get$_currentTag();
      $._currentTag = this;
      return old;
    },
    $isUserTag: 1
  };
  A.ServiceExtensionResponse.prototype = {
    ServiceExtensionResponse$result$1(result) {
      C.checkNotNullable(result, "result", type$.String);
    },
    ServiceExtensionResponse$error$2(errorCode, errorDetail) {
      A.ServiceExtensionResponse__validateErrorCode(errorCode);
      C.checkNotNullable(errorDetail, "errorDetail", type$.String);
    }
  };
  A.KeyEventType.prototype = {
    _enumToString$0() {
      return "KeyEventType." + C.S(this._core$_name);
    },
    get$label() {
      switch (this.index) {
        case 0:
          var t1 = "Key Down";
          break;
        case 1:
          t1 = "Key Up";
          break;
        case 2:
          t1 = "Key Repeat";
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A.KeyEventDeviceType.prototype = {
    _enumToString$0() {
      return "KeyEventDeviceType." + C.S(this._core$_name);
    }
  };
  A.KeyData.prototype = {
    _logicalToString$0() {
      var t1 = this.logical,
        t2 = C.S(J.toRadixString$1$n(t1, 16));
      if (typeof t1 !== "number")
        return t1.$div();
      return "0x" + t2 + new A.KeyData__logicalToString_closure(F.JSNumber_methods.floor$0(t1 / 4294967296)).call$0();
    },
    _escapeCharacter$0() {
      var t1 = this.character;
      if (t1 == null)
        return "<none>";
      switch (t1) {
        case "\n":
          return '"\\n"';
        case "\t":
          return '"\\t"';
        case "\r":
          return '"\\r"';
        case "\b":
          return '"\\b"';
        case "\f":
          return '"\\f"';
        default:
          return '"' + C.S(t1) + '"';
      }
    },
    _quotedCharCode$0() {
      var t1 = this.character;
      if (t1 == null)
        return "";
      return " (0x" + C.S(J.join$1$ax(J.map$1$1$ax(J.get$codeUnits$s(t1), new A.KeyData__quotedCharCode_closure(), type$.String), " ")) + ")";
    },
    toString$0(_) {
      var _this = this,
        t1 = C.S(_this.type.get$label()),
        t2 = C.S(J.toRadixString$1$n(_this.physical, 16)),
        t3 = C.S(_this._logicalToString$0()),
        t4 = C.S(_this._escapeCharacter$0()),
        t5 = C.S(_this._quotedCharCode$0()),
        t6 = C.boolConversionCheck(_this.synthesized) ? ", synthesized" : "";
      return "KeyData(" + t1 + ", physical: 0x" + t2 + ", logical: " + t3 + ", character: " + t4 + t5 + t6 + ")";
    }
  };
  A.SemanticsUpdateBuilder.prototype = {
    updateNode$34$actions$additionalActions$childrenInHitTestOrder$childrenInTraversalOrder$currentValueLength$decreasedValue$decreasedValueAttributes$elevation$flags$headingLevel$hint$hintAttributes$id$identifier$increasedValue$increasedValueAttributes$label$labelAttributes$maxValueLength$platformViewId$rect$scrollChildren$scrollExtentMax$scrollExtentMin$scrollIndex$scrollPosition$textDirection$textSelectionBase$textSelectionExtent$thickness$tooltip$transform$value$valueAttributes(actions, additionalActions, childrenInHitTestOrder, childrenInTraversalOrder, currentValueLength, decreasedValue, decreasedValueAttributes, elevation, flags, headingLevel, hint, hintAttributes, id, identifier, increasedValue, increasedValueAttributes, label, labelAttributes, maxValueLength, platformViewId, rect, scrollChildren, scrollExtentMax, scrollExtentMin, scrollIndex, scrollPosition, textDirection, textSelectionBase, textSelectionExtent, thickness, tooltip, transform, value, valueAttributes) {
      var t1;
      C._asInt(id);
      C._asInt(flags);
      C._asInt(actions);
      C._asInt(maxValueLength);
      C._asInt(currentValueLength);
      C._asInt(textSelectionBase);
      C._asInt(textSelectionExtent);
      C._asInt(platformViewId);
      C._asInt(scrollChildren);
      C._asInt(scrollIndex);
      C._asDouble(scrollPosition);
      C._asDouble(scrollExtentMax);
      C._asDouble(scrollExtentMin);
      C._asDouble(elevation);
      C._asDouble(thickness);
      type$.Rect._as(rect);
      C._asString(identifier);
      C._asString(label);
      t1 = type$.List_StringAttribute;
      t1._as(labelAttributes);
      C._asString(value);
      t1._as(valueAttributes);
      C._asString(increasedValue);
      t1._as(increasedValueAttributes);
      C._asString(decreasedValue);
      t1._as(decreasedValueAttributes);
      C._asString(hint);
      t1._as(hintAttributes);
      C._asStringQ(tooltip);
      type$.nullable_TextDirection._as(textDirection);
      type$.Float64List._as(transform);
      t1 = type$.Int32List;
      t1._as(childrenInTraversalOrder);
      t1._as(childrenInHitTestOrder);
      t1._as(additionalActions);
      C._asInt(headingLevel);
      if (transform.length !== 16)
        throw C.wrapException(C.ArgumentError$("transform argument must have 16 entries.", null));
      J.add$1$ax(this._ui$_nodeUpdates, A.SemanticsNodeUpdate$(actions, additionalActions, childrenInHitTestOrder, childrenInTraversalOrder, currentValueLength, decreasedValue, decreasedValueAttributes, elevation, flags, headingLevel, hint, hintAttributes, id, identifier, increasedValue, increasedValueAttributes, label, labelAttributes, maxValueLength, platformViewId, rect, scrollChildren, scrollExtentMax, scrollExtentMin, scrollIndex, scrollPosition, textDirection, textSelectionBase, textSelectionExtent, thickness, tooltip, D.toMatrix32(transform), value, valueAttributes));
    },
    updateCustomAction$4$hint$id$label$overrideId(hint, id, label, overrideId) {
      C._asInt(id);
      C._asStringQ(label);
      C._asStringQ(hint);
      C._asInt(overrideId);
    },
    build$0() {
      return A.SemanticsUpdate$(this._ui$_nodeUpdates);
    }
  };
  A.AssetManager.prototype = {
    get$_baseUrl() {
      var t1 = this._assetBase;
      if (t1 == null) {
        t1 = this.get$_deprecatedAssetBase();
        if (t1 == null)
          t1 = "";
        this.set$_assetBase(t1);
      }
      return t1;
    },
    get$_deprecatedAssetBase() {
      var t1 = type$.JavaScriptObject,
        meta = D.DomDocumentExtension_querySelector(C.getProperty(self.window, "document", t1), "meta[name=assetBase]"),
        fallbackBaseUrl = meta == null ? null : A.DomHTMLMetaElementExtension_get_content(meta);
      if (fallbackBaseUrl != null)
        D.DomConsoleExtension_warn(C.getProperty(self.window, "console", t1), "The `assetBase` meta tag is now deprecated.\nUse engineInitializer.initializeEngine(config) instead.\nSee: https://docs.flutter.dev/development/platform-integration/web/initialization");
      return fallbackBaseUrl;
    },
    getAssetUrl$1(asset) {
      C._asString(asset);
      if (C.boolConversionCheck(D.Uri_parse(asset).get$hasScheme()))
        return D.Uri_encodeFull(asset);
      return D.Uri_encodeFull(C.S(this.get$_baseUrl()) + "assets/" + asset);
    },
    loadAsset$1(asset) {
      return D.httpFetch(this.getAssetUrl$1(C._asString(asset)));
    },
    set$_assetBase(_assetBase) {
      this._assetBase = C._asStringQ(_assetBase);
    }
  };
  A.BrowserPlatformLocation.prototype = {
    get$_location() {
      return C.getProperty(self.window, "location", type$.JavaScriptObject);
    },
    get$_history() {
      return C.getProperty(self.window, "history", type$.JavaScriptObject);
    },
    getOrCreateDomEventListener$1(fn) {
      type$.dynamic_Function_Object._as(fn);
      return $._popStateListenersCache.putIfAbsent$2(fn, new A.BrowserPlatformLocation_getOrCreateDomEventListener_closure(fn));
    },
    addPopStateListener$1(fn) {
      type$.dynamic_Function_Object._as(fn);
      D.DomEventTargetExtension_addEventListener(self.window, "popstate", this.getOrCreateDomEventListener$1(fn), null);
    },
    removePopStateListener$1(fn) {
      type$.dynamic_Function_Object._as(fn);
      D.DomEventTargetExtension_removeEventListener(self.window, "popstate", this.getOrCreateDomEventListener$1(fn), null);
      J.remove$1$ax($._popStateListenersCache, fn);
    },
    get$pathname() {
      var t1 = A.DomLocationExtension_get_pathname(this.get$_location());
      t1.toString;
      return t1;
    },
    get$search() {
      var t1 = A.DomLocationExtension_get_search(this.get$_location());
      t1.toString;
      return t1;
    },
    get$hash() {
      return A.DomLocationExtension_get_locationHash(this.get$_location());
    },
    get$state() {
      return A.DomHistoryExtension_get_state(this.get$_history());
    },
    pushState$3(state, title, url) {
      C._asString(title);
      C._asString(url);
      A.DomHistoryExtension_pushState(this.get$_history(), state, title, url);
    },
    replaceState$3(state, title, url) {
      C._asString(title);
      C._asString(url);
      A.DomHistoryExtension_replaceState(this.get$_history(), state, title, url);
    },
    go$1(count) {
      C._asInt(count);
      A.DomHistoryExtension_go(this.get$_history(), count);
    },
    $isPlatformLocation: 1
  };
  A.HashUrlStrategy.prototype = {
    addPopStateListener$1(fn) {
      var t1 = new A.HashUrlStrategy_addPopStateListener_wrappedFn(type$.void_Function_nullable_Object._as(fn));
      B.C_BrowserPlatformLocation.addPopStateListener$1(t1);
      return new A.HashUrlStrategy_addPopStateListener_closure(this, t1);
    },
    getPath$0() {
      var path = B.C_BrowserPlatformLocation.get$hash();
      if (path == null)
        path = "";
      if (C.boolConversionCheck(F.JSString_methods.get$isEmpty(path)) || path === "#")
        return "/";
      return F.JSString_methods.substring$1(path, 1);
    },
    getState$0() {
      return B.C_BrowserPlatformLocation.get$state();
    },
    prepareExternalUrl$1(internalUrl) {
      var hash;
      C._asString(internalUrl);
      hash = C.boolConversionCheck(F.JSString_methods.get$isEmpty(internalUrl)) || internalUrl === "/" ? "" : "#" + internalUrl;
      return C.S(B.C_BrowserPlatformLocation.get$pathname()) + C.S(B.C_BrowserPlatformLocation.get$search()) + hash;
    },
    pushState$3(state, title, url) {
      B.C_BrowserPlatformLocation.pushState$3(state, C._asString(title), this.prepareExternalUrl$1(C._asString(url)));
    },
    replaceState$3(state, title, url) {
      B.C_BrowserPlatformLocation.replaceState$3(state, C._asString(title), this.prepareExternalUrl$1(C._asString(url)));
    },
    go$1(count) {
      B.C_BrowserPlatformLocation.go$1(C._asInt(count));
      return this._waitForPopState$0();
    },
    _waitForPopState$0() {
      var completer = C.Completer_Completer(type$.void),
        unsubscribe = C._Cell$named("unsubscribe");
      unsubscribe.set$value(this.addPopStateListener$1(new A.HashUrlStrategy__waitForPopState_closure(unsubscribe, completer)));
      return completer.get$future();
    },
    $isUrlStrategy: 1
  };
  A.HeapPriorityQueue.prototype = {
    _elementAt$1(index) {
      var t1 = J.$index$asx(this._priority_queue$_queue, C._asInt(index));
      if (t1 == null) {
        this.$ti._precomputed1._as(null);
        t1 = null;
      }
      return t1;
    },
    get$first(_) {
      if (C.boolConversionCheck(J.$eq$(this._priority_queue$_length, 0)))
        throw C.wrapException(C.StateError$("No element"));
      return this._elementAt$1(0);
    },
    get$isEmpty(_) {
      return J.$eq$(this._priority_queue$_length, 0);
    },
    get$isNotEmpty(_) {
      return !C.boolConversionCheck(J.$eq$(this._priority_queue$_length, 0));
    },
    get$length(_) {
      return this._priority_queue$_length;
    },
    removeFirst$0() {
      var t1, result, last, _this = this;
      if (C.boolConversionCheck(J.$eq$(_this._priority_queue$_length, 0)))
        throw C.wrapException(C.StateError$("No element"));
      t1 = _this._priority_queue$_modificationCount;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_priority_queue$_modificationCount(t1 + 1);
      result = _this._elementAt$1(0);
      last = _this._removeLast$0();
      t1 = _this._priority_queue$_length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        _this._bubbleDown$2(last, 0);
      return result;
    },
    toString$0(_) {
      return J.toString$0$(J.take$1$ax(this._priority_queue$_queue, this._priority_queue$_length));
    },
    _removeLast$0() {
      var newLength, last, _this = this,
        t1 = _this._priority_queue$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      newLength = t1 - 1;
      last = _this._elementAt$1(newLength);
      J.$indexSet$ax(_this._priority_queue$_queue, newLength, null);
      _this._priority_queue$_length = newLength;
      return last;
    },
    _bubbleDown$2(element, index) {
      var rightChildIndex, t1, t2, t3, t4, leftChildIndex, leftChild, rightChild, minChild, minChildIndex, child, _this = this;
      _this.$ti._precomputed1._as(element);
      C._asInt(index);
      rightChildIndex = index * 2 + 2;
      t1 = _this._priority_queue$_queue;
      t2 = J.getInterceptor$ax(t1);
      t3 = _this.comparison;
      while (true) {
        t4 = _this._priority_queue$_length;
        if (typeof t4 !== "number")
          return C.iae(t4);
        if (!(rightChildIndex < t4))
          break;
        leftChildIndex = rightChildIndex - 1;
        leftChild = _this._elementAt$1(leftChildIndex);
        rightChild = _this._elementAt$1(rightChildIndex);
        if (t3.call$2(leftChild, rightChild) < 0) {
          minChild = leftChild;
          minChildIndex = leftChildIndex;
        } else {
          minChild = rightChild;
          minChildIndex = rightChildIndex;
        }
        if (t3.call$2(element, minChild) <= 0) {
          t2.$indexSet(t1, index, element);
          return;
        }
        t2.$indexSet(t1, index, minChild);
        rightChildIndex = minChildIndex * 2 + 2;
        index = minChildIndex;
      }
      leftChildIndex = rightChildIndex - 1;
      if (leftChildIndex < t4) {
        child = _this._elementAt$1(leftChildIndex);
        if (t3.call$2(element, child) > 0) {
          t2.$indexSet(t1, index, child);
          index = leftChildIndex;
        }
      }
      t2.$indexSet(t1, index, element);
    },
    set$_priority_queue$_modificationCount(_modificationCount) {
      this._priority_queue$_modificationCount = C._asInt(_modificationCount);
    },
    $isPriorityQueue: 1
  };
  A.BindingBase.prototype = {
    BindingBase$0() {
      D.FlutterTimeline_startSync("Framework initialization", null);
      this.initInstances$0();
      this.initServiceExtensions$0();
      var t1 = type$.String;
      D.postEvent("Flutter.FrameworkInitialization", C.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
      D.FlutterTimeline_finishSync();
    },
    get$platformDispatcher() {
      return A.PlatformDispatcher_instance();
    },
    initInstances$0() {
    },
    initServiceExtensions$0() {
      this.registerStringServiceExtension$3$getter$name$setter(new A.BindingBase_initServiceExtensions_closure(), C.EnumName_get_name(B.FoundationServiceExtensions_2), new A.BindingBase_initServiceExtensions_closure0());
      this.registerStringServiceExtension$3$getter$name$setter(new A.BindingBase_initServiceExtensions_closure1(), C.EnumName_get_name(B.FoundationServiceExtensions_3), new A.BindingBase_initServiceExtensions_closure2());
    },
    get$locked() {
      var t1 = this._lockCount;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    lockEvents$1(callback) {
      var debugTimelineTask, t2, future, t1 = {};
      type$.Future_void_Function._as(callback);
      t1.debugTimelineTask = null;
      debugTimelineTask = D.TimelineTask$();
      debugTimelineTask.start$1("Lock events");
      t1.debugTimelineTask = debugTimelineTask;
      t2 = this._lockCount;
      if (typeof t2 !== "number")
        return t2.$add();
      this.set$_lockCount(t2 + 1);
      future = callback.call$0();
      future.whenComplete$1(new A.BindingBase_lockEvents_closure(t1, this));
      return future;
    },
    unlocked$0() {
    },
    registerBoolServiceExtension$3$getter$name$setter(getter, $name, setter) {
      C._asString($name);
      type$.Future_bool_Function._as(getter);
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerBoolServiceExtension_closure(this, type$.Future_void_Function_bool._as(setter), $name, getter), $name);
    },
    registerNumericServiceExtension$3$getter$name$setter(getter, $name, setter) {
      C._asString($name);
      type$.Future_double_Function._as(getter);
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerNumericServiceExtension_closure(this, $name, type$.Future_void_Function_double._as(setter), getter), $name);
    },
    _postExtensionStateChangedEvent$2($name, value) {
      this.postEvent$2("Flutter.ServiceExtensionStateChanged", C.LinkedHashMap_LinkedHashMap$_literal(["extension", "ext.flutter." + C._asString($name), "value", value], type$.String, type$.dynamic));
    },
    postEvent$2(eventKind, eventData) {
      D.postEvent(C._asString(eventKind), type$.Map_String_dynamic._as(eventData));
    },
    registerStringServiceExtension$3$getter$name$setter(getter, $name, setter) {
      C._asString($name);
      type$.Future_String_Function._as(getter);
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerStringServiceExtension_closure(this, type$.Future_void_Function_String._as(setter), $name, getter), $name);
    },
    registerServiceExtension$2$callback$name(callback, $name) {
      A.registerExtension("ext.flutter." + C._asString($name), new A.BindingBase_registerServiceExtension_closure(type$.Future_Map_String_dynamic_Function_Map_String_String._as(callback)));
    },
    toString$0(_) {
      return "<" + C.S(D.objectRuntimeType(this, "BindingBase")) + ">";
    },
    set$_lockCount(_lockCount) {
      this._lockCount = C._asInt(_lockCount);
    }
  };
  A.LicenseEntry.prototype = {};
  A.LicenseEntryWithLineBreaks.prototype = {};
  A.HashedObserverList.prototype = {
    add$1(_, item) {
      var t1, t2, t3;
      this.$ti._precomputed1._as(item);
      t1 = this._observer_list$_map;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, item);
      if (t3 == null)
        t3 = 0;
      if (typeof t3 !== "number")
        return t3.$add();
      t2.$indexSet(t1, item, t3 + 1);
    },
    remove$1(_, item) {
      var t1, t2, value;
      this.$ti._precomputed1._as(item);
      t1 = this._observer_list$_map;
      t2 = J.getInterceptor$asx(t1);
      value = t2.$index(t1, item);
      if (value == null)
        return false;
      if (value === 1)
        t2.remove$1(t1, item);
      else
        t2.$indexSet(t1, item, value - 1);
      return true;
    },
    contains$1(_, element) {
      return this._observer_list$_map.containsKey$1(element);
    },
    get$iterator(_) {
      return J.get$iterator$ax(this._observer_list$_map.get$keys());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._observer_list$_map);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._observer_list$_map);
    }
  };
  A.FoundationServiceExtensions.prototype = {
    _enumToString$0() {
      return "FoundationServiceExtensions." + C.S(this._core$_name);
    }
  };
  A.GestureArenaEntry.prototype = {
    resolve$1(disposition) {
      this._arena._resolve$3(this._arena$_pointer, this._member, type$.GestureDisposition._as(disposition));
    }
  };
  A._GestureArena.prototype = {
    add$1(_, member) {
      J.add$1$ax(this.members, type$.GestureArenaMember._as(member));
    },
    toString$0(_) {
      var _this = this,
        buffer = C.StringBuffer$(""),
        t1 = _this.members,
        t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isEmpty(t1)))
        buffer.write$1("<empty>");
      else
        buffer.write$1(J.join$1$ax(t2.map$1$1(t1, new A._GestureArena_toString_closure(_this), type$.String), ", "));
      if (C.boolConversionCheck(_this.isOpen))
        buffer.write$1(" [open]");
      if (C.boolConversionCheck(_this.isHeld))
        buffer.write$1(" [held]");
      if (C.boolConversionCheck(_this.hasPendingSweep))
        buffer.write$1(" [hasPendingSweep]");
      return buffer.toString$0(0);
    }
  };
  A.GestureArenaManager.prototype = {
    add$2(_, pointer, member) {
      C._asInt(pointer);
      type$.GestureArenaMember._as(member);
      this._arenas.putIfAbsent$2(pointer, new A.GestureArenaManager_add_closure()).add$1(0, member);
      return A.GestureArenaEntry$_(this, pointer, member);
    },
    close$1(pointer) {
      var state;
      C._asInt(pointer);
      state = J.$index$asx(this._arenas, pointer);
      if (state == null)
        return;
      state.isOpen = false;
      this._tryToResolveArena$2(pointer, state);
    },
    sweep$1(pointer) {
      var t1, t2, state, i, t3;
      C._asInt(pointer);
      t1 = this._arenas;
      t2 = J.getInterceptor$asx(t1);
      state = t2.$index(t1, pointer);
      if (state == null)
        return;
      if (C.boolConversionCheck(state.isHeld)) {
        state.hasPendingSweep = true;
        return;
      }
      t2.remove$1(t1, pointer);
      t1 = state.members;
      t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        t2.get$first(t1).acceptGesture$1(pointer);
        i = 1;
        while (true) {
          t3 = t2.get$length(t1);
          if (typeof t3 !== "number")
            return C.iae(t3);
          if (!(i < t3))
            break;
          t2.$index(t1, i).rejectGesture$1(pointer);
          ++i;
        }
      }
    },
    hold$1(pointer) {
      var state = J.$index$asx(this._arenas, C._asInt(pointer));
      if (state == null)
        return;
      state.isHeld = true;
    },
    release$1(pointer) {
      var state;
      C._asInt(pointer);
      state = J.$index$asx(this._arenas, pointer);
      if (state == null)
        return;
      state.isHeld = false;
      if (C.boolConversionCheck(state.hasPendingSweep))
        this.sweep$1(pointer);
    },
    _resolve$3(pointer, member, disposition) {
      var state;
      C._asInt(pointer);
      type$.GestureArenaMember._as(member);
      type$.GestureDisposition._as(disposition);
      state = J.$index$asx(this._arenas, pointer);
      if (state == null)
        return;
      switch (disposition.index) {
        case 0:
          if (C.boolConversionCheck(state.isOpen)) {
            if (state.eagerWinner == null)
              state.eagerWinner = member;
          } else
            this._resolveInFavorOf$3(pointer, state, member);
          break;
        case 1:
          J.remove$1$ax(state.members, member);
          member.rejectGesture$1(pointer);
          if (!C.boolConversionCheck(state.isOpen))
            this._tryToResolveArena$2(pointer, state);
          break;
      }
    },
    _tryToResolveArena$2(pointer, state) {
      var t1, t2;
      C._asInt(pointer);
      type$._GestureArena._as(state);
      t1 = state.members;
      t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(J.$eq$(t2.get$length(t1), 1)))
        C.scheduleMicrotask(new A.GestureArenaManager__tryToResolveArena_closure(this, pointer, state));
      else if (C.boolConversionCheck(t2.get$isEmpty(t1)))
        J.remove$1$ax(this._arenas, pointer);
      else {
        t1 = state.eagerWinner;
        if (t1 != null)
          this._resolveInFavorOf$3(pointer, state, t1);
      }
    },
    _resolveByDefault$2(pointer, state) {
      var t1;
      C._asInt(pointer);
      type$._GestureArena._as(state);
      t1 = this._arenas;
      if (!C.boolConversionCheck(t1.containsKey$1(pointer)))
        return;
      J.remove$1$ax(t1, pointer);
      J.get$first$ax(state.members).acceptGesture$1(pointer);
    },
    _resolveInFavorOf$3(pointer, state, member) {
      var t1, t2;
      C._asInt(pointer);
      type$._GestureArena._as(state);
      type$.GestureArenaMember._as(member);
      J.remove$1$ax(this._arenas, pointer);
      for (t1 = J.get$iterator$ax(state.members); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (t2 !== member)
          t2.rejectGesture$1(pointer);
      }
      member.acceptGesture$1(pointer);
    }
  };
  A.SamplingClock.prototype = {
    now$0() {
      return D.DateTime$now();
    },
    stopwatch$0() {
      return D.Stopwatch$();
    }
  };
  A._Resampler.prototype = {
    addOrDispatch$1($event) {
      type$.PointerEvent._as($event);
      if (C.boolConversionCheck(J.$eq$($event.get$kind(), E.PointerDeviceKind_0))) {
        this.set$_lastEventTime($event.get$timeStamp());
        this._resamplers.putIfAbsent$2($event.get$device(), new A._Resampler_addOrDispatch_closure()).addEvent$1($event);
      } else
        this._handlePointerEvent.call$1($event);
    },
    sample$2(samplingOffset, clock) {
      var scheduler, t1, samplingIntervalUs, t2, elapsedIntervals, sampleTime, nextSampleTime, t3, _this = this;
      type$.Duration._as(samplingOffset);
      type$.SamplingClock._as(clock);
      scheduler = D.SchedulerBinding_instance();
      if (C.boolConversionCheck(J.$eq$(_this._frameTime, F.Duration_0))) {
        _this._frameTime = D.Duration$(0, clock.now$0().get$millisecondsSinceEpoch());
        t1 = clock.stopwatch$0();
        t1.start$0();
        _this.set$_frameTimeAge(t1);
      }
      t1 = _this._binding$_timer;
      if (!C.boolConversionCheck(J.$eq$(t1 == null ? null : t1.get$isActive(), true)))
        _this.set$_binding$_timer(A.Timer_Timer$periodic(_this._samplingInterval, new A._Resampler_sample_closure(_this)));
      t1 = _this._samplingInterval;
      samplingIntervalUs = t1.get$inMicroseconds();
      t2 = _this._frameTimeAge.get$elapsedMicroseconds();
      if (typeof t2 !== "number")
        return t2.$tdiv();
      elapsedIntervals = F.JSNumber_methods.$tdiv(t2, samplingIntervalUs);
      sampleTime = J.$add$ansx(_this._frameTime, D.Duration$(elapsedIntervals * samplingIntervalUs, 0)).$add(0, samplingOffset);
      nextSampleTime = sampleTime.$add(0, t1);
      for (t1 = _this._resamplers, t2 = J.get$iterator$ax(t1.get$values()), t3 = _this._handlePointerEvent; C.boolConversionCheck(t2.moveNext$0());)
        t2.get$current().sample$3(sampleTime, nextSampleTime, t3);
      t2 = J.getInterceptor$ax(t1);
      t2.removeWhere$1(t1, new A._Resampler_sample_closure0());
      if (C.boolConversionCheck(t2.get$isEmpty(t1))) {
        _this._binding$_timer.cancel$0();
        return;
      }
      if (!C.boolConversionCheck(_this._frameCallbackScheduled)) {
        _this._frameCallbackScheduled = true;
        scheduler.addPostFrameCallback$2$debugLabel(new A._Resampler_sample_closure1(_this, scheduler), "Resampler.startTimer");
      }
    },
    stop$0() {
      var t1, t2, t3, _this = this;
      for (t1 = _this._resamplers, t2 = J.get$iterator$ax(t1.get$values()), t3 = _this._handlePointerEvent; C.boolConversionCheck(t2.moveNext$0());)
        t2.get$current().stop$1(t3);
      J.clear$0$ax(t1);
      _this._frameTime = F.Duration_0;
      t1 = _this._binding$_timer;
      if (t1 != null)
        t1.cancel$0();
    },
    _onSampleTimeChanged$0() {
      this._handleSampleTimeChanged.call$0();
    },
    set$_frameTime(_frameTime) {
      this._frameTime = type$.Duration._as(_frameTime);
    },
    set$_frameTimeAge(_frameTimeAge) {
      this._frameTimeAge = type$.Stopwatch._as(_frameTimeAge);
    },
    set$_lastEventTime(_lastEventTime) {
      type$.Duration._as(_lastEventTime);
    },
    set$_binding$_timer(_timer) {
      this._binding$_timer = type$.nullable_Timer._as(_timer);
    }
  };
  A.GestureBinding.prototype = {
    _handlePointerDataPacket$1(packet) {
      var error, stack, exception, _this = this;
      type$.PointerDataPacket._as(packet);
      try {
        J.addAll$1$ax(_this.GestureBinding__pendingPointerEvents, A.PointerEventConverter_expand(packet.data, _this.get$_devicePixelRatioForView()));
        if (!C.boolConversionCheck(_this.get$locked()))
          _this._flushPointerEventQueue$0();
      } catch (exception) {
        error = C.unwrapException(exception);
        stack = C.getTraceFromException(exception);
        D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while handling a pointer data packet"), error, null, "gestures library", false, stack));
      }
    },
    _devicePixelRatioForView$1(viewId) {
      var t1;
      C._asInt(viewId);
      t1 = this.get$platformDispatcher().view$1$id(viewId);
      return t1 == null ? null : t1.get$devicePixelRatio();
    },
    cancelPointer$1(pointer) {
      var t1;
      C._asInt(pointer);
      t1 = this.GestureBinding__pendingPointerEvents;
      if (C.boolConversionCheck(J.get$isEmpty$asx(t1)) && !C.boolConversionCheck(this.get$locked()))
        C.scheduleMicrotask(this.get$_flushPointerEventQueue());
      t1.addFirst$1(A.PointerCancelEvent$(0, 0, 0, 0, 0, E.PointerDeviceKind_0, false, 0, pointer, E.Offset_0_0, 1, 1, 0, 0, 0, 0, 0, 0, F.Duration_0, 0));
    },
    _flushPointerEventQueue$0() {
      var t1, t2;
      for (t1 = this.GestureBinding__pendingPointerEvents, t2 = J.getInterceptor$asx(t1); C.boolConversionCheck(t2.get$isNotEmpty(t1));)
        this.handlePointerEvent$1(t1.removeFirst$0());
    },
    handlePointerEvent$1($event) {
      var _this = this;
      type$.PointerEvent._as($event);
      if (C.boolConversionCheck(_this.GestureBinding_resamplingEnabled)) {
        _this.get$_resampler().addOrDispatch$1($event);
        _this.get$_resampler().sample$2(_this.GestureBinding_samplingOffset, _this.get$samplingClock());
        return;
      }
      _this.get$_resampler().stop$0();
      _this._handlePointerEventImmediately$1($event);
    },
    _handlePointerEventImmediately$1($event) {
      var t1, hitTestResult, _this = this;
      type$.PointerEvent._as($event);
      t1 = !type$.PointerDownEvent._is($event);
      if (!t1 || type$.PointerSignalEvent._is($event) || type$.PointerHoverEvent._is($event) || type$.PointerPanZoomStartEvent._is($event)) {
        hitTestResult = A.HitTestResult$();
        _this.hitTestInView$3(hitTestResult, $event.get$position(), $event.get$viewId());
        if (!t1 || type$.PointerPanZoomStartEvent._is($event))
          J.$indexSet$ax(_this.GestureBinding__hitTests, $event.get$pointer(), hitTestResult);
      } else if (type$.PointerUpEvent._is($event) || type$.PointerCancelEvent._is($event) || type$.PointerPanZoomEndEvent._is($event))
        hitTestResult = J.remove$1$ax(_this.GestureBinding__hitTests, $event.get$pointer());
      else
        hitTestResult = C.boolConversionCheck($event.get$down()) || type$.PointerPanZoomUpdateEvent._is($event) ? J.$index$asx(_this.GestureBinding__hitTests, $event.get$pointer()) : null;
      if (hitTestResult != null || type$.PointerAddedEvent._is($event) || type$.PointerRemovedEvent._is($event))
        _this.dispatchEvent$2($event, hitTestResult);
    },
    hitTestInView$3(result, position, viewId) {
      type$.HitTestResult._as(result);
      type$.Offset._as(position);
      C._asInt(viewId);
      result.add$1(0, D.HitTestEntry$(this, type$.HitTestTarget));
    },
    dispatchEvent$2($event, hitTestResult) {
      var exception, stack, entry, exception0, stack0, t1,
        _s15_ = "gesture library";
      type$.PointerEvent._as($event);
      type$.nullable_HitTestResult._as(hitTestResult);
      if (hitTestResult == null) {
        try {
          this.GestureBinding_pointerRouter.route$1($event);
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          D.FlutterError_reportError(A.FlutterErrorDetailsForPointerEventDispatcher$(D.ErrorDescription$("while dispatching a non-hit-tested pointer event"), $event, exception, null, new A.GestureBinding_dispatchEvent_closure($event), _s15_, stack));
        }
        return;
      }
      for (t1 = J.get$iterator$ax(hitTestResult.get$path()); C.boolConversionCheck(t1.moveNext$0());) {
        entry = t1.get$current();
        try {
          entry.target.handleEvent$2($event.transformed$1(entry.get$transform()), entry);
        } catch (exception) {
          exception0 = C.unwrapException(exception);
          stack0 = C.getTraceFromException(exception);
          D.FlutterError_reportError(A.FlutterErrorDetailsForPointerEventDispatcher$(D.ErrorDescription$("while dispatching a pointer event"), $event, exception0, entry, new A.GestureBinding_dispatchEvent_closure0($event, entry), _s15_, stack0));
        }
      }
    },
    handleEvent$2($event, entry) {
      var _this = this;
      type$.PointerEvent._as($event);
      type$.HitTestEntry_HitTestTarget._as(entry);
      _this.GestureBinding_pointerRouter.route$1($event);
      if (type$.PointerDownEvent._is($event) || type$.PointerPanZoomStartEvent._is($event))
        _this.GestureBinding_gestureArena.close$1($event.get$pointer());
      else if (type$.PointerUpEvent._is($event) || type$.PointerPanZoomEndEvent._is($event))
        _this.GestureBinding_gestureArena.sweep$1($event.get$pointer());
      else if (type$.PointerSignalEvent._is($event))
        _this.GestureBinding_pointerSignalResolver.resolve$1($event);
    },
    _handleSampleTimeChanged$0() {
      var _this = this;
      if (!C.boolConversionCheck(_this.get$locked()))
        if (C.boolConversionCheck(_this.GestureBinding_resamplingEnabled))
          _this.get$_resampler().sample$2(_this.GestureBinding_samplingOffset, _this.get$samplingClock());
        else
          _this.get$_resampler().stop$0();
    },
    get$samplingClock() {
      return A.SamplingClock$();
    },
    get$_resampler() {
      var result, _this = this,
        value = _this.GestureBinding___GestureBinding__resampler_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = A._Resampler$(_this.get$_handlePointerEventImmediately(), _this.get$_handleSampleTimeChanged(), B.Duration_16667);
        value !== $ && C.throwLateFieldADI("_resampler");
        _this.GestureBinding___GestureBinding__resampler_FI = result;
        value = result;
      }
      return value;
    },
    $isBindingBase: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1
  };
  A.FlutterErrorDetailsForPointerEventDispatcher.prototype = {};
  A.PointerEvent.prototype = {
    get$localPosition() {
      return this.position;
    },
    get$localDelta() {
      return this.delta;
    },
    get$distanceMin() {
      return 0;
    },
    $isDiagnosticable: 1,
    get$viewId() {
      return this.viewId;
    },
    get$embedderId() {
      return this.embedderId;
    },
    get$timeStamp() {
      return this.timeStamp;
    },
    get$pointer() {
      return this.pointer;
    },
    get$kind() {
      return this.kind;
    },
    get$device() {
      return this.device;
    },
    get$position() {
      return this.position;
    },
    get$delta() {
      return this.delta;
    },
    get$buttons() {
      return this.buttons;
    },
    get$down() {
      return this.down;
    },
    get$obscured() {
      return this.obscured;
    },
    get$pressure() {
      return this.pressure;
    },
    get$pressureMin() {
      return this.pressureMin;
    },
    get$pressureMax() {
      return this.pressureMax;
    },
    get$distance() {
      return this.distance;
    },
    get$distanceMax() {
      return this.distanceMax;
    },
    get$size() {
      return this.size;
    },
    get$radiusMajor() {
      return this.radiusMajor;
    },
    get$radiusMinor() {
      return this.radiusMinor;
    },
    get$radiusMin() {
      return this.radiusMin;
    },
    get$radiusMax() {
      return this.radiusMax;
    },
    get$orientation() {
      return this.orientation;
    },
    get$tilt() {
      return this.tilt;
    },
    get$platformData() {
      return this.platformData;
    },
    get$synthesized() {
      return this.synthesized;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._PointerEventDescription.prototype = {$isDiagnosticable: 1, $isPointerEvent: 1, $is_PointerEvent_Object_Diagnosticable: 1};
  A._AbstractPointerEvent.prototype = {$isDiagnosticable: 1, $isPointerEvent: 1, $is_PointerEvent_Object_Diagnosticable: 1};
  A._TransformedPointerEvent.prototype = {
    get$embedderId() {
      return this.get$original().get$embedderId();
    },
    get$timeStamp() {
      return this.get$original().get$timeStamp();
    },
    get$pointer() {
      return this.get$original().get$pointer();
    },
    get$kind() {
      return this.get$original().get$kind();
    },
    get$device() {
      return this.get$original().get$device();
    },
    get$position() {
      return this.get$original().get$position();
    },
    get$delta() {
      return this.get$original().get$delta();
    },
    get$buttons() {
      return this.get$original().get$buttons();
    },
    get$down() {
      return this.get$original().get$down();
    },
    get$obscured() {
      return this.get$original().get$obscured();
    },
    get$pressure() {
      return this.get$original().get$pressure();
    },
    get$pressureMin() {
      return this.get$original().get$pressureMin();
    },
    get$pressureMax() {
      return this.get$original().get$pressureMax();
    },
    get$distance() {
      return this.get$original().get$distance();
    },
    get$distanceMin() {
      return 0;
    },
    get$distanceMax() {
      return this.get$original().get$distanceMax();
    },
    get$size() {
      return this.get$original().get$size();
    },
    get$radiusMajor() {
      return this.get$original().get$radiusMajor();
    },
    get$radiusMinor() {
      return this.get$original().get$radiusMinor();
    },
    get$radiusMin() {
      return this.get$original().get$radiusMin();
    },
    get$radiusMax() {
      return this.get$original().get$radiusMax();
    },
    get$orientation() {
      return this.get$original().get$orientation();
    },
    get$tilt() {
      return this.get$original().get$tilt();
    },
    get$platformData() {
      return this.get$original().get$platformData();
    },
    get$synthesized() {
      return this.get$original().get$synthesized();
    },
    get$localPosition() {
      var result, _this = this,
        value = _this.___TransformedPointerEvent_localPosition_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = D.PointerEvent_transformPosition(_this.get$transform(), _this.get$position());
        _this.___TransformedPointerEvent_localPosition_FI !== $ && C.throwLateFieldADI("localPosition");
        _this.___TransformedPointerEvent_localPosition_FI = result;
        value = result;
      }
      return value;
    },
    get$localDelta() {
      var t1, t2, t3, result, _this = this,
        value = _this.___TransformedPointerEvent_localDelta_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        t1 = _this.get$transform();
        t2 = _this.get$delta();
        t3 = _this.get$position();
        result = D.PointerEvent_transformDeltaViaPositions(t1, _this.get$localPosition(), t2, t3);
        _this.___TransformedPointerEvent_localDelta_FI !== $ && C.throwLateFieldADI("localDelta");
        _this.___TransformedPointerEvent_localDelta_FI = result;
        value = result;
      }
      return value;
    },
    get$viewId() {
      return this.get$original().get$viewId();
    },
    $is_PointerEventDescription: 1
  };
  A._CopyPointerAddedEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = _this.get$obscured();
      t7 = _this.get$pressureMin();
      t8 = _this.get$pressureMax();
      t9 = _this.get$distance();
      t10 = _this.get$distanceMax();
      t11 = _this.get$radiusMin();
      t12 = _this.get$radiusMax();
      t13 = _this.get$orientation();
      t14 = _this.get$tilt();
      t15 = _this.get$embedderId();
      return A.PointerAddedEvent$(t4, t9, t10, t15, t3, t6, t13, t5, t8, t7, t12, t11, t14, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerAddedEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerAddedEvent._as(_this.original);
      return A._TransformedPointerAddedEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerAddedEvent: 1
  };
  A._TransformedPointerAddedEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerAddedEvent: 1,
    $isPointerAddedEvent: 1,
    $is_PointerAddedEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerRemovedEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = _this.get$obscured();
      t7 = _this.get$pressureMin();
      t8 = _this.get$pressureMax();
      t9 = _this.get$distanceMax();
      t10 = _this.get$radiusMin();
      t11 = _this.get$radiusMax();
      t12 = _this.get$embedderId();
      return A.PointerRemovedEvent$(t4, t9, t12, t3, t6, t5, t8, t7, t11, t10, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerRemovedEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerRemovedEvent._as(_this.original);
      return A._TransformedPointerRemovedEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerRemovedEvent: 1
  };
  A._TransformedPointerRemovedEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerRemovedEvent: 1,
    $isPointerRemovedEvent: 1,
    $is_PointerRemovedEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerHoverEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = delta == null ? _this.get$delta() : delta;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressureMin();
      t10 = _this.get$pressureMax();
      t11 = _this.get$distance();
      t12 = _this.get$distanceMax();
      t13 = _this.get$size();
      t14 = _this.get$radiusMajor();
      t15 = _this.get$radiusMinor();
      t16 = _this.get$radiusMin();
      t17 = _this.get$radiusMax();
      t18 = _this.get$orientation();
      t19 = _this.get$tilt();
      t20 = _this.get$synthesized();
      t21 = _this.get$embedderId();
      return A.PointerHoverEvent$(t7, t6, t4, t11, t12, t21, t3, t8, t18, t5, t10, t9, t14, t17, t16, t15, t13, t20, t19, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerHoverEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerHoverEvent._as(_this.original);
      return A._TransformedPointerHoverEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerHoverEvent: 1
  };
  A._TransformedPointerHoverEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerHoverEvent: 1,
    $isPointerHoverEvent: 1,
    $is_PointerHoverEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerEnterEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = delta == null ? _this.get$delta() : delta;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressureMin();
      t10 = _this.get$pressureMax();
      t11 = _this.get$distance();
      t12 = _this.get$distanceMax();
      t13 = _this.get$size();
      t14 = _this.get$radiusMajor();
      t15 = _this.get$radiusMinor();
      t16 = _this.get$radiusMin();
      t17 = _this.get$radiusMax();
      t18 = _this.get$orientation();
      t19 = _this.get$tilt();
      t20 = _this.get$synthesized();
      t21 = _this.get$embedderId();
      return A.PointerEnterEvent$(t7, t6, t4, t11, t12, false, t21, t3, t8, t18, 0, t5, t10, t9, t14, t17, t16, t15, t13, t20, t19, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerEnterEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerEnterEvent._as(_this.original);
      return A._TransformedPointerEnterEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerEnterEvent: 1
  };
  A._TransformedPointerEnterEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerEnterEvent: 1,
    $isPointerEnterEvent: 1,
    $is_PointerEnterEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerExitEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = delta == null ? _this.get$delta() : delta;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressureMin();
      t10 = _this.get$pressureMax();
      t11 = _this.get$distance();
      t12 = _this.get$distanceMax();
      t13 = _this.get$size();
      t14 = _this.get$radiusMajor();
      t15 = _this.get$radiusMinor();
      t16 = _this.get$radiusMin();
      t17 = _this.get$radiusMax();
      t18 = _this.get$orientation();
      t19 = _this.get$tilt();
      t20 = _this.get$synthesized();
      t21 = _this.get$embedderId();
      return A.PointerExitEvent$(t7, t6, t4, t11, t12, false, t21, t3, t8, t18, 0, t5, t10, t9, t14, t17, t16, t15, t13, t20, t19, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerExitEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerExitEvent._as(_this.original);
      return A._TransformedPointerExitEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerExitEvent: 1
  };
  A._TransformedPointerExitEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerExitEvent: 1,
    $isPointerExitEvent: 1,
    $is_PointerExitEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerDownEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = pointer == null ? _this.get$pointer() : pointer;
      t4 = _this.get$kind();
      t5 = _this.get$device();
      t6 = position == null ? _this.get$position() : position;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressure();
      t10 = _this.get$pressureMin();
      t11 = _this.get$pressureMax();
      t12 = _this.get$distanceMax();
      t13 = _this.get$size();
      t14 = _this.get$radiusMajor();
      t15 = _this.get$radiusMinor();
      t16 = _this.get$radiusMin();
      t17 = _this.get$radiusMax();
      t18 = _this.get$orientation();
      t19 = _this.get$tilt();
      t20 = _this.get$embedderId();
      return A.PointerDownEvent$(t7, t5, t12, t20, t4, t8, t18, t3, t6, t9, t11, t10, t14, t17, t16, t15, t13, t19, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerDownEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerDownEvent._as(_this.original);
      return A._TransformedPointerDownEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerDownEvent: 1
  };
  A._TransformedPointerDownEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerDownEvent: 1,
    $isPointerDownEvent: 1,
    $is_PointerDownEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerMoveEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = pointer == null ? _this.get$pointer() : pointer;
      t4 = _this.get$kind();
      t5 = _this.get$device();
      t6 = position == null ? _this.get$position() : position;
      t7 = delta == null ? _this.get$delta() : delta;
      t8 = _this.get$buttons();
      t9 = _this.get$obscured();
      t10 = _this.get$pressure();
      t11 = _this.get$pressureMin();
      t12 = _this.get$pressureMax();
      t13 = _this.get$distanceMax();
      t14 = _this.get$size();
      t15 = _this.get$radiusMajor();
      t16 = _this.get$radiusMinor();
      t17 = _this.get$radiusMin();
      t18 = _this.get$radiusMax();
      t19 = _this.get$orientation();
      t20 = _this.get$tilt();
      t21 = _this.get$synthesized();
      t22 = _this.get$embedderId();
      return A.PointerMoveEvent$(t8, t7, t5, t13, t22, t4, t9, t19, 0, t3, t6, t10, t12, t11, t15, t18, t17, t16, t14, t21, t20, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerMoveEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerMoveEvent._as(_this.original);
      return A._TransformedPointerMoveEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerMoveEvent: 1
  };
  A._TransformedPointerMoveEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerMoveEvent: 1,
    $isPointerMoveEvent: 1,
    $is_PointerMoveEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerUpEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = pointer == null ? _this.get$pointer() : pointer;
      t4 = _this.get$kind();
      t5 = _this.get$device();
      t6 = position == null ? _this.get$position() : position;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressure();
      t10 = _this.get$pressureMin();
      t11 = _this.get$pressureMax();
      t12 = _this.get$distance();
      t13 = _this.get$distanceMax();
      t14 = _this.get$size();
      t15 = _this.get$radiusMajor();
      t16 = _this.get$radiusMinor();
      t17 = _this.get$radiusMin();
      t18 = _this.get$radiusMax();
      t19 = _this.get$orientation();
      t20 = _this.get$tilt();
      t21 = _this.get$embedderId();
      return A.PointerUpEvent$(t7, t5, t12, t13, t21, t4, t8, t19, t3, t6, t9, t11, t10, t15, t18, t17, t16, t14, t20, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerUpEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerUpEvent._as(_this.original);
      return A._TransformedPointerUpEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerUpEvent: 1
  };
  A._TransformedPointerUpEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerUpEvent: 1,
    $isPointerUpEvent: 1,
    $is_PointerUpEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A.PointerSignalEvent.prototype = {$is_RespondablePointerEvent: 1};
  A._RespondablePointerEvent.prototype = {
    respond$1$allowPlatformDefault(allowPlatformDefault) {
      C._asBool(allowPlatformDefault);
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A._CopyPointerScrollEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = _this.get$scrollDelta();
      t7 = _this.get$embedderId();
      type$.PointerScrollEvent._as(_this);
      t8 = _this.get$respond();
      return A.PointerScrollEvent$(t4, t7, t3, t8, t5, t6, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerScrollEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerScrollEvent._as(_this.original);
      return A._TransformedPointerScrollEvent$(t1 == null ? _this : t1, transform);
    },
    debugFillProperties$1(properties) {
      var _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      this.super$_PointerScrollEvent_PointerSignalEvent__PointerEventDescription$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("scrollDelta", this.scrollDelta, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Offset));
    },
    respond$1$allowPlatformDefault(allowPlatformDefault) {
      var t1;
      C._asBool(allowPlatformDefault);
      t1 = this._events$_onRespond;
      if (t1 != null)
        t1.call$1$allowPlatformDefault(allowPlatformDefault);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerScrollEvent: 1,
    get$scrollDelta() {
      return this.scrollDelta;
    }
  };
  A._TransformedPointerScrollEvent.prototype = {
    get$scrollDelta() {
      return this.original.get$scrollDelta();
    },
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    debugFillProperties$1(properties) {
      var _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      this.super$__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("scrollDelta", this.get$scrollDelta(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Offset));
    },
    respond$1$allowPlatformDefault(allowPlatformDefault) {
      this.original.respond$1$allowPlatformDefault(C._asBool(allowPlatformDefault));
    },
    $isPointerSignalEvent: 1,
    $is_RespondablePointerEvent: 1,
    $is_CopyPointerScrollEvent: 1,
    $isPointerScrollEvent: 1,
    $is_PointerScrollEvent_PointerSignalEvent__PointerEventDescription: 1,
    $is_PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent: 1,
    $is_PointerSignalEvent_PointerEvent__RespondablePointerEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerScrollInertiaCancelEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = _this.get$embedderId();
      return A.PointerScrollInertiaCancelEvent$(t4, t6, t3, t5, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerScrollInertiaCancelEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerScrollInertiaCancelEvent._as(_this.original);
      return A._TransformedPointerScrollInertiaCancelEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerScrollInertiaCancelEvent: 1
  };
  A._TransformedPointerScrollInertiaCancelEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $isPointerSignalEvent: 1,
    $is_RespondablePointerEvent: 1,
    $is_CopyPointerScrollInertiaCancelEvent: 1,
    $isPointerScrollInertiaCancelEvent: 1,
    $is_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription: 1,
    $is_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent: 1,
    $is_PointerSignalEvent_PointerEvent__RespondablePointerEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerScaleEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$kind();
      t4 = _this.get$device();
      t5 = position == null ? _this.get$position() : position;
      t6 = _this.get$embedderId();
      t7 = _this.get$scale();
      return A.PointerScaleEvent$(t4, t6, t3, t5, t7, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerScaleEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerScaleEvent._as(_this.original);
      return A._TransformedPointerScaleEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerScaleEvent: 1,
    get$scale() {
      return this.scale;
    }
  };
  A._TransformedPointerScaleEvent.prototype = {
    get$scale() {
      return this.original.get$scale();
    },
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $isPointerSignalEvent: 1,
    $is_RespondablePointerEvent: 1,
    $is_CopyPointerScaleEvent: 1,
    $isPointerScaleEvent: 1,
    $is_PointerScaleEvent_PointerSignalEvent__PointerEventDescription: 1,
    $is_PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent: 1,
    $is_PointerSignalEvent_PointerEvent__RespondablePointerEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerPanZoomStartEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$device();
      t4 = position == null ? _this.get$position() : position;
      t5 = _this.get$embedderId();
      return A.PointerPanZoomStartEvent$(t3, t5, 0, t4, false, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerPanZoomStartEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerPanZoomStartEvent._as(_this.original);
      return A._TransformedPointerPanZoomStartEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerPanZoomStartEvent: 1
  };
  A._TransformedPointerPanZoomStartEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerPanZoomStartEvent: 1,
    $isPointerPanZoomStartEvent: 1,
    $is_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerPanZoomUpdateEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$device();
      t4 = position == null ? _this.get$position() : position;
      t5 = _this.get$embedderId();
      t6 = _this.get$pan();
      t7 = _this.get$panDelta();
      t8 = _this.get$scale();
      t9 = _this.get$rotation();
      return A.PointerPanZoomUpdateEvent$(t3, t5, t6, t7, 0, t4, t9, t8, false, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerPanZoomUpdateEvent.prototype = {
    get$localPan() {
      return this.pan;
    },
    get$localPanDelta() {
      return this.panDelta;
    },
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerPanZoomUpdateEvent._as(_this.original);
      return A._TransformedPointerPanZoomUpdateEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerPanZoomUpdateEvent: 1,
    get$pan() {
      return this.pan;
    },
    get$panDelta() {
      return this.panDelta;
    },
    get$scale() {
      return this.scale;
    },
    get$rotation() {
      return this.rotation;
    }
  };
  A._TransformedPointerPanZoomUpdateEvent.prototype = {
    get$pan() {
      return this.original.get$pan();
    },
    get$localPan() {
      var result, _this = this,
        value = _this.___TransformedPointerPanZoomUpdateEvent_localPan_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = D.PointerEvent_transformPosition(_this.transform, _this.get$pan());
        _this.___TransformedPointerPanZoomUpdateEvent_localPan_FI !== $ && C.throwLateFieldADI("localPan");
        _this.___TransformedPointerPanZoomUpdateEvent_localPan_FI = result;
        value = result;
      }
      return value;
    },
    get$panDelta() {
      return this.original.get$panDelta();
    },
    get$localPanDelta() {
      var t1, t2, result, _this = this,
        value = _this.___TransformedPointerPanZoomUpdateEvent_localPanDelta_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        t1 = _this.get$panDelta();
        t2 = _this.get$pan();
        result = D.PointerEvent_transformDeltaViaPositions(_this.transform, _this.get$localPan(), t1, t2);
        _this.___TransformedPointerPanZoomUpdateEvent_localPanDelta_FI !== $ && C.throwLateFieldADI("localPanDelta");
        _this.___TransformedPointerPanZoomUpdateEvent_localPanDelta_FI = result;
        value = result;
      }
      return value;
    },
    get$scale() {
      return this.original.get$scale();
    },
    get$rotation() {
      return this.original.get$rotation();
    },
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerPanZoomUpdateEvent: 1,
    $isPointerPanZoomUpdateEvent: 1,
    $is_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerPanZoomEndEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = _this.get$device();
      t4 = position == null ? _this.get$position() : position;
      t5 = _this.get$embedderId();
      return A.PointerPanZoomEndEvent$(t3, t5, 0, t4, false, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerPanZoomEndEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerPanZoomEndEvent._as(_this.original);
      return A._TransformedPointerPanZoomEndEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerPanZoomEndEvent: 1
  };
  A._TransformedPointerPanZoomEndEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerPanZoomEndEvent: 1,
    $isPointerPanZoomEndEvent: 1,
    $is_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._CopyPointerCancelEvent.prototype = {
    copyWith$4$delta$pointer$position$timeStamp(delta, pointer, position, timeStamp) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, _this = this;
      type$.nullable_Duration._as(timeStamp);
      C._asIntQ(pointer);
      t1 = type$.nullable_Offset;
      t1._as(position);
      t1._as(delta);
      t1 = _this.get$viewId();
      t2 = timeStamp == null ? _this.get$timeStamp() : timeStamp;
      t3 = pointer == null ? _this.get$pointer() : pointer;
      t4 = _this.get$kind();
      t5 = _this.get$device();
      t6 = position == null ? _this.get$position() : position;
      t7 = _this.get$buttons();
      t8 = _this.get$obscured();
      t9 = _this.get$pressureMin();
      t10 = _this.get$pressureMax();
      t11 = _this.get$distance();
      t12 = _this.get$distanceMax();
      t13 = _this.get$size();
      t14 = _this.get$radiusMajor();
      t15 = _this.get$radiusMinor();
      t16 = _this.get$radiusMin();
      t17 = _this.get$radiusMax();
      t18 = _this.get$orientation();
      t19 = _this.get$tilt();
      t20 = _this.get$embedderId();
      return A.PointerCancelEvent$(t7, t5, t11, t12, t20, t4, t8, t18, t3, t6, t10, t9, t14, t17, t16, t15, t13, t19, t2, t1).transformed$1(_this.get$transform());
    },
    $isDiagnosticable: 1,
    $isPointerEvent: 1,
    $is_PointerEvent_Object_Diagnosticable: 1
  };
  A.PointerCancelEvent.prototype = {
    transformed$1(transform) {
      var t1, _this = this;
      type$.nullable_Matrix4._as(transform);
      if (transform == null || C.boolConversionCheck(transform.$eq(0, _this.transform)))
        return _this;
      t1 = type$.nullable_PointerCancelEvent._as(_this.original);
      return A._TransformedPointerCancelEvent$(t1 == null ? _this : t1, transform);
    },
    $is_PointerEventDescription: 1,
    $is_CopyPointerCancelEvent: 1
  };
  A._TransformedPointerCancelEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(type$.nullable_Matrix4._as(transform));
    },
    $is_CopyPointerCancelEvent: 1,
    $isPointerCancelEvent: 1,
    $is_PointerCancelEvent_PointerEvent__PointerEventDescription: 1,
    $is_PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform() {
      return this.transform;
    }
  };
  A._PointerAddedEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerAddedEvent: 1};
  A._PointerCancelEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerCancelEvent: 1};
  A._PointerDownEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerDownEvent: 1};
  A._PointerEnterEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerEnterEvent: 1};
  A._PointerEvent_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A._PointerExitEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerExitEvent: 1};
  A._PointerHoverEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerHoverEvent: 1};
  A._PointerMoveEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerMoveEvent: 1};
  A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerPanZoomEndEvent: 1};
  A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerPanZoomStartEvent: 1};
  A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerPanZoomUpdateEvent: 1};
  A._PointerRemovedEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerRemovedEvent: 1};
  A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerScaleEvent: 1};
  A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerScrollEvent: 1};
  A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerScrollInertiaCancelEvent: 1};
  A._PointerSignalEvent_PointerEvent__RespondablePointerEvent.prototype = {$is_RespondablePointerEvent: 1};
  A._PointerUpEvent_PointerEvent__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, t2, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.position;
      t2 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", t1, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      t1 = _this.delta;
      properties.add$1(0, D.DiagnosticsProperty$("delta", t1, true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, t1, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t2));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.pointer, E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.kind, E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.device, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.buttons, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.down, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.pressure, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.pressureMin, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.pressureMax, 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.distance, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.distanceMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.size, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.radiusMajor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.radiusMinor, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.radiusMin, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.radiusMax, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.orientation, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.tilt, 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.platformData, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.obscured));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.synthesized));
      properties.add$1(0, D.IntProperty$("embedderId", _this.embedderId, 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.viewId, 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent.prototype = {$is_PointerEventDescription: 1, $is_CopyPointerUpEvent: 1};
  A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent.prototype = {$is_CopyPointerAddedEvent: 1};
  A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent.prototype = {$is_CopyPointerCancelEvent: 1};
  A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent.prototype = {$is_CopyPointerDownEvent: 1};
  A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent.prototype = {$is_CopyPointerEnterEvent: 1};
  A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable.prototype = {};
  A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription.prototype = {
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null,
        _s8_ = "obscured",
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = type$.Offset;
      properties.add$1(0, D.DiagnosticsProperty$("position", _this.get$position(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("localPosition", _this.get$localPosition(), true, _this.get$position(), _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("delta", _this.get$delta(), true, E.Offset_0_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("localDelta", _this.get$localDelta(), true, _this.get$delta(), _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.get$timeStamp(), true, F.Duration_0, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.IntProperty$("pointer", _this.get$pointer(), E.C__NoDefaultValue, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.EnumProperty$("kind", _this.get$kind(), E.C__NoDefaultValue, E.DiagnosticLevel_2, type$.PointerDeviceKind));
      properties.add$1(0, D.IntProperty$("device", _this.get$device(), 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("buttons", _this.get$buttons(), 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.DiagnosticsProperty$("down", _this.get$down(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_2, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
      properties.add$1(0, D.DoubleProperty$("pressure", _this.get$pressure(), 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMin", _this.get$pressureMin(), 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("pressureMax", _this.get$pressureMax(), 1, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distance", _this.get$distance(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMin", _this.get$distanceMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("distanceMax", _this.get$distanceMax(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("size", _this.get$size(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMajor", _this.get$radiusMajor(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMinor", _this.get$radiusMinor(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMin", _this.get$radiusMin(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("radiusMax", _this.get$radiusMax(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("orientation", _this.get$orientation(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.DoubleProperty$("tilt", _this.get$tilt(), 0, _null, E.DiagnosticLevel_2, _null, _null));
      properties.add$1(0, D.IntProperty$("platformData", _this.get$platformData(), 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.FlagProperty$(_s8_, _null, _null, _s8_, E.DiagnosticLevel_2, false, _this.get$obscured()));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_2, false, _this.get$synthesized()));
      properties.add$1(0, D.IntProperty$("embedderId", _this.get$embedderId(), 0, _null, E.DiagnosticLevel_2, _null));
      properties.add$1(0, D.IntProperty$("viewId", _this.get$viewId(), 0, _null, E.DiagnosticLevel_2, _null));
    },
    $is_PointerEventDescription: 1
  };
  A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent.prototype = {$is_CopyPointerExitEvent: 1};
  A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent.prototype = {$is_CopyPointerHoverEvent: 1};
  A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent.prototype = {$is_CopyPointerMoveEvent: 1};
  A.__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent.prototype = {$is_CopyPointerPanZoomEndEvent: 1};
  A.__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent.prototype = {$is_CopyPointerPanZoomStartEvent: 1};
  A.__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent.prototype = {$is_CopyPointerPanZoomUpdateEvent: 1};
  A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent.prototype = {$is_CopyPointerRemovedEvent: 1};
  A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent.prototype = {$is_CopyPointerScaleEvent: 1};
  A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent.prototype = {$is_RespondablePointerEvent: 1, $is_CopyPointerScaleEvent: 1};
  A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent.prototype = {$is_CopyPointerScrollEvent: 1};
  A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent.prototype = {$is_CopyPointerScrollInertiaCancelEvent: 1};
  A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent.prototype = {$is_RespondablePointerEvent: 1, $is_CopyPointerScrollInertiaCancelEvent: 1};
  A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent.prototype = {$is_CopyPointerUpEvent: 1};
  A.DeviceGestureSettings.prototype = {
    get$panSlop() {
      var t1 = this.touchSlop;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$mul();
        t1 *= 2;
      } else
        t1 = null;
      return t1;
    },
    get$hashCode(_) {
      return C.Object_hash(this.touchSlop, 23, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), this.get$runtimeType(0))))
        return false;
      return other instanceof A.DeviceGestureSettings && C.boolConversionCheck(J.$eq$(other.touchSlop, this.touchSlop));
    },
    toString$0(_) {
      return "DeviceGestureSettings(touchSlop: " + C.S(this.touchSlop) + ")";
    }
  };
  A._TransformPart.prototype = {};
  A._MatrixTransformPart.prototype = {
    multiply$1(rhs) {
      return this.matrix.multiplied$1(type$.Matrix4._as(rhs));
    }
  };
  A._OffsetTransformPart.prototype = {
    multiply$1(rhs) {
      var t1 = type$.Matrix4._as(rhs).clone$0(),
        t2 = this.offset;
      t1.leftTranslate$2(t2.get$dx(), t2.get$dy());
      return t1;
    }
  };
  A.HitTestResult.prototype = {
    get$path() {
      return this._path;
    },
    _globalizeTransforms$0() {
      var t3, t4, last, t5,
        t1 = this._localTransforms,
        t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isEmpty(t1)))
        return;
      t3 = this._transforms;
      t4 = J.getInterceptor$ax(t3);
      last = t4.get$last(t3);
      for (t5 = t2.get$iterator(t1); C.boolConversionCheck(t5.moveNext$0());) {
        last = t5.get$current().multiply$1(last);
        t4.add$1(t3, last);
      }
      t2.clear$0(t1);
    },
    get$_lastTransform() {
      this._globalizeTransforms$0();
      return J.get$last$ax(this._transforms);
    },
    add$1(_, entry) {
      type$.HitTestEntry_HitTestTarget._as(entry);
      entry.set$_transform(this.get$_lastTransform());
      J.add$1$ax(this._path, entry);
    },
    pushTransform$1(transform) {
      J.add$1$ax(this._localTransforms, A._MatrixTransformPart$(type$.Matrix4._as(transform)));
    },
    pushOffset$1(offset) {
      J.add$1$ax(this._localTransforms, A._OffsetTransformPart$(type$.Offset._as(offset)));
    },
    popTransform$0() {
      var t1 = this._localTransforms,
        t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isNotEmpty(t1)))
        t2.removeLast$0(t1);
      else
        J.removeLast$0$ax(this._transforms);
    },
    toString$0(_) {
      var t1 = this._path,
        t2 = J.getInterceptor$asx(t1);
      return "HitTestResult(" + C.S(C.boolConversionCheck(t2.get$isEmpty(t1)) ? "<empty path>" : t2.join$1(t1, ", ")) + ")";
    }
  };
  A.PointerRouter.prototype = {
    addRoute$3(pointer, route, transform) {
      C._asInt(pointer);
      type$.void_Function_PointerEvent._as(route);
      type$.nullable_Matrix4._as(transform);
      this._routeMap.putIfAbsent$2(pointer, new A.PointerRouter_addRoute_closure()).$indexSet(0, route, transform);
    },
    removeRoute$2(pointer, route) {
      var t1, t2, t3;
      C._asInt(pointer);
      type$.void_Function_PointerEvent._as(route);
      t1 = this._routeMap;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, pointer);
      t3.toString;
      t3.remove$1(0, route);
      if (C.boolConversionCheck(t3.get$isEmpty(t3)))
        t2.remove$1(t1, pointer);
    },
    addGlobalRoute$1(route) {
      J.$indexSet$ax(this._globalRoutes, type$.void_Function_PointerEvent._as(route), null);
    },
    _dispatch$3($event, route, transform) {
      var exception, stack, collector, exception0;
      $event = type$.PointerEvent._as($event);
      type$.void_Function_PointerEvent._as(route);
      type$.nullable_Matrix4._as(transform);
      try {
        $event = $event.transformed$1(transform);
        route.call$1($event);
      } catch (exception0) {
        exception = C.unwrapException(exception0);
        stack = C.getTraceFromException(exception0);
        collector = null;
        D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while routing a pointer event"), exception, collector, "gesture library", false, stack));
      }
    },
    route$1($event) {
      var routes, t1, t2, t3, copiedGlobalRoutes, _this = this;
      type$.PointerEvent._as($event);
      routes = J.$index$asx(_this._routeMap, $event.get$pointer());
      t1 = _this._globalRoutes;
      t2 = type$.void_Function_PointerEvent;
      t3 = type$.nullable_Matrix4;
      copiedGlobalRoutes = C.LinkedHashMap_LinkedHashMap$of(t1, t2, t3);
      if (routes != null)
        _this._dispatchEventToRoutes$3($event, routes, C.LinkedHashMap_LinkedHashMap$of(routes, t2, t3));
      _this._dispatchEventToRoutes$3($event, t1, copiedGlobalRoutes);
    },
    _dispatchEventToRoutes$3($event, referenceRoutes, copiedRoutes) {
      var t1;
      type$.PointerEvent._as($event);
      t1 = type$.Map_of_void_Function_PointerEvent_and_nullable_Matrix4;
      t1._as(referenceRoutes);
      t1._as(copiedRoutes).forEach$1(0, new A.PointerRouter__dispatchEventToRoutes_closure(this, referenceRoutes, $event));
    }
  };
  A.PointerSignalResolver.prototype = {
    resolve$1($event) {
      var exception, stack, collector, t1, t2, exception0, _this = this;
      type$.PointerSignalEvent._as($event);
      t1 = _this._firstRegisteredCallback;
      if (t1 == null) {
        $event.respond$1$allowPlatformDefault(true);
        return;
      }
      try {
        t2 = _this._currentEvent;
        t2.toString;
        t1.call$1(t2);
      } catch (exception0) {
        exception = C.unwrapException(exception0);
        stack = C.getTraceFromException(exception0);
        collector = null;
        D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while resolving a PointerSignalEvent"), exception, collector, "gesture library", false, stack));
      }
      _this.set$_firstRegisteredCallback(null);
      _this._currentEvent = null;
    },
    set$_firstRegisteredCallback(_firstRegisteredCallback) {
      this._firstRegisteredCallback = type$.nullable_void_Function_PointerSignalEvent._as(_firstRegisteredCallback);
    }
  };
  A.PointerEventResampler.prototype = {
    _toHoverEvent$5($event, position, delta, timeStamp, buttons) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      type$.PointerEvent._as($event);
      t1 = type$.Offset;
      t1._as(position);
      t1._as(delta);
      type$.Duration._as(timeStamp);
      C._asInt(buttons);
      t1 = $event.get$viewId();
      t2 = $event.get$kind();
      t3 = $event.get$device();
      t4 = $event.get$buttons();
      t5 = $event.get$obscured();
      t6 = $event.get$pressureMin();
      t7 = $event.get$pressureMax();
      t8 = $event.get$distance();
      t9 = $event.get$distanceMax();
      t10 = $event.get$size();
      t11 = $event.get$radiusMajor();
      t12 = $event.get$radiusMinor();
      t13 = $event.get$radiusMin();
      t14 = $event.get$radiusMax();
      t15 = $event.get$orientation();
      t16 = $event.get$tilt();
      t17 = $event.get$synthesized();
      return A.PointerHoverEvent$(t4, delta, t3, t8, t9, $event.get$embedderId(), t2, t5, t15, position, t7, t6, t11, t14, t13, t12, t10, t17, t16, timeStamp, t1);
    },
    _toMoveEvent$6($event, position, delta, pointerIdentifier, timeStamp, buttons) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      type$.PointerEvent._as($event);
      t1 = type$.Offset;
      t1._as(position);
      t1._as(delta);
      C._asInt(pointerIdentifier);
      type$.Duration._as(timeStamp);
      C._asInt(buttons);
      t1 = $event.get$viewId();
      t2 = $event.get$kind();
      t3 = $event.get$device();
      t4 = $event.get$obscured();
      t5 = $event.get$pressure();
      t6 = $event.get$pressureMin();
      t7 = $event.get$pressureMax();
      t8 = $event.get$distanceMax();
      t9 = $event.get$size();
      t10 = $event.get$radiusMajor();
      t11 = $event.get$radiusMinor();
      t12 = $event.get$radiusMin();
      t13 = $event.get$radiusMax();
      t14 = $event.get$orientation();
      t15 = $event.get$tilt();
      t16 = $event.get$platformData();
      t17 = $event.get$synthesized();
      return A.PointerMoveEvent$(buttons, delta, t3, t8, $event.get$embedderId(), t2, t4, t14, t16, pointerIdentifier, position, t5, t7, t6, t10, t13, t12, t11, t9, t17, t15, timeStamp, t1);
    },
    _toMoveOrHoverEvent$7($event, position, delta, pointerIdentifier, timeStamp, isDown, buttons) {
      var t1;
      type$.PointerEvent._as($event);
      t1 = type$.Offset;
      t1._as(position);
      t1._as(delta);
      C._asInt(pointerIdentifier);
      type$.Duration._as(timeStamp);
      C._asBool(isDown);
      C._asInt(buttons);
      return isDown ? this._toMoveEvent$6($event, position, delta, pointerIdentifier, timeStamp, buttons) : this._toHoverEvent$5($event, position, delta, timeStamp, buttons);
    },
    _positionAt$1(sampleTime) {
      var t1, x, y, nextTimeStamp, lastTimeStamp, interval, scalar, lastX, lastY, _this = this, _null = null;
      type$.Duration._as(sampleTime);
      t1 = _this._resampler$_next;
      x = t1 == null ? _null : t1.get$position().get$dx();
      if (x == null)
        x = 0;
      t1 = _this._resampler$_next;
      y = t1 == null ? _null : t1.get$position().get$dy();
      if (y == null)
        y = 0;
      t1 = _this._resampler$_next;
      nextTimeStamp = t1 == null ? _null : t1.get$timeStamp();
      if (nextTimeStamp == null)
        nextTimeStamp = F.Duration_0;
      t1 = _this._resampler$_last;
      lastTimeStamp = t1 == null ? _null : t1.get$timeStamp();
      if (lastTimeStamp == null)
        lastTimeStamp = F.Duration_0;
      if (C.boolConversionCheck(nextTimeStamp.$gt(0, sampleTime)) && C.boolConversionCheck(nextTimeStamp.$gt(0, lastTimeStamp))) {
        interval = J.toDouble$0$n(nextTimeStamp.$sub(0, lastTimeStamp).get$inMicroseconds());
        t1 = J.toDouble$0$n(sampleTime.$sub(0, lastTimeStamp).get$inMicroseconds());
        if (typeof t1 !== "number")
          return t1.$div();
        scalar = t1 / interval;
        t1 = _this._resampler$_last;
        lastX = t1 == null ? _null : t1.get$position().get$dx();
        if (lastX == null)
          lastX = 0;
        t1 = _this._resampler$_last;
        lastY = t1 == null ? _null : t1.get$position().get$dy();
        if (lastY == null)
          lastY = 0;
        x = lastX + (x - lastX) * scalar;
        y = lastY + (y - lastY) * scalar;
      }
      return D.Offset$(x, y);
    },
    _processPointerEvents$1(sampleTime) {
      var it, $event, t1, nextTimeStamp, _this = this;
      type$.Duration._as(sampleTime);
      it = J.get$iterator$ax(_this._queuedEvents);
      for (; C.boolConversionCheck(it.moveNext$0());) {
        $event = it.get$current();
        if (C.boolConversionCheck(J.$le$n($event.get$timeStamp(), sampleTime)) || _this._resampler$_last == null) {
          _this._resampler$_next = _this._resampler$_last = $event;
          continue;
        }
        t1 = _this._resampler$_next;
        nextTimeStamp = t1 == null ? null : t1.get$timeStamp();
        if (C.boolConversionCheck((nextTimeStamp == null ? F.Duration_0 : nextTimeStamp).$lt(0, sampleTime))) {
          _this._resampler$_next = $event;
          break;
        }
      }
    },
    _dequeueAndSampleNonHoverOrMovePointerEventsUntil$3(sampleTime, nextSampleTime, callback) {
      var t2, it, t3, t4, t5, t6, endTime, $event, wasTracked, wasDown, hadButtons, position, pointerIdentifier, _this = this,
        t1 = type$.Duration;
      t1._as(sampleTime);
      t1._as(nextSampleTime);
      type$.void_Function_PointerEvent._as(callback);
      t1 = _this._queuedEvents;
      t2 = J.getInterceptor$ax(t1);
      it = t2.get$iterator(t1);
      for (t3 = type$.PointerMoveEvent, t4 = type$.PointerUpEvent, t5 = type$.PointerRemovedEvent, t6 = type$.PointerHoverEvent, endTime = sampleTime; C.boolConversionCheck(it.moveNext$0());) {
        $event = it.get$current();
        if (C.boolConversionCheck(J.$gt$n($event.get$timeStamp(), sampleTime))) {
          if (C.boolConversionCheck(J.$ge$n($event.get$timeStamp(), nextSampleTime)))
            break;
          if (t4._is($event) || t5._is($event)) {
            endTime = $event.get$timeStamp();
            continue;
          }
          if (!t3._is($event) && !t6._is($event))
            break;
        }
      }
      for (; C.boolConversionCheck(t2.get$isNotEmpty(t1));) {
        $event = t2.get$first(t1);
        if (C.boolConversionCheck(J.$gt$n($event.get$timeStamp(), endTime)))
          break;
        wasTracked = _this._isTracked;
        wasDown = _this._isDown;
        hadButtons = _this._hasButtons;
        _this._isTracked = !t5._is($event);
        _this.set$_isDown($event.get$down());
        _this.set$_hasButtons($event.get$buttons());
        position = _this._positionAt$1(sampleTime);
        if (C.boolConversionCheck(_this._isTracked) && !wasTracked)
          _this._resampler$_position = position;
        pointerIdentifier = $event.get$pointer();
        _this._pointerIdentifier = pointerIdentifier;
        if (!t3._is($event) && !t6._is($event)) {
          if (!C.boolConversionCheck(position.$eq(0, _this._resampler$_position))) {
            callback.call$1(_this._toMoveOrHoverEvent$7($event, position, position.$sub(0, _this._resampler$_position), _this._pointerIdentifier, sampleTime, wasDown, hadButtons));
            _this._resampler$_position = position;
          }
          callback.call$1($event.copyWith$4$delta$pointer$position$timeStamp(E.Offset_0_0, pointerIdentifier, position, sampleTime));
        }
        t1.removeFirst$0();
      }
    },
    _samplePointerPosition$2(sampleTime, callback) {
      var position, next, _this = this;
      type$.Duration._as(sampleTime);
      type$.void_Function_PointerEvent._as(callback);
      position = _this._positionAt$1(sampleTime);
      next = _this._resampler$_next;
      if (!C.boolConversionCheck(position.$eq(0, _this._resampler$_position)) && next != null) {
        callback.call$1(_this._toMoveOrHoverEvent$7(next, position, position.$sub(0, _this._resampler$_position), _this._pointerIdentifier, sampleTime, _this._isDown, _this._hasButtons));
        _this._resampler$_position = position;
      }
    },
    addEvent$1($event) {
      J.add$1$ax(this._queuedEvents, type$.PointerEvent._as($event));
    },
    sample$3(sampleTime, nextSampleTime, callback) {
      var _this = this,
        t1 = type$.Duration;
      t1._as(sampleTime);
      t1._as(nextSampleTime);
      type$.void_Function_PointerEvent._as(callback);
      _this._processPointerEvents$1(sampleTime);
      _this._dequeueAndSampleNonHoverOrMovePointerEventsUntil$3(sampleTime, nextSampleTime, callback);
      if (C.boolConversionCheck(_this._isTracked))
        _this._samplePointerPosition$2(sampleTime, callback);
    },
    stop$1(callback) {
      var t1, t2, _this = this;
      type$.void_Function_PointerEvent._as(callback);
      for (t1 = _this._queuedEvents, t2 = J.getInterceptor$asx(t1); C.boolConversionCheck(t2.get$isNotEmpty(t1));)
        callback.call$1(t1.removeFirst$0());
      _this._pointerIdentifier = 0;
      _this._isTracked = _this._isDown = false;
      _this._resampler$_position = E.Offset_0_0;
      _this._resampler$_last = _this._resampler$_next = null;
    },
    get$hasPendingEvents() {
      return J.get$isNotEmpty$asx(this._queuedEvents);
    },
    get$isDown() {
      return this._isDown;
    },
    set$_isDown(_isDown) {
      this._isDown = C._asBool(_isDown);
    },
    set$_hasButtons(_hasButtons) {
      this._hasButtons = C._asInt(_hasButtons);
    }
  };
  A.PaintingBinding.prototype = {
    get$imageCache() {
      return this.get$_imageCache();
    },
    get$_imageCache() {
      return this.PaintingBinding___PaintingBinding__imageCache_A;
    },
    set$_imageCache(value) {
      this.PaintingBinding___PaintingBinding__imageCache_A = type$.ImageCache._as(value);
    },
    createImageCache$0() {
      return A.ImageCache$();
    },
    get$systemFonts() {
      return this.PaintingBinding__systemFonts;
    },
    $isBindingBase: 1,
    $isSchedulerBinding: 1,
    $isServicesBinding: 1
  };
  A._SystemFontsNotifier.prototype = {
    notifyListeners$0() {
      for (var t1 = J.get$iterator$ax(this._systemFontsCallbacks); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().call$0();
    },
    addListener$1(listener) {
      J.add$1$ax(this._systemFontsCallbacks, type$.void_Function._as(listener));
    },
    removeListener$1(listener) {
      J.remove$1$ax(this._systemFontsCallbacks, type$.void_Function._as(listener));
    }
  };
  A.ImageCache.prototype = {
    clear$0(_) {
      var t5, _this = this,
        t1 = _this._pendingImages,
        t2 = J.getInterceptor$asx(t1),
        t3 = _this._image_cache$_cache,
        t4 = J.getInterceptor$asx(t3);
      A.Timeline_instantSync("ImageCache.clear", C.LinkedHashMap_LinkedHashMap$_literal(["pendingImages", t2.get$length(t1), "keepAliveImages", t4.get$length(t3), "liveImages", J.get$length$asx(_this._liveImages), "currentSizeInBytes", _this._currentSizeBytes], type$.String, type$.dynamic));
      for (t5 = J.get$iterator$ax(t3.get$values()); C.boolConversionCheck(t5.moveNext$0());)
        t5.get$current().dispose$0();
      t4.clear$0(t3);
      for (t3 = J.get$iterator$ax(t1.get$values()); C.boolConversionCheck(t3.moveNext$0());)
        t3.get$current().removeListener$0();
      t2.clear$0(t1);
      _this._currentSizeBytes = 0;
    }
  };
  A.RendererBinding.prototype = {
    get$_binding1$_manifold() {
      var result,
        value = this.RendererBinding___RendererBinding__manifold_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = A._BindingPipelineManifold$(this);
        value !== $ && C.throwLateFieldADI("_manifold");
        this.RendererBinding___RendererBinding__manifold_FI = result;
        value = result;
      }
      return value;
    },
    get$mouseTracker() {
      var t1 = this.RendererBinding__mouseTracker;
      t1.toString;
      return t1;
    },
    createRootPipelineOwner$0() {
      return A._DefaultRootPipelineOwner$();
    },
    get$rootPipelineOwner() {
      return this.get$_rootPipelineOwner();
    },
    get$_rootPipelineOwner() {
      return this.RendererBinding___RendererBinding__rootPipelineOwner_A;
    },
    set$_rootPipelineOwner(value) {
      this.RendererBinding___RendererBinding__rootPipelineOwner_A = type$.PipelineOwner._as(value);
    },
    get$renderViews() {
      return this.RendererBinding__viewIdToRenderView.get$values();
    },
    addRenderView$1(view) {
      type$.RenderView._as(view);
      J.$indexSet$ax(this.RendererBinding__viewIdToRenderView, view.get$flutterView().viewId, view);
      view.set$configuration(this.createViewConfigurationFor$1(view));
    },
    removeRenderView$1(view) {
      J.remove$1$ax(this.RendererBinding__viewIdToRenderView, type$.RenderView._as(view).get$flutterView().viewId);
    },
    createViewConfigurationFor$1(renderView) {
      return A.ViewConfiguration_ViewConfiguration$fromView(type$.RenderView._as(renderView).get$flutterView());
    },
    createSceneBuilder$0() {
      return D.SceneBuilder_SceneBuilder();
    },
    createPictureRecorder$0() {
      return A.PictureRecorder_PictureRecorder();
    },
    createCanvas$1(recorder) {
      return A.Canvas_Canvas(type$.PictureRecorder._as(recorder));
    },
    handleMetricsChanged$0() {
      var t1, forceFrame, t2;
      for (t1 = J.get$iterator$ax(this.get$renderViews()), forceFrame = false; C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        forceFrame = forceFrame || t2.get$child() != null;
        t2.set$configuration(this.createViewConfigurationFor$1(t2));
      }
      if (forceFrame)
        this.scheduleForcedFrame$0();
    },
    handleTextScaleFactorChanged$0() {
    },
    handlePlatformBrightnessChanged$0() {
    },
    initMouseTracker$0() {
      var t1 = this.RendererBinding__mouseTracker;
      if (t1 != null)
        t1.dispose$0();
      t1 = A.MouseTracker$(new A.RendererBinding_initMouseTracker_closure(this));
      this.RendererBinding__mouseTracker = t1;
    },
    performSemanticsAction$1(action) {
      var t1;
      type$.SemanticsActionEvent._as(action);
      t1 = J.$index$asx(this.RendererBinding__viewIdToRenderView, action.viewId);
      if (t1 != null) {
        t1 = t1.get$owner();
        if (t1 != null) {
          t1 = t1.get$semanticsOwner();
          if (t1 != null)
            t1.performAction$3(action.nodeId, action.type, action.$arguments);
        }
      }
    },
    _handleWebFirstFrame$1(_) {
      type$.Duration._as(_);
      B.MethodChannel_KD4.invokeMethod$1$1("first-frame", type$.void);
    },
    _handlePersistentFrameCallback$1(timeStamp) {
      type$.Duration._as(timeStamp);
      this.drawFrame$0();
      this._scheduleMouseTrackerUpdate$0();
    },
    _scheduleMouseTrackerUpdate$0() {
      D.SchedulerBinding_instance().addPostFrameCallback$2$debugLabel(new A.RendererBinding__scheduleMouseTrackerUpdate_closure(this), "RendererBinding.mouseTrackerUpdate");
    },
    get$sendFramesToEngine() {
      return C.boolConversionCheck(this.RendererBinding__firstFrameSent) || C.boolConversionCheck(J.$eq$(this.RendererBinding__firstFrameDeferredCount, 0));
    },
    deferFirstFrame$0() {
      var t1 = this.RendererBinding__firstFrameDeferredCount;
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$_firstFrameDeferredCount(t1 + 1);
    },
    allowFirstFrame$0() {
      var _this = this,
        t1 = _this.RendererBinding__firstFrameDeferredCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_firstFrameDeferredCount(t1 - 1);
      if (!C.boolConversionCheck(_this.RendererBinding__firstFrameSent))
        _this.scheduleWarmUpFrame$0();
    },
    drawFrame$0() {
      var t1, _this = this;
      _this.get$rootPipelineOwner().flushLayout$0();
      _this.get$rootPipelineOwner().flushCompositingBits$0();
      _this.get$rootPipelineOwner().flushPaint$0();
      if (C.boolConversionCheck(_this.get$sendFramesToEngine())) {
        for (t1 = J.get$iterator$ax(_this.get$renderViews()); C.boolConversionCheck(t1.moveNext$0());)
          t1.get$current().compositeFrame$0();
        _this.get$rootPipelineOwner().flushSemantics$0();
        _this.RendererBinding__firstFrameSent = true;
      }
    },
    set$_firstFrameDeferredCount(_firstFrameDeferredCount) {
      this.RendererBinding__firstFrameDeferredCount = C._asInt(_firstFrameDeferredCount);
    },
    $isBindingBase: 1,
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isSchedulerBinding: 1,
    $isSemanticsBinding: 1,
    $isServicesBinding: 1
  };
  A._BindingPipelineManifold.prototype = {
    _BindingPipelineManifold$1(_binding) {
      D.ChangeNotifier_maybeDispatchObjectCreation(this);
      this._binding1$_binding.addSemanticsEnabledListener$1(this.get$notifyListeners());
    },
    requestVisualUpdate$0() {
      this._binding1$_binding.ensureVisualUpdate$0();
    },
    get$semanticsEnabled() {
      return this._binding1$_binding.get$semanticsEnabled();
    },
    $isPipelineManifold: 1
  };
  A._DefaultRootPipelineOwner.prototype = {
    set$rootNode(_) {
      type$.nullable_RenderObject._as(_);
    }
  };
  A.BoxHitTestResult.prototype = {
    addWithPaintOffset$3$hitTest$offset$position(hitTest, offset, position) {
      var t1, transformedPosition, isHit;
      type$.nullable_Offset._as(offset);
      type$.Offset._as(position);
      type$.bool_Function_BoxHitTestResult_Offset._as(hitTest);
      t1 = offset == null;
      transformedPosition = t1 ? position : position.$sub(0, offset);
      t1 = !t1;
      if (t1)
        this.pushOffset$1(offset.$negate(0));
      isHit = hitTest.call$2(this, transformedPosition);
      if (t1)
        this.popTransform$0();
      return isHit;
    },
    addWithRawTransform$3$hitTest$position$transform(hitTest, position, transform) {
      var t1, transformedPosition, isHit;
      type$.nullable_Matrix4._as(transform);
      type$.Offset._as(position);
      type$.bool_Function_BoxHitTestResult_Offset._as(hitTest);
      t1 = transform == null;
      transformedPosition = t1 ? position : D.MatrixUtils_transformPoint(transform, position);
      t1 = !t1;
      if (t1)
        this.pushTransform$1(transform);
      isHit = hitTest.call$2(this, transformedPosition);
      if (t1)
        this.popTransform$0();
      return isHit;
    }
  };
  A._MouseState.prototype = {
    get$annotations() {
      return this._annotations;
    },
    replaceAnnotations$1(value) {
      var previous;
      type$.LinkedHashMap_MouseTrackerAnnotation_Matrix4._as(value);
      previous = this._annotations;
      this.set$_annotations(value);
      return previous;
    },
    get$latestEvent() {
      return this._latestEvent;
    },
    replaceLatestEvent$1(value) {
      var previous;
      type$.PointerEvent._as(value);
      previous = this._latestEvent;
      this._latestEvent = value;
      return previous;
    },
    get$device() {
      return this.get$latestEvent().get$device();
    },
    toString$0(_) {
      var t1 = C.S(D.describeIdentity(this.get$latestEvent())),
        t2 = C.S(J.get$length$asx(this.get$annotations()));
      return C.S(D.describeIdentity(this)) + "(" + ("latestEvent: " + t1) + ", " + ("annotations: [list of " + t2 + "]") + ")";
    },
    set$_annotations(_annotations) {
      this._annotations = type$.LinkedHashMap_MouseTrackerAnnotation_Matrix4._as(_annotations);
    }
  };
  A._MouseTrackerUpdateDetails.prototype = {
    get$device() {
      var t1 = this.previousEvent;
      return (t1 == null ? this.triggeringEvent : t1).get$device();
    },
    get$latestEvent() {
      var t1,
        result = this.triggeringEvent;
      if (result == null) {
        t1 = this.previousEvent;
        t1.toString;
        result = t1;
      }
      return result;
    },
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      properties.add$1(0, D.IntProperty$("device", _this.get$device(), E.C__NoDefaultValue, _null, E.DiagnosticLevel_3, _null));
      t1 = type$.PointerEvent;
      properties.add$1(0, D.DiagnosticsProperty$("previousEvent", _this.previousEvent, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("triggeringEvent", _this.triggeringEvent, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      t1 = type$.Map_MouseTrackerAnnotation_Matrix4;
      properties.add$1(0, D.DiagnosticsProperty$("lastAnnotations", _this.lastAnnotations, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("nextAnnotations", _this.nextAnnotations, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
    },
    $isDiagnosticable: 1
  };
  A.MouseTracker.prototype = {
    _monitorMouseConnection$1(task) {
      var mouseWasConnected;
      type$.void_Function._as(task);
      mouseWasConnected = this.get$mouseIsConnected();
      task.call$0();
      if (mouseWasConnected !== this.get$mouseIsConnected())
        this.notifyListeners$0();
    },
    _deviceUpdatePhase$1(task) {
      type$.void_Function._as(task).call$0();
    },
    _hitTestInViewResultToAnnotations$1(result) {
      var t1, annotations, t2, t3, target;
      type$.HitTestResult._as(result);
      t1 = type$.MouseTrackerAnnotation;
      annotations = C.LinkedHashMap_LinkedHashMap(t1, type$.Matrix4);
      for (t2 = J.get$iterator$ax(result.get$path()); C.boolConversionCheck(t2.moveNext$0());) {
        t3 = t2.get$current();
        target = t3.target;
        if (t1._is(target)) {
          t3 = t3.get$transform();
          t3.toString;
          annotations.$indexSet(0, target, t3);
        }
      }
      return annotations;
    },
    _findAnnotations$1(state) {
      var globalPosition, device, viewId;
      type$._MouseState._as(state);
      globalPosition = state.get$latestEvent().get$position();
      device = state.get$device();
      viewId = state.get$latestEvent().get$viewId();
      if (!C.boolConversionCheck(this._mouseStates.containsKey$1(device)))
        return C.LinkedHashMap_LinkedHashMap(type$.MouseTrackerAnnotation, type$.Matrix4);
      return this._hitTestInViewResultToAnnotations$1(this._hitTestInView.call$2(globalPosition, viewId));
    },
    _handleDeviceUpdate$1(details) {
      type$._MouseTrackerUpdateDetails._as(details);
      A.MouseTracker__handleDeviceUpdateMouseEvents(details);
      this._mouseCursorMixin.handleDeviceCursorUpdate$3(details.get$device(), details.triggeringEvent, J.map$1$1$ax(details.nextAnnotations.get$keys(), new A.MouseTracker__handleDeviceUpdate_closure(), type$.MouseCursor));
    },
    get$mouseIsConnected() {
      return J.get$isNotEmpty$asx(this._mouseStates);
    },
    updateWithEvent$2($event, hitTestResult) {
      var viewId, device, existingState, _this = this, t1 = {};
      type$.PointerEvent._as($event);
      type$.nullable_HitTestResult._as(hitTestResult);
      if (!C.boolConversionCheck(J.$eq$($event.get$kind(), E.PointerDeviceKind_1)) && !C.boolConversionCheck(J.$eq$($event.get$kind(), E.PointerDeviceKind_2)))
        return;
      if (type$.PointerSignalEvent._is($event))
        return;
      t1.result = null;
      if (type$.PointerRemovedEvent._is($event))
        t1.result = A.HitTestResult$();
      else {
        viewId = $event.get$viewId();
        t1.result = hitTestResult == null ? _this._hitTestInView.call$2($event.get$position(), viewId) : hitTestResult;
      }
      device = $event.get$device();
      existingState = J.$index$asx(_this._mouseStates, device);
      if (!C.boolConversionCheck(A.MouseTracker__shouldMarkStateDirty(existingState, $event)))
        return;
      _this._monitorMouseConnection$1(new A.MouseTracker_updateWithEvent_closure(t1, _this, existingState, $event, device));
    },
    updateAllDevices$0() {
      this._deviceUpdatePhase$1(new A.MouseTracker_updateAllDevices_closure(this));
    }
  };
  A.__MouseTrackerUpdateDetails_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A.PipelineOwner.prototype = {
    PipelineOwner$4$onNeedVisualUpdate$onSemanticsOwnerCreated$onSemanticsOwnerDisposed$onSemanticsUpdate(onNeedVisualUpdate, onSemanticsOwnerCreated, onSemanticsOwnerDisposed, onSemanticsUpdate) {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type_PipelineOwner_AdK), "package:flutter/rendering.dart", this);
    },
    requestVisualUpdate$0() {
      var t1 = this._manifold;
      if (t1 != null)
        t1.requestVisualUpdate$0();
    },
    get$rootNode() {
      return this._rootNode;
    },
    set$rootNode(value) {
      var t1, _this = this;
      type$.nullable_RenderObject._as(value);
      if (C.boolConversionCheck(J.$eq$(_this._rootNode, value)))
        return;
      t1 = _this._rootNode;
      if (t1 != null)
        t1.detach$0();
      _this._rootNode = value;
      if (value != null)
        value.attach$1(_this);
    },
    flushLayout$0() {
      var dirtyNodes, i, node, child, t1, t2, t3, _this = this;
      D.FlutterTimeline_startSync("LAYOUT" + C.S(_this.get$_debugRootSuffixForTimelineEventNames()), null);
      try {
        for (t1 = type$.JSArray_RenderObject; C.boolConversionCheck(J.get$isNotEmpty$asx(_this._nodesNeedingLayout));) {
          dirtyNodes = _this._nodesNeedingLayout;
          _this.set$_nodesNeedingLayout(C._setArrayType([], t1));
          J.sort$1$ax(dirtyNodes, new A.PipelineOwner_flushLayout_closure());
          i = 0;
          while (true) {
            t2 = i;
            t3 = J.get$length$asx(dirtyNodes);
            if (typeof t2 !== "number")
              return t2.$lt();
            if (typeof t3 !== "number")
              return C.iae(t3);
            if (!(t2 < t3))
              break;
            if (C.boolConversionCheck(_this._shouldMergeDirtyNodes)) {
              _this._shouldMergeDirtyNodes = false;
              if (C.boolConversionCheck(J.get$isNotEmpty$asx(_this._nodesNeedingLayout))) {
                J.addAll$1$ax(_this._nodesNeedingLayout, J.getRange$2$ax(dirtyNodes, i, J.get$length$asx(dirtyNodes)));
                break;
              }
            }
            node = J.$index$asx(dirtyNodes, i);
            if (C.boolConversionCheck(node._needsLayout) && C.boolConversionCheck(J.$eq$(node.get$owner(), _this)))
              node._layoutWithoutResize$0();
            t2 = i;
            if (typeof t2 !== "number")
              return t2.$add();
            i = t2 + 1;
          }
          _this._shouldMergeDirtyNodes = false;
        }
        for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());) {
          child = t1.get$current();
          child.flushLayout$0();
        }
      } finally {
        _this._shouldMergeDirtyNodes = false;
        D.FlutterTimeline_finishSync();
      }
    },
    flushCompositingBits$0() {
      var t1, t2, t3, t4, _this = this;
      D.FlutterTimeline_startSync("UPDATING COMPOSITING BITS" + C.S(_this.get$_debugRootSuffixForTimelineEventNames()), null);
      t1 = _this._nodesNeedingCompositingBitsUpdate;
      t2 = J.getInterceptor$ax(t1);
      t2.sort$1(t1, new A.PipelineOwner_flushCompositingBits_closure());
      for (t3 = t2.get$iterator(t1); C.boolConversionCheck(t3.moveNext$0());) {
        t4 = t3.get$current();
        if (C.boolConversionCheck(t4._needsCompositingBitsUpdate) && C.boolConversionCheck(J.$eq$(t4.get$owner(), _this)))
          t4._updateCompositingBits$0();
      }
      t2.clear$0(t1);
      for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().flushCompositingBits$0();
      D.FlutterTimeline_finishSync();
    },
    flushPaint$0() {
      var dirtyNodes, node, child, t1, t2, _this = this;
      D.FlutterTimeline_startSync("PAINT" + C.S(_this.get$_debugRootSuffixForTimelineEventNames()), null);
      try {
        dirtyNodes = _this._nodesNeedingPaint;
        _this.set$_nodesNeedingPaint(C._setArrayType([], type$.JSArray_RenderObject));
        for (t1 = dirtyNodes, t2 = J.getInterceptor$ax(t1), t2.sort$1(t1, new A.PipelineOwner_flushPaint_closure()), t1 = t2.get$iterator(t1); C.boolConversionCheck(t1.moveNext$0());) {
          node = t1.get$current();
          if ((C.boolConversionCheck(node._needsPaint) || C.boolConversionCheck(node._needsCompositedLayerUpdate)) && C.boolConversionCheck(J.$eq$(node.get$owner(), _this)))
            if (C.boolConversionCheck(node._layerHandle.get$layer().get$attached()))
              if (C.boolConversionCheck(node._needsPaint))
                D.PaintingContext_repaintCompositedChild(node, false);
              else
                D.PaintingContext_updateLayerProperties(node);
            else
              node._skippedPaintingOnLayer$0();
        }
        for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());) {
          child = t1.get$current();
          child.flushPaint$0();
        }
      } finally {
        D.FlutterTimeline_finishSync();
      }
    },
    get$semanticsOwner() {
      return this._semanticsOwner;
    },
    _updateSemanticsOwner$0() {
      var _this = this,
        t1 = _this._manifold;
      t1 = t1 == null ? null : t1.get$semanticsEnabled();
      t1 = C.boolConversionCheck(t1 == null ? false : t1);
      if (t1) {
        if (_this._semanticsOwner == null) {
          t1 = _this.onSemanticsUpdate;
          t1.toString;
          _this._semanticsOwner = A.SemanticsOwner$(t1);
          t1 = _this.onSemanticsOwnerCreated;
          if (t1 != null)
            t1.call$0();
        }
      } else {
        t1 = _this._semanticsOwner;
        if (t1 != null) {
          t1.dispose$0();
          _this._semanticsOwner = null;
          t1 = _this.onSemanticsOwnerDisposed;
          if (t1 != null)
            t1.call$0();
        }
      }
    },
    flushSemantics$0() {
      var nodesToProcess, node, child, t1, t2, nodesToProcess0, _this = this;
      if (_this._semanticsOwner == null)
        return;
      D.FlutterTimeline_startSync("SEMANTICS" + C.S(_this.get$_debugRootSuffixForTimelineEventNames()), null);
      try {
        t1 = _this._nodesNeedingSemantics;
        t2 = J.getInterceptor$ax(t1);
        nodesToProcess0 = t2.toList$0(t1);
        J.sort$1$ax(nodesToProcess0, new A.PipelineOwner_flushSemantics_closure());
        nodesToProcess = nodesToProcess0;
        t2.clear$0(t1);
        for (t1 = J.get$iterator$ax(nodesToProcess); C.boolConversionCheck(t1.moveNext$0());) {
          node = t1.get$current();
          if (C.boolConversionCheck(node._needsSemanticsUpdate) && C.boolConversionCheck(J.$eq$(node.get$owner(), _this)))
            node._updateSemantics$0();
        }
        _this._semanticsOwner.sendSemanticsUpdate$0();
        for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());) {
          child = t1.get$current();
          child.flushSemantics$0();
        }
      } finally {
        D.FlutterTimeline_finishSync();
      }
    },
    debugDescribeChildren$0() {
      var t2,
        t1 = C._setArrayType([], type$.JSArray_DiagnosticsNode);
      for (t2 = J.get$iterator$ax(this._object$_children); C.boolConversionCheck(t2.moveNext$0());)
        t1.push(t2.get$current().toDiagnosticsNode$0());
      return t1;
    },
    debugFillProperties$1(properties) {
      var _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      this.super$DiagnosticableTreeMixin$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("rootNode", this.get$rootNode(), true, _null, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.RenderObject));
    },
    _debugSetParent$2(child, $parent) {
      type$.PipelineOwner._as(child)._debugParent = type$.nullable_PipelineOwner._as($parent);
      return true;
    },
    get$_debugRootSuffixForTimelineEventNames() {
      return this._debugParent == null ? " (root)" : "";
    },
    attach$1(manifold) {
      var t1, _this = this;
      type$.PipelineManifold._as(manifold);
      _this._manifold = manifold;
      manifold.addListener$1(_this.get$_updateSemanticsOwner());
      _this._updateSemanticsOwner$0();
      for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().attach$1(manifold);
    },
    detach$0() {
      var t1, _this = this;
      _this._manifold.removeListener$1(_this.get$_updateSemanticsOwner());
      _this._manifold = null;
      for (t1 = J.get$iterator$ax(_this._object$_children); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().detach$0();
    },
    adoptChild$1(child) {
      var t1, _this = this;
      type$.PipelineOwner._as(child);
      J.add$1$ax(_this._object$_children, child);
      _this._debugSetParent$2(child, _this);
      t1 = _this._manifold;
      if (t1 != null)
        child.attach$1(t1);
    },
    dropChild$1(child) {
      type$.PipelineOwner._as(child);
      J.remove$1$ax(this._object$_children, child);
      this._debugSetParent$2(child, null);
      if (this._manifold != null)
        child.detach$0();
    },
    dispose$0() {
      var t1, _this = this;
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectDisposed$1$object(_this);
      t1 = _this._semanticsOwner;
      if (t1 != null)
        t1.dispose$0();
      _this._semanticsOwner = null;
      J.clear$0$ax(_this._nodesNeedingLayout);
      J.clear$0$ax(_this._nodesNeedingCompositingBitsUpdate);
      J.clear$0$ax(_this._nodesNeedingPaint);
      J.clear$0$ax(_this._nodesNeedingSemantics);
    },
    set$_nodesNeedingLayout(_nodesNeedingLayout) {
      this._nodesNeedingLayout = type$.List_RenderObject._as(_nodesNeedingLayout);
    },
    set$_nodesNeedingPaint(_nodesNeedingPaint) {
      this._nodesNeedingPaint = type$.List_RenderObject._as(_nodesNeedingPaint);
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1,
    $isDiagnosticableTreeMixin: 1,
    $is_DiagnosticableTree_Object_Diagnosticable: 1
  };
  A._PipelineOwner_Object_DiagnosticableTreeMixin.prototype = {$isDiagnosticable: 1, $isDiagnosticableTree: 1, $isDiagnosticableTreeMixin: 1, $is_DiagnosticableTree_Object_Diagnosticable: 1};
  A.RenderingServiceExtensions.prototype = {
    _enumToString$0() {
      return "RenderingServiceExtensions." + C.S(this._core$_name);
    }
  };
  A.ViewConfiguration.prototype = {
    toMatrix$0() {
      var t1 = this.devicePixelRatio;
      return D.Matrix4_Matrix4$diagonal3Values(t1, t1, 1);
    },
    shouldUpdateMatrix$1(oldConfiguration) {
      type$.ViewConfiguration._as(oldConfiguration);
      if (!C.boolConversionCheck(J.$eq$(oldConfiguration.get$runtimeType(0), this.get$runtimeType(0))))
        return true;
      return !C.boolConversionCheck(J.$eq$(oldConfiguration.devicePixelRatio, this.devicePixelRatio));
    },
    toPhysicalSize$1(logicalSize) {
      return this.physicalConstraints.constrain$1(type$.Size._as(logicalSize).$mul(0, this.devicePixelRatio));
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.ViewConfiguration && C.boolConversionCheck(J.$eq$(other.logicalConstraints, _this.logicalConstraints)) && C.boolConversionCheck(J.$eq$(other.physicalConstraints, _this.physicalConstraints)) && C.boolConversionCheck(J.$eq$(other.devicePixelRatio, _this.devicePixelRatio));
    },
    get$hashCode(_) {
      return C.Object_hash(this.logicalConstraints, this.physicalConstraints, this.devicePixelRatio, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    },
    toString$0(_) {
      return C.S(this.logicalConstraints) + " at " + C.S(D.debugFormatDouble(this.devicePixelRatio)) + "x";
    }
  };
  A.RenderView.prototype = {
    RenderView$3$child$configuration$view(child, configuration, view) {
      if (configuration != null)
        this.set$configuration(configuration);
      this.set$child(child);
    },
    get$size() {
      return this._view0$_size;
    },
    get$configuration() {
      var t1 = this._view0$_configuration;
      t1.toString;
      return t1;
    },
    set$configuration(value) {
      var oldConfiguration, _this = this;
      type$.ViewConfiguration._as(value);
      if (C.boolConversionCheck(J.$eq$(_this._view0$_configuration, value)))
        return;
      oldConfiguration = _this._view0$_configuration;
      _this._view0$_configuration = value;
      if (_this._rootTransform == null)
        return;
      if (oldConfiguration == null || C.boolConversionCheck(_this.get$configuration().shouldUpdateMatrix$1(oldConfiguration)))
        _this.replaceRootLayer$1(_this._updateMatricesAndCreateNewRootLayer$0());
      _this.markNeedsLayout$0();
    },
    get$hasConfiguration() {
      return this._view0$_configuration != null;
    },
    get$constraints() {
      if (!C.boolConversionCheck(this.get$hasConfiguration()))
        throw C.wrapException(C.StateError$("Constraints are not available because RenderView has not been given a configuration yet."));
      return this.get$configuration().logicalConstraints;
    },
    get$flutterView() {
      return this._view0$_view;
    },
    prepareInitialFrame$0() {
      this.scheduleInitialLayout$0();
      this.scheduleInitialPaint$1(this._updateMatricesAndCreateNewRootLayer$0());
    },
    _updateMatricesAndCreateNewRootLayer$0() {
      var rootLayer, _this = this;
      _this.set$_rootTransform(_this.get$configuration().toMatrix$0());
      rootLayer = D.TransformLayer$(_this._rootTransform);
      rootLayer.attach$1(_this);
      return rootLayer;
    },
    performResize$0() {
    },
    performLayout$0() {
      var t1, _this = this,
        sizedByChild = !C.boolConversionCheck(_this.get$constraints().get$isTight());
      if (_this.get$child() != null) {
        t1 = _this.get$child();
        t1.toString;
        t1.layout$2$parentUsesSize(_this.get$constraints(), sizedByChild);
      }
      _this.set$_view0$_size(sizedByChild && _this.get$child() != null ? _this.get$child().get$size() : _this.get$constraints().get$smallest());
    },
    hitTest$2$position(result, position) {
      var t1;
      type$.HitTestResult._as(result);
      type$.Offset._as(position);
      if (this.get$child() != null) {
        t1 = this.get$child();
        t1.toString;
        t1.hitTest$2$position(A.BoxHitTestResult$wrap(result), position);
      }
      result.add$1(0, D.HitTestEntry$(this, type$.HitTestTarget));
      return true;
    },
    get$isRepaintBoundary() {
      return true;
    },
    paint$2(context, offset) {
      var t1;
      type$.PaintingContext._as(context);
      type$.Offset._as(offset);
      if (this.get$child() != null) {
        t1 = this.get$child();
        t1.toString;
        context.paintChild$2(t1, offset);
      }
    },
    applyPaintTransform$2(child, transform) {
      var t1;
      type$.RenderBox._as(child);
      type$.Matrix4._as(transform);
      t1 = this._rootTransform;
      t1.toString;
      transform.multiply$1(t1);
      this.super$RenderObject$applyPaintTransform(child, transform);
    },
    compositeFrame$0() {
      var builder, scene, _this = this;
      D.FlutterTimeline_startSync("COMPOSITING", null);
      try {
        builder = D.RendererBinding_instance().createSceneBuilder$0();
        scene = _this.get$layer().buildScene$1(builder);
        _this._updateSystemChrome$0();
        _this._view0$_view.render$2$size(scene, _this.get$configuration().toPhysicalSize$1(_this.get$size()));
        scene.dispose$0();
      } finally {
        D.FlutterTimeline_finishSync();
      }
    },
    _updateSystemChrome$0() {
      var $top, bottom, upperOverlayStyle, lowerOverlayStyle, t4, t5, t6, t7, isAndroid, definedOverlayStyle, _this = this, _null = null,
        bounds = _this.get$paintBounds(),
        t1 = bounds.get$center().get$dx(),
        t2 = _this._view0$_view,
        t3 = t2.get$padding().top;
      if (typeof t3 !== "number")
        return t3.$div();
      $top = D.Offset$(t1, t3 / 2);
      t3 = bounds.get$center().get$dx();
      t1 = bounds.bottom;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = t2.get$padding().bottom;
      if (typeof t2 !== "number")
        return t2.$div();
      bottom = D.Offset$(t3, t1 - 1 - t2 / 2);
      t2 = type$.SystemUiOverlayStyle;
      upperOverlayStyle = _this.get$layer().find$1$1($top, t2);
      lowerOverlayStyle = _null;
      switch (D.defaultTargetPlatform()) {
        case E.TargetPlatform_0:
          lowerOverlayStyle = _this.get$layer().find$1$1(bottom, t2);
          break;
        case E.TargetPlatform_1:
        case E.TargetPlatform_2:
        case E.TargetPlatform_3:
        case E.TargetPlatform_4:
        case E.TargetPlatform_5:
          break;
      }
      t1 = upperOverlayStyle == null;
      if (t1 && lowerOverlayStyle == null)
        return;
      if (!t1 && lowerOverlayStyle != null) {
        t1 = upperOverlayStyle.statusBarBrightness;
        t2 = upperOverlayStyle.statusBarIconBrightness;
        t3 = upperOverlayStyle.statusBarColor;
        t4 = upperOverlayStyle.systemStatusBarContrastEnforced;
        t5 = lowerOverlayStyle.systemNavigationBarColor;
        t6 = lowerOverlayStyle.systemNavigationBarDividerColor;
        t7 = lowerOverlayStyle.systemNavigationBarIconBrightness;
        A.SystemChrome_setSystemUIOverlayStyle(A.SystemUiOverlayStyle$(t1, t3, t2, t5, lowerOverlayStyle.systemNavigationBarContrastEnforced, t6, t7, t4));
        return;
      }
      isAndroid = J.$eq$(D.defaultTargetPlatform(), E.TargetPlatform_0);
      definedOverlayStyle = t1 ? lowerOverlayStyle : upperOverlayStyle;
      t1 = definedOverlayStyle.statusBarBrightness;
      t2 = definedOverlayStyle.statusBarIconBrightness;
      t3 = definedOverlayStyle.statusBarColor;
      t4 = definedOverlayStyle.systemStatusBarContrastEnforced;
      t5 = isAndroid ? definedOverlayStyle.systemNavigationBarColor : _null;
      t6 = isAndroid ? definedOverlayStyle.systemNavigationBarDividerColor : _null;
      t7 = isAndroid ? definedOverlayStyle.systemNavigationBarIconBrightness : _null;
      A.SystemChrome_setSystemUIOverlayStyle(A.SystemUiOverlayStyle$(t1, t3, t2, t5, isAndroid ? definedOverlayStyle.systemNavigationBarContrastEnforced : _null, t6, t7, t4));
    },
    get$paintBounds() {
      return E.Offset_0_0.$and(0, J.$mul$ns(this.get$size(), this.get$configuration().devicePixelRatio));
    },
    get$semanticBounds() {
      var t1 = this._rootTransform;
      t1.toString;
      return D.MatrixUtils_transformRect(t1, E.Offset_0_0.$and(0, this.get$size()));
    },
    debugFillProperties$1(properties) {
      var t1, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      t1 = this._view0$_view;
      properties.add$1(0, D.DiagnosticsProperty$("view size", t1.get$physicalSize(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, "in physical pixels", type$.Size));
      properties.add$1(0, D.DoubleProperty$("device pixel ratio", t1.get$devicePixelRatio(), E.C__NoDefaultValue, _null, E.DiagnosticLevel_3, "physical pixels per logical pixel", _null));
      properties.add$1(0, D.DiagnosticsProperty$("configuration", this.get$configuration(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, "in logical pixels", type$.ViewConfiguration));
      if (C.boolConversionCheck(t1.platformDispatcher.get$semanticsEnabled()))
        properties.add$1(0, D.DiagnosticsNode_DiagnosticsNode$message("semantics enabled", true, E.DiagnosticsTreeStyle_8));
    },
    set$_view0$_size(_size) {
      this._view0$_size = type$.Size._as(_size);
    },
    set$_rootTransform(_rootTransform) {
      this._rootTransform = type$.nullable_Matrix4._as(_rootTransform);
    },
    $isRenderObjectWithChildMixin: 1
  };
  A._RenderView_RenderObject_RenderObjectWithChildMixin.prototype = {
    attach$1(owner) {
      var t1;
      type$.PipelineOwner._as(owner);
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0() {
      this.super$RenderObject$detach();
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0();
    },
    $isRenderObjectWithChildMixin: 1
  };
  A._FrameCallbackEntry.prototype = {};
  A.PerformanceModeRequestHandle.prototype = {
    PerformanceModeRequestHandle$_$1(_cleanup) {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type_PerformanceModeRequestHandle_STY), "package:flutter/scheduler.dart", this);
    },
    dispose$0() {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectDisposed$1$object(this);
      this._cleanup.call$0();
      this.set$_cleanup(null);
    },
    set$_cleanup(_cleanup) {
      this._cleanup = type$.nullable_void_Function._as(_cleanup);
    }
  };
  A.SchedulerBinding.prototype = {
    addTimingsCallback$1(callback) {
      var t1 = this.SchedulerBinding__timingsCallbacks,
        t2 = J.getInterceptor$ax(t1);
      t2.add$1(t1, type$.void_Function_List_FrameTiming._as(callback));
      if (C.boolConversionCheck(J.$eq$(t2.get$length(t1), 1)))
        this.get$platformDispatcher().set$onReportTimings(this.get$_executeTimingsCallbacks());
    },
    removeTimingsCallback$1(callback) {
      var t1 = this.SchedulerBinding__timingsCallbacks,
        t2 = J.getInterceptor$ax(t1);
      t2.remove$1(t1, type$.void_Function_List_FrameTiming._as(callback));
      if (C.boolConversionCheck(t2.get$isEmpty(t1)))
        this.get$platformDispatcher().set$onReportTimings(null);
    },
    _executeTimingsCallbacks$1(timings) {
      var callback, exception, stack, collector, t1, t2, t3, exception0;
      type$.List_FrameTiming._as(timings);
      t1 = this.SchedulerBinding__timingsCallbacks;
      for (t2 = J.get$iterator$ax(C.List_List$of(t1, true, type$.void_Function_List_FrameTiming)), t3 = J.getInterceptor$asx(t1); C.boolConversionCheck(t2.moveNext$0());) {
        callback = t2.get$current();
        try {
          if (C.boolConversionCheck(t3.contains$1(t1, callback)))
            callback.call$1(timings);
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          collector = null;
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while executing callbacks for FrameTiming"), exception, collector, "Flutter framework", false, stack));
        }
      }
    },
    get$lifecycleState() {
      return this.SchedulerBinding__lifecycleState;
    },
    handleAppLifecycleStateChanged$1(state) {
      var _this = this;
      type$.AppLifecycleState._as(state);
      if (C.boolConversionCheck(J.$eq$(_this.get$lifecycleState(), state)))
        return;
      _this.SchedulerBinding__lifecycleState = state;
      switch (state.index) {
        case 1:
        case 2:
          _this._setFramesEnabledState$1(true);
          break;
        case 3:
        case 4:
        case 0:
          _this._setFramesEnabledState$1(false);
          break;
      }
    },
    _ensureEventLoopCallback$0() {
      if (C.boolConversionCheck(this.SchedulerBinding__hasRequestedAnEventLoopCallback))
        return;
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = true;
      D.Timer_run(this.get$_runTasks());
    },
    _runTasks$0() {
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = false;
      if (C.boolConversionCheck(this.handleEventLoopCallback$0()))
        this._ensureEventLoopCallback$0();
    },
    handleEventLoopCallback$0() {
      var entry, exception, exceptionStack, callbackStack, t3, exception0, t4, _this = this,
        t1 = _this.SchedulerBinding__taskQueue,
        t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isEmpty(t1)) || C.boolConversionCheck(_this.get$locked()))
        return false;
      entry = t2.get$first(t1);
      t3 = entry.get$priority();
      if (C.boolConversionCheck(_this.SchedulerBinding_schedulingStrategy.call$2$priority$scheduler(t3, _this))) {
        try {
          t1.removeFirst$0();
          entry.run$0();
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          exceptionStack = C.getTraceFromException(exception0);
          callbackStack = null;
          t3 = D.ErrorDescription$("during a task callback");
          t4 = callbackStack == null ? null : new A.SchedulerBinding_handleEventLoopCallback_closure(callbackStack);
          D.FlutterError_reportError(D.FlutterErrorDetails$(t3, exception, t4, "scheduler library", false, exceptionStack));
        }
        return t2.get$isNotEmpty(t1);
      }
      return true;
    },
    get$transientCallbackCount() {
      return J.get$length$asx(this.SchedulerBinding__transientCallbacks);
    },
    scheduleFrameCallback$2$rescheduling(callback, rescheduling) {
      var t1, _this = this;
      type$.void_Function_Duration._as(callback);
      C._asBool(rescheduling);
      _this.scheduleFrame$0();
      t1 = _this.SchedulerBinding__nextFrameCallbackId;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_nextFrameCallbackId(t1 + 1);
      J.$indexSet$ax(_this.SchedulerBinding__transientCallbacks, _this.SchedulerBinding__nextFrameCallbackId, A._FrameCallbackEntry$(callback, rescheduling));
      return _this.SchedulerBinding__nextFrameCallbackId;
    },
    scheduleFrameCallback$1(callback) {
      return this.scheduleFrameCallback$2$rescheduling(callback, false);
    },
    cancelFrameCallbackWithId$1(id) {
      C._asInt(id);
      J.remove$1$ax(this.SchedulerBinding__transientCallbacks, id);
      J.add$1$ax(this.SchedulerBinding__removedIds, id);
    },
    addPersistentFrameCallback$1(callback) {
      J.add$1$ax(this.SchedulerBinding__persistentCallbacks, type$.void_Function_Duration._as(callback));
    },
    addPostFrameCallback$2$debugLabel(callback, debugLabel) {
      type$.void_Function_Duration._as(callback);
      C._asString(debugLabel);
      J.add$1$ax(this.SchedulerBinding__postFrameCallbacks0, callback);
    },
    addPostFrameCallback$1(callback) {
      return this.addPostFrameCallback$2$debugLabel(callback, "callback");
    },
    get$endOfFrame() {
      var _this = this;
      if (_this.SchedulerBinding__nextFrameCompleter == null) {
        if (C.boolConversionCheck(J.$eq$(_this.get$schedulerPhase(), E.SchedulerPhase_0)))
          _this.scheduleFrame$0();
        _this.set$_nextFrameCompleter(C.Completer_Completer(type$.void));
        _this.addPostFrameCallback$2$debugLabel(new A.SchedulerBinding_endOfFrame_closure(_this), "SchedulerBinding.completeFrame");
      }
      return _this.SchedulerBinding__nextFrameCompleter.get$future();
    },
    get$schedulerPhase() {
      return this.SchedulerBinding__schedulerPhase0;
    },
    get$framesEnabled() {
      return this.SchedulerBinding__framesEnabled;
    },
    _setFramesEnabledState$1(enabled) {
      C._asBool(enabled);
      if (C.boolConversionCheck(J.$eq$(this.SchedulerBinding__framesEnabled, enabled)))
        return;
      this.SchedulerBinding__framesEnabled = enabled;
      if (enabled)
        this.scheduleFrame$0();
    },
    ensureFrameCallbacksRegistered$0() {
      var _this = this,
        t1 = _this.get$platformDispatcher();
      if (t1.get$onBeginFrame() == null)
        t1.set$onBeginFrame(_this.get$_handleBeginFrame());
      t1 = _this.get$platformDispatcher();
      if (t1.get$onDrawFrame() == null)
        t1.set$onDrawFrame(_this.get$_handleDrawFrame());
    },
    ensureVisualUpdate$0() {
      switch (this.get$schedulerPhase()) {
        case E.SchedulerPhase_0:
        case E.SchedulerPhase_4:
          this.scheduleFrame$0();
          return;
        case E.SchedulerPhase_1:
        case E.SchedulerPhase_2:
        case E.SchedulerPhase_3:
          return;
      }
    },
    scheduleFrame$0() {
      var _this = this;
      if (C.boolConversionCheck(_this.SchedulerBinding__hasScheduledFrame) || !C.boolConversionCheck(_this.get$framesEnabled()))
        return;
      _this.ensureFrameCallbacksRegistered$0();
      _this.get$platformDispatcher().scheduleFrame$0();
      _this.SchedulerBinding__hasScheduledFrame = true;
    },
    scheduleForcedFrame$0() {
      var _this = this;
      if (C.boolConversionCheck(_this.SchedulerBinding__hasScheduledFrame))
        return;
      _this.ensureFrameCallbacksRegistered$0();
      _this.get$platformDispatcher().scheduleFrame$0();
      _this.SchedulerBinding__hasScheduledFrame = true;
    },
    scheduleWarmUpFrame$0() {
      var debugTimelineTask, hadScheduledFrame, _this = this, t1 = {};
      if (C.boolConversionCheck(_this.SchedulerBinding__warmUpFrame) || !C.boolConversionCheck(J.$eq$(_this.get$schedulerPhase(), E.SchedulerPhase_0)))
        return;
      _this.SchedulerBinding__warmUpFrame = true;
      t1.debugTimelineTask = null;
      debugTimelineTask = D.TimelineTask$();
      debugTimelineTask.start$1("Warm-up frame");
      t1.debugTimelineTask = debugTimelineTask;
      hadScheduledFrame = _this.SchedulerBinding__hasScheduledFrame;
      A.PlatformDispatcher_instance().scheduleWarmUpFrame$2$beginFrame$drawFrame(new A.SchedulerBinding_scheduleWarmUpFrame_closure(_this), new A.SchedulerBinding_scheduleWarmUpFrame_closure0(_this, hadScheduledFrame));
      _this.lockEvents$1(new A.SchedulerBinding_scheduleWarmUpFrame_closure1(t1, _this));
    },
    resetEpoch$0() {
      var _this = this;
      _this.set$_epochStart(_this._adjustForEpoch$1(_this.SchedulerBinding__lastRawTimeStamp));
      _this.SchedulerBinding__firstRawTimeStampInEpoch = null;
    },
    _adjustForEpoch$1(rawTimeStamp) {
      var t1, t2;
      type$.Duration._as(rawTimeStamp);
      t1 = this.SchedulerBinding__firstRawTimeStampInEpoch;
      t1 = (t1 == null ? F.Duration_0 : rawTimeStamp.$sub(0, t1)).get$inMicroseconds();
      t2 = A.timeDilation();
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return C.iae(t2);
      t2 = F.JSNumber_methods.round$0(t1 / t2);
      t1 = this.SchedulerBinding__epochStart.get$inMicroseconds();
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t1 !== "number")
        return C.iae(t1);
      return D.Duration$(t2 + t1, 0);
    },
    get$currentFrameTimeStamp() {
      var t1 = this.SchedulerBinding__currentFrameTimeStamp;
      t1.toString;
      return t1;
    },
    get$currentSystemFrameTimeStamp() {
      return this.SchedulerBinding__lastRawTimeStamp;
    },
    _handleBeginFrame$1(rawTimeStamp) {
      type$.Duration._as(rawTimeStamp);
      if (C.boolConversionCheck(this.SchedulerBinding__warmUpFrame)) {
        this.SchedulerBinding__rescheduleAfterWarmUpFrame = true;
        return;
      }
      this.handleBeginFrame$1(rawTimeStamp);
    },
    _handleDrawFrame$0() {
      var _this = this;
      if (C.boolConversionCheck(_this.SchedulerBinding__rescheduleAfterWarmUpFrame)) {
        _this.SchedulerBinding__rescheduleAfterWarmUpFrame = false;
        _this.addPostFrameCallback$2$debugLabel(new A.SchedulerBinding__handleDrawFrame_closure(_this), "SchedulerBinding.scheduleFrame");
        return;
      }
      _this.handleDrawFrame$0();
    },
    handleBeginFrame$1(rawTimeStamp) {
      var callbacks, t1, t2, t3, _this = this;
      type$.nullable_Duration._as(rawTimeStamp);
      t1 = _this.SchedulerBinding__frameTimelineTask;
      t2 = t1 == null;
      if (!t2)
        t1.start$1("Frame");
      if (_this.SchedulerBinding__firstRawTimeStampInEpoch == null)
        _this.SchedulerBinding__firstRawTimeStampInEpoch = rawTimeStamp;
      t3 = rawTimeStamp == null;
      _this.set$_currentFrameTimeStamp(_this._adjustForEpoch$1(t3 ? _this.SchedulerBinding__lastRawTimeStamp : rawTimeStamp));
      if (!t3)
        _this.SchedulerBinding__lastRawTimeStamp = rawTimeStamp;
      _this.SchedulerBinding__hasScheduledFrame = false;
      try {
        if (!t2)
          t1.start$1("Animate");
        _this.SchedulerBinding__schedulerPhase0 = E.SchedulerPhase_1;
        callbacks = _this.SchedulerBinding__transientCallbacks;
        _this.set$_transientCallbacks(C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._FrameCallbackEntry));
        J.forEach$1$ax(callbacks, new A.SchedulerBinding_handleBeginFrame_closure(_this));
        J.clear$0$ax(_this.SchedulerBinding__removedIds);
      } finally {
        _this.SchedulerBinding__schedulerPhase0 = E.SchedulerPhase_2;
      }
    },
    requestPerformanceMode$1(mode) {
      var t1, _this = this;
      type$.DartPerformanceMode._as(mode);
      t1 = _this.SchedulerBinding__performanceMode;
      if (t1 != null && !C.boolConversionCheck(J.$eq$(t1, mode)))
        return null;
      if (C.boolConversionCheck(J.$eq$(_this.SchedulerBinding__performanceMode, mode))) {
        t1 = _this.SchedulerBinding__numPerformanceModeRequests;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_numPerformanceModeRequests(t1 + 1);
      } else if (_this.SchedulerBinding__performanceMode == null) {
        _this.SchedulerBinding__performanceMode = mode;
        _this.SchedulerBinding__numPerformanceModeRequests = 1;
      }
      return A.PerformanceModeRequestHandle$_(_this.get$_disposePerformanceModeRequest());
    },
    _disposePerformanceModeRequest$0() {
      var _this = this,
        t1 = _this.SchedulerBinding__numPerformanceModeRequests;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_numPerformanceModeRequests(t1 - 1);
      if (C.boolConversionCheck(J.$eq$(_this.SchedulerBinding__numPerformanceModeRequests, 0))) {
        _this.SchedulerBinding__performanceMode = null;
        A.PlatformDispatcher_instance().requestDartPerformanceMode$1(B.DartPerformanceMode_0);
      }
    },
    handleDrawFrame$0() {
      var callback, localPostFrameCallbacks, callback0, t3, t4, t5, _this = this,
        t1 = _this.SchedulerBinding__frameTimelineTask,
        t2 = t1 == null;
      if (!t2)
        t1.finish$0();
      try {
        _this.SchedulerBinding__schedulerPhase0 = E.SchedulerPhase_3;
        for (t3 = type$.void_Function_Duration, t4 = J.get$iterator$ax(C.List_List$of(_this.SchedulerBinding__persistentCallbacks, true, t3)); C.boolConversionCheck(t4.moveNext$0());) {
          callback = t4.get$current();
          t5 = _this.SchedulerBinding__currentFrameTimeStamp;
          t5.toString;
          _this._invokeFrameCallback$2(callback, t5);
        }
        _this.SchedulerBinding__schedulerPhase0 = E.SchedulerPhase_4;
        t4 = _this.SchedulerBinding__postFrameCallbacks0;
        localPostFrameCallbacks = C.List_List$of(t4, true, t3);
        J.clear$0$ax(t4);
        D.FlutterTimeline_startSync("POST_FRAME", null);
        try {
          for (t3 = J.get$iterator$ax(localPostFrameCallbacks); C.boolConversionCheck(t3.moveNext$0());) {
            callback0 = t3.get$current();
            t4 = _this.SchedulerBinding__currentFrameTimeStamp;
            t4.toString;
            _this._invokeFrameCallback$2(callback0, t4);
          }
        } finally {
          D.FlutterTimeline_finishSync();
        }
      } finally {
        _this.SchedulerBinding__schedulerPhase0 = E.SchedulerPhase_0;
        if (!t2)
          t1.finish$0();
        _this.SchedulerBinding__currentFrameTimeStamp = null;
      }
    },
    _profileFramePostEvent$1(frameTiming) {
      type$.FrameTiming._as(frameTiming);
      this.postEvent$2("Flutter.Frame", C.LinkedHashMap_LinkedHashMap$_literal(["number", frameTiming.get$frameNumber(), "startTime", frameTiming.timestampInMicroseconds$1(E.FramePhase_1), "elapsed", frameTiming.get$totalSpan().get$inMicroseconds(), "build", frameTiming.get$buildDuration().get$inMicroseconds(), "raster", frameTiming.get$rasterDuration().get$inMicroseconds(), "vsyncOverhead", frameTiming.get$vsyncOverhead().get$inMicroseconds()], type$.String, type$.dynamic));
    },
    _invokeFrameCallback$3(callback, timeStamp, callbackStack) {
      var exception, exceptionStack, exception0, t1, t2;
      type$.void_Function_Duration._as(callback);
      type$.Duration._as(timeStamp);
      type$.nullable_StackTrace._as(callbackStack);
      try {
        callback.call$1(timeStamp);
      } catch (exception0) {
        exception = C.unwrapException(exception0);
        exceptionStack = C.getTraceFromException(exception0);
        t1 = D.ErrorDescription$("during a scheduler callback");
        t2 = callbackStack == null ? null : new A.SchedulerBinding__invokeFrameCallback_closure(callbackStack);
        D.FlutterError_reportError(D.FlutterErrorDetails$(t1, exception, t2, "scheduler library", false, exceptionStack));
      }
    },
    _invokeFrameCallback$2(callback, timeStamp) {
      return this._invokeFrameCallback$3(callback, timeStamp, null);
    },
    set$_nextFrameCallbackId(_nextFrameCallbackId) {
      this.SchedulerBinding__nextFrameCallbackId = C._asInt(_nextFrameCallbackId);
    },
    set$_transientCallbacks(_transientCallbacks) {
      this.SchedulerBinding__transientCallbacks = type$.Map_int__FrameCallbackEntry._as(_transientCallbacks);
    },
    set$_nextFrameCompleter(_nextFrameCompleter) {
      this.SchedulerBinding__nextFrameCompleter = type$.nullable_Completer_void._as(_nextFrameCompleter);
    },
    set$_epochStart(_epochStart) {
      this.SchedulerBinding__epochStart = type$.Duration._as(_epochStart);
    },
    set$_currentFrameTimeStamp(_currentFrameTimeStamp) {
      this.SchedulerBinding__currentFrameTimeStamp = type$.nullable_Duration._as(_currentFrameTimeStamp);
    },
    set$_numPerformanceModeRequests(_numPerformanceModeRequests) {
      this.SchedulerBinding__numPerformanceModeRequests = C._asInt(_numPerformanceModeRequests);
    },
    $isBindingBase: 1
  };
  A.Priority.prototype = {
    get$value() {
      return this._priority$_value;
    },
    $add(_, offset) {
      var t1;
      C._asInt(offset);
      if (Math.abs(offset) > 10000) {
        t1 = F.JSInt_methods.get$sign(offset);
        if (typeof t1 !== "number")
          return C.iae(t1);
        offset = 10000 * t1;
      }
      t1 = this._priority$_value;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Priority$_(t1 + offset);
    },
    $sub(_, offset) {
      return this.$add(0, -C._asInt(offset));
    }
  };
  A.SchedulerServiceExtensions.prototype = {
    _enumToString$0() {
      return "SchedulerServiceExtensions." + C.S(this._core$_name);
    }
  };
  A.SemanticsBinding.prototype = {
    get$semanticsEnabled() {
      return this.get$_binding2$_semanticsEnabled().get$value();
    },
    get$_binding2$_semanticsEnabled() {
      var result, _this = this,
        value = _this.SemanticsBinding___SemanticsBinding__semanticsEnabled_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = D.ValueNotifier$(_this.get$platformDispatcher().get$semanticsEnabled(), type$.bool);
        _this.SemanticsBinding___SemanticsBinding__semanticsEnabled_FI !== $ && C.throwLateFieldADI("_semanticsEnabled");
        _this.set$__SemanticsBinding__semanticsEnabled_FI(result);
        value = result;
      }
      return value;
    },
    addSemanticsEnabledListener$1(listener) {
      type$.void_Function._as(listener);
      this.get$_binding2$_semanticsEnabled().addListener$1(listener);
    },
    ensureSemantics$0() {
      var _this = this,
        t1 = _this.SemanticsBinding__outstandingHandles;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_outstandingHandles(t1 + 1);
      _this.get$_binding2$_semanticsEnabled().set$value(true);
      return A.SemanticsHandle$_(_this.get$_didDisposeSemanticsHandle());
    },
    _didDisposeSemanticsHandle$0() {
      var t2, _this = this,
        t1 = _this.SemanticsBinding__outstandingHandles;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_outstandingHandles(t1 - 1);
      t1 = _this.get$_binding2$_semanticsEnabled();
      t2 = _this.SemanticsBinding__outstandingHandles;
      if (typeof t2 !== "number")
        return t2.$gt();
      t1.set$value(t2 > 0);
    },
    _handleSemanticsEnabledChanged$0() {
      var t1, _this = this;
      if (C.boolConversionCheck(_this.get$platformDispatcher().get$semanticsEnabled())) {
        if (_this.SemanticsBinding__semanticsHandle == null)
          _this.set$_semanticsHandle(_this.ensureSemantics$0());
      } else {
        t1 = _this.SemanticsBinding__semanticsHandle;
        if (t1 != null)
          t1.dispose$0();
        _this.SemanticsBinding__semanticsHandle = null;
      }
    },
    _handleSemanticsActionEvent$1(action) {
      var $arguments;
      type$.SemanticsActionEvent._as(action);
      $arguments = action.$arguments;
      this.performSemanticsAction$1(type$.ByteData._is($arguments) ? action.copyWith$1$arguments(E.C_StandardMessageCodec.decodeMessage$1($arguments)) : action);
    },
    get$_accessibilityFeatures() {
      return this.SemanticsBinding___SemanticsBinding__accessibilityFeatures_A;
    },
    set$_accessibilityFeatures(value) {
      this.SemanticsBinding___SemanticsBinding__accessibilityFeatures_A = type$.AccessibilityFeatures._as(value);
    },
    handleAccessibilityFeaturesChanged$0() {
      this.set$_accessibilityFeatures(this.get$platformDispatcher().get$accessibilityFeatures());
    },
    createSemanticsUpdateBuilder$0() {
      return A.SemanticsUpdateBuilder$();
    },
    get$disableAnimations() {
      return this.get$_accessibilityFeatures().get$disableAnimations();
    },
    set$__SemanticsBinding__semanticsEnabled_FI(__SemanticsBinding__semanticsEnabled_FI) {
      this.SemanticsBinding___SemanticsBinding__semanticsEnabled_FI = type$.ValueNotifier_bool._as(__SemanticsBinding__semanticsEnabled_FI);
    },
    set$_outstandingHandles(_outstandingHandles) {
      this.SemanticsBinding__outstandingHandles = C._asInt(_outstandingHandles);
    },
    set$_semanticsHandle(_semanticsHandle) {
      this.SemanticsBinding__semanticsHandle = type$.nullable_SemanticsHandle._as(_semanticsHandle);
    },
    $isBindingBase: 1
  };
  A.SemanticsHandle.prototype = {
    SemanticsHandle$_$1(_onDispose) {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type_SemanticsHandle_DV7), "package:flutter/semantics.dart", this);
    },
    dispose$0() {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectDisposed$1$object(this);
      this._onDispose.call$0();
    }
  };
  A.SemanticsOwner.prototype = {
    SemanticsOwner$1$onSemanticsUpdate(onSemanticsUpdate) {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type_SemanticsOwner_i3t), "package:flutter/semantics.dart", this);
    },
    get$rootSemanticsNode() {
      return J.$index$asx(this._nodes, 0);
    },
    dispose$0() {
      var _this = this;
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectDisposed$1$object(_this);
      J.clear$0$ax(_this._dirtyNodes);
      J.clear$0$ax(_this._nodes);
      J.clear$0$ax(_this._detachedNodes);
      _this.super$ChangeNotifier$dispose();
    },
    sendSemanticsUpdate$0() {
      var customSemanticsActionIds, visitedNodes, t3, t4, localDirtyNodes, t5, t6, builder, _this = this,
        t1 = _this._dirtyNodes,
        t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(t2.get$isEmpty(t1)))
        return;
      customSemanticsActionIds = C.LinkedHashSet_LinkedHashSet$_empty(type$.int);
      visitedNodes = C._setArrayType([], type$.JSArray_SemanticsNode);
      for (t3 = _this._detachedNodes, t4 = J.getInterceptor$ax(t3); C.boolConversionCheck(t2.get$isNotEmpty(t1));) {
        localDirtyNodes = J.toList$0$ax(t2.where$1(t1, new A.SemanticsOwner_sendSemanticsUpdate_closure(_this)));
        t2.clear$0(t1);
        t4.clear$0(t3);
        t5 = J.getInterceptor$ax(localDirtyNodes);
        t5.sort$1(localDirtyNodes, new A.SemanticsOwner_sendSemanticsUpdate_closure0());
        F.JSArray_methods.addAll$1(visitedNodes, localDirtyNodes);
        for (t5 = t5.get$iterator(localDirtyNodes); C.boolConversionCheck(t5.moveNext$0());) {
          t6 = t5.get$current();
          if (C.boolConversionCheck(t6.get$isPartOfNodeMerging()))
            if (t6.get$parent() != null && C.boolConversionCheck(t6.get$parent().get$isPartOfNodeMerging())) {
              t6.get$parent()._markDirty$0();
              t6._semantics$_dirty = false;
            }
        }
      }
      F.JSArray_methods.sort$1(visitedNodes, new A.SemanticsOwner_sendSemanticsUpdate_closure1());
      builder = D.SemanticsBinding_instance().createSemanticsUpdateBuilder$0();
      for (t3 = F.JSArray_methods.get$iterator(visitedNodes); C.boolConversionCheck(t3.moveNext$0());) {
        t4 = t3.get$current();
        if (C.boolConversionCheck(t4._semantics$_dirty) && C.boolConversionCheck(t4.get$attached()))
          t4._addToUpdate$2(builder, customSemanticsActionIds);
      }
      t2.clear$0(t1);
      for (t1 = customSemanticsActionIds.get$iterator(0); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t3 = D.CustomSemanticsAction_getAction(t2);
        t3.toString;
        t4 = t3.action;
        t4 = t4 == null ? null : t4.index;
        if (t4 == null)
          t4 = -1;
        builder.updateCustomAction$4$hint$id$label$overrideId(t3.hint, t2, null, t4);
      }
      _this.onSemanticsUpdate.call$1(builder.build$0());
      _this.notifyListeners$0();
    },
    _getSemanticsActionHandlerForId$2(id, action) {
      var result, t2, t1 = {};
      C._asInt(id);
      type$.SemanticsAction._as(action);
      result = t1.result = J.$index$asx(this._nodes, id);
      if (result != null && C.boolConversionCheck(result.get$isPartOfNodeMerging()) && !C.boolConversionCheck(result._canPerformAction$1(action)))
        result._visitDescendants$1(new A.SemanticsOwner__getSemanticsActionHandlerForId_closure(t1, action));
      t2 = t1.result;
      if (t2 == null || !C.boolConversionCheck(t2._canPerformAction$1(action)))
        return null;
      return J.$index$asx(t1.result._actions, action);
    },
    performAction$3(id, action, args) {
      var handler, t1;
      C._asInt(id);
      type$.SemanticsAction._as(action);
      handler = this._getSemanticsActionHandlerForId$2(id, action);
      if (handler != null) {
        handler.call$1(args);
        return;
      }
      if (action === E.SemanticsAction_256_showOnScreen) {
        t1 = J.$index$asx(this._nodes, id);
        t1 = (t1 == null ? null : t1._showOnScreen) != null;
      } else
        t1 = false;
      if (t1)
        J.$index$asx(this._nodes, id)._showOnScreen.call$0();
    },
    _getSemanticsActionHandlerForPosition$3(node, position, action) {
      var inverse, t1, handler, _box_0 = {};
      type$.SemanticsNode._as(node);
      type$.Offset._as(position);
      type$.SemanticsAction._as(action);
      if (node.get$transform() != null) {
        inverse = D.Matrix4_Matrix4$identity();
        t1 = node.get$transform();
        t1.toString;
        if (C.boolConversionCheck(J.$eq$(inverse.copyInverse$1(t1), 0)))
          return null;
        position = D.MatrixUtils_transformPoint(inverse, position);
      }
      if (!C.boolConversionCheck(J.contains$1$asx(node.get$rect(), position)))
        return null;
      if (C.boolConversionCheck(node.get$mergeAllDescendantsIntoThisNode())) {
        _box_0.result = null;
        node._visitDescendants$1(new A.SemanticsOwner__getSemanticsActionHandlerForPosition_closure(_box_0, action));
        t1 = _box_0.result;
        return t1 == null ? null : J.$index$asx(t1._actions, action);
      }
      if (C.boolConversionCheck(node.get$hasChildren())) {
        t1 = node._semantics$_children;
        t1.toString;
        t1 = J.get$iterator$ax(J.get$reversed$ax(t1));
        for (; C.boolConversionCheck(t1.moveNext$0());) {
          handler = this._getSemanticsActionHandlerForPosition$3(t1.get$current(), position, action);
          if (handler != null)
            return handler;
        }
      }
      return J.$index$asx(node._actions, action);
    },
    performActionAt$2(position, action) {
      var node, handler;
      type$.Offset._as(position);
      type$.SemanticsAction._as(action);
      node = this.get$rootSemanticsNode();
      if (node == null)
        return;
      handler = this._getSemanticsActionHandlerForPosition$3(node, position, action);
      if (handler != null)
        handler.call$1(null);
    },
    toString$0(_) {
      return D.describeIdentity(this);
    }
  };
  A.BinaryMessenger.prototype = {};
  A.ServicesBinding.prototype = {
    get$keyboard() {
      return this.get$_keyboard();
    },
    get$_keyboard() {
      return this.ServicesBinding___ServicesBinding__keyboard_F;
    },
    set$_keyboard(value) {
      type$.HardwareKeyboard._as(value);
      this.ServicesBinding___ServicesBinding__keyboard_F !== $ && C.throwLateFieldAI("_keyboard");
      this.ServicesBinding___ServicesBinding__keyboard_F = value;
    },
    get$keyEventManager() {
      return this.get$_keyEventManager();
    },
    get$_keyEventManager() {
      return this.ServicesBinding___ServicesBinding__keyEventManager_F;
    },
    set$_keyEventManager(value) {
      type$.KeyEventManager._as(value);
      this.ServicesBinding___ServicesBinding__keyEventManager_F !== $ && C.throwLateFieldAI("_keyEventManager");
      this.ServicesBinding___ServicesBinding__keyEventManager_F = value;
    },
    _initKeyboard$0() {
      var _this = this;
      _this.set$_keyboard(A.HardwareKeyboard$());
      _this.set$_keyEventManager(A.KeyEventManager$(_this.get$_keyboard(), $.$get$RawKeyboard_instance()));
      _this.get$_keyboard().syncKeyboardState$0().then$1$1(new A.ServicesBinding__initKeyboard_closure(_this), type$.Null);
    },
    get$defaultBinaryMessenger() {
      return this.get$_defaultBinaryMessenger();
    },
    get$_defaultBinaryMessenger() {
      return this.ServicesBinding___ServicesBinding__defaultBinaryMessenger_F;
    },
    set$_defaultBinaryMessenger(value) {
      type$.BinaryMessenger._as(value);
      this.ServicesBinding___ServicesBinding__defaultBinaryMessenger_F !== $ && C.throwLateFieldAI("_defaultBinaryMessenger");
      this.ServicesBinding___ServicesBinding__defaultBinaryMessenger_F = value;
    },
    createBinaryMessenger$0() {
      return B.C__DefaultBinaryMessenger;
    },
    handleMemoryPressure$0() {
      J.clear$0$ax($.$get$rootBundle());
    },
    handleSystemMessage$1(systemMessage) {
      return this.handleSystemMessage$body$ServicesBinding(type$.Object._as(systemMessage));
    },
    handleSystemMessage$body$ServicesBinding(systemMessage) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$handleSystemMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              switch (C._asString(type$.Map_String_dynamic._as(systemMessage).$index(0, "type"))) {
                case "memoryPressure":
                  $async$self.handleMemoryPressure$0();
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handleSystemMessage$1, $async$completer);
    },
    initLicenses$0() {
      A.LicenseRegistry_addLicense(this.get$_addLicenses());
    },
    _addLicenses$0() {
      var controller = C._Cell$named("controller");
      controller.set$finalLocalValue(A.StreamController_StreamController(new A.ServicesBinding__addLicenses_closure(controller), type$.LicenseEntry));
      return controller.readLocal$1$0(type$.StreamController_LicenseEntry).get$stream();
    },
    readInitialLifecycleStateFromNativeWindow$0() {
      var _this = this;
      if (_this.get$lifecycleState() != null || C.boolConversionCheck(J.get$isEmpty$asx(_this.get$platformDispatcher().get$initialLifecycleState())))
        return;
      _this._handleLifecycleMessage$1(_this.get$platformDispatcher().get$initialLifecycleState());
    },
    _handleLifecycleMessage$1(message) {
      return this._handleLifecycleMessage$body$ServicesBinding(C._asStringQ(message));
    },
    _handleLifecycleMessage$body$ServicesBinding(message) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$self = this, state, t1;
      var $async$_handleLifecycleMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              message.toString;
              state = A.ServicesBinding__parseAppLifecycleMessage(message);
              t1 = $async$self.get$lifecycleState();
              state.toString;
              J.forEach$1$ax($async$self._generateStateTransitions$2(t1, state), $async$self.get$handleAppLifecycleStateChanged());
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handleLifecycleMessage$1, $async$completer);
    },
    _generateStateTransitions$2(previousState, state) {
      var stateChanges, previousStateIndex, stateIndex, i;
      type$.nullable_AppLifecycleState._as(previousState);
      type$.AppLifecycleState._as(state);
      if (previousState === state)
        return B.List_empty5;
      stateChanges = C._setArrayType([], type$.JSArray_AppLifecycleState);
      if (previousState == null)
        F.JSArray_methods.add$1(stateChanges, state);
      else {
        previousStateIndex = F.JSArray_methods.indexOf$1(B.List_Gbn, previousState);
        stateIndex = F.JSArray_methods.indexOf$1(B.List_Gbn, state);
        if (state === E.AppLifecycleState_0) {
          for (i = previousStateIndex + 1; i < 5; ++i) {
            if (!(i >= 0))
              return C.ioore(B.List_Gbn, i);
            F.JSArray_methods.add$1(stateChanges, B.List_Gbn[i]);
          }
          F.JSArray_methods.add$1(stateChanges, E.AppLifecycleState_0);
        } else if (previousStateIndex > stateIndex)
          for (i = stateIndex; i < previousStateIndex; ++i) {
            if (!(i >= 0 && i < 5))
              return C.ioore(B.List_Gbn, i);
            F.JSArray_methods.insert$2(stateChanges, 0, B.List_Gbn[i]);
          }
        else
          for (i = previousStateIndex + 1; i <= stateIndex; ++i) {
            if (!(i >= 0 && i < 5))
              return C.ioore(B.List_Gbn, i);
            F.JSArray_methods.add$1(stateChanges, B.List_Gbn[i]);
          }
      }
      return stateChanges;
    },
    _handleAccessibilityMessage$1(accessibilityMessage) {
      return this._handleAccessibilityMessage$body$ServicesBinding(type$.Object._as(accessibilityMessage));
    },
    _handleAccessibilityMessage$body$ServicesBinding(accessibilityMessage) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, message;
      var $async$_handleAccessibilityMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              message = type$.Map_of_nullable_Object_and_nullable_Object._as(accessibilityMessage).cast$2$0(0, type$.String, type$.dynamic);
              switch (C._asString(message.$index(0, "type"))) {
                case "didGainFocus":
                  $async$self.ServicesBinding_accessibilityFocus.set$value(C._asInt(message.$index(0, "nodeId")));
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handleAccessibilityMessage$1, $async$completer);
    },
    handleViewFocusChanged$1($event) {
      type$.ViewFocusEvent._as($event);
    },
    _handlePlatformMessage$1(methodCall) {
      return this._handlePlatformMessage$body$ServicesBinding(type$.MethodCall._as(methodCall));
    },
    _handlePlatformMessage$body$ServicesBinding(methodCall) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, args, method, $async$temp1, $async$temp2;
      var $async$_handlePlatformMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              method = methodCall.method;
            case 3:
              // switch
              switch (method) {
                case "ContextMenu.onDismissSystemContextMenu":
                  // goto case
                  $async$goto = 5;
                  break;
                case "SystemChrome.systemUIChange":
                  // goto case
                  $async$goto = 6;
                  break;
                case "System.requestAppExit":
                  // goto case
                  $async$goto = 7;
                  break;
                default:
                  // goto default
                  $async$goto = 8;
                  break;
              }
              break;
            case 5:
              // case
              for (t1 = J.get$iterator$ax($async$self.ServicesBinding__systemContextMenuClients); C.boolConversionCheck(t1.moveNext$0());)
                t1.get$current().handleSystemHide$0();
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              args = type$.List_dynamic._as(methodCall.$arguments);
              t1 = $async$self.ServicesBinding__systemUiChangeCallback;
              $async$goto = t1 != null ? 9 : 10;
              break;
            case 9:
              // then
              $async$goto = 11;
              return C._asyncAwait(t1.call$1(C._asBool(J.$index$asx(args, 0))), $async$_handlePlatformMessage$1);
            case 11:
              // returning from await.
            case 10:
              // join
              // goto after switch
              $async$goto = 4;
              break;
            case 7:
              // case
              $async$temp1 = C;
              $async$temp2 = C;
              $async$goto = 12;
              return C._asyncAwait($async$self.handleRequestAppExit$0(), $async$_handlePlatformMessage$1);
            case 12:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["response", $async$temp2.EnumName_get_name($async$result)], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // default
              throw C.wrapException(C.AssertionError$('Method "' + method + '" not handled.'));
            case 4:
              // after switch
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handlePlatformMessage$1, $async$completer);
    },
    get$restorationManager() {
      return this.get$_restorationManager();
    },
    get$_restorationManager() {
      return this.ServicesBinding___ServicesBinding__restorationManager_A;
    },
    set$_restorationManager(value) {
      this.ServicesBinding___ServicesBinding__restorationManager_A = type$.RestorationManager._as(value);
    },
    createRestorationManager$0() {
      return A.RestorationManager$();
    },
    initializationComplete$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$initializationComplete$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return C._asyncAwait(E.OptionalMethodChannel_ENd.invokeMethod$1$1("System.initializationComplete", type$.dynamic), $async$initializationComplete$0);
            case 2:
              // returning from await.
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$initializationComplete$0, $async$completer);
    },
    $isBindingBase: 1,
    $isSchedulerBinding: 1
  };
  A._DefaultBinaryMessenger.prototype = {
    send$2(channel, message) {
      var t1, completer;
      C._asString(channel);
      t1 = type$.nullable_ByteData;
      t1._as(message);
      completer = C.Completer_Completer(t1);
      A.PlatformDispatcher_instance().sendPlatformMessage$3(channel, message, new A._DefaultBinaryMessenger_send_closure(completer));
      return completer.get$future();
    },
    setMessageHandler$2(channel, handler) {
      C._asString(channel);
      type$.nullable_nullable_Future_nullable_ByteData_Function_nullable_ByteData._as(handler);
      if (handler == null)
        $.$get$channelBuffers().clearListener$1(channel);
      else
        $.$get$channelBuffers().setListener$2(channel, new A._DefaultBinaryMessenger_setMessageHandler_closure(handler));
    }
  };
  A.KeyEvent.prototype = {
    debugFillProperties$1(properties) {
      var _this = this, _null = null,
        _s11_ = "synthesized";
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("physicalKey", _this.physicalKey, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.PhysicalKeyboardKey));
      properties.add$1(0, D.DiagnosticsProperty$("logicalKey", _this.logicalKey, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.LogicalKeyboardKey));
      properties.add$1(0, D.StringProperty$("character", _this.character, E.C__NoDefaultValue, true, true));
      properties.add$1(0, D.DiagnosticsProperty$("timeStamp", _this.timeStamp, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.Duration));
      properties.add$1(0, D.FlagProperty$(_s11_, _null, _null, _s11_, E.DiagnosticLevel_3, false, _this.synthesized));
    },
    $isDiagnosticable: 1
  };
  A.KeyDownEvent.prototype = {};
  A.KeyUpEvent.prototype = {};
  A.KeyRepeatEvent.prototype = {};
  A.HardwareKeyboard.prototype = {
    get$physicalKeysPressed() {
      return J.toSet$0$ax(this._pressedKeys.get$keys());
    },
    get$logicalKeysPressed() {
      return J.toSet$0$ax(this._pressedKeys.get$values());
    },
    lookUpLayout$1(physicalKey) {
      return J.$index$asx(this._pressedKeys, type$.PhysicalKeyboardKey._as(physicalKey));
    },
    get$lockModesEnabled() {
      return this._lockModes;
    },
    _assertEventIsRegular$1($event) {
      type$.KeyEvent._as($event);
    },
    syncKeyboardState$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, t4, physicalKey, t1, keyboardState;
      var $async$syncKeyboardState$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.int;
              $async$goto = 2;
              return C._asyncAwait(B.OptionalMethodChannel_GXw.invokeMapMethod$2$1("getKeyboardState", t1, t1), $async$syncKeyboardState$0);
            case 2:
              // returning from await.
              keyboardState = $async$result;
              if (keyboardState != null)
                for (t1 = J.get$iterator$ax(keyboardState.get$keys()), t2 = $async$self._pressedKeys, t3 = J.getInterceptor$ax(t2); C.boolConversionCheck(t1.moveNext$0());) {
                  t4 = t1.get$current();
                  physicalKey = A.PhysicalKeyboardKey$(t4);
                  t4 = keyboardState.$index(0, t4);
                  t4.toString;
                  t3.$indexSet(t2, physicalKey, A.LogicalKeyboardKey$(t4));
                }
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$syncKeyboardState$0, $async$completer);
    },
    _dispatchKeyEvent$1($event) {
      var handled, handler, thisResult, exception, stack, collector, t1, exception0, _this = this;
      type$.KeyEvent._as($event);
      handled = false;
      for (t1 = J.get$iterator$ax(_this._handlers); C.boolConversionCheck(t1.moveNext$0());) {
        handler = t1.get$current();
        try {
          thisResult = handler.call$1($event);
          handled = C.boolConversionCheck(handled) || C.boolConversionCheck(thisResult);
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          collector = null;
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while processing a key handler"), exception, collector, "services library", false, stack));
        }
      }
      t1 = _this._modifiedHandlers;
      if (t1 != null) {
        _this.set$_handlers(t1);
        _this.set$_modifiedHandlers(null);
      }
      return handled;
    },
    handleKeyEvent$1($event) {
      var physicalKey, logicalKey, lockMode, t1, t2, _this = this;
      type$.KeyEvent._as($event);
      _this._assertEventIsRegular$1($event);
      physicalKey = $event.physicalKey;
      logicalKey = $event.logicalKey;
      if ($event instanceof A.KeyDownEvent) {
        J.$indexSet$ax(_this._pressedKeys, physicalKey, logicalKey);
        lockMode = A.KeyboardLockMode_findLockByLogicalKey(logicalKey);
        if (lockMode != null) {
          t1 = _this._lockModes;
          t2 = J.getInterceptor$asx(t1);
          if (C.boolConversionCheck(t2.contains$1(t1, lockMode)))
            t2.remove$1(t1, lockMode);
          else
            t2.add$1(t1, lockMode);
        }
      } else if ($event instanceof A.KeyUpEvent)
        J.remove$1$ax(_this._pressedKeys, physicalKey);
      return _this._dispatchKeyEvent$1($event);
    },
    set$_handlers(_handlers) {
      this._handlers = type$.List_of_bool_Function_KeyEvent._as(_handlers);
    },
    set$_modifiedHandlers(_modifiedHandlers) {
      this._modifiedHandlers = type$.nullable_List_of_bool_Function_KeyEvent._as(_modifiedHandlers);
    }
  };
  A.KeyDataTransitMode.prototype = {
    _enumToString$0() {
      return "KeyDataTransitMode." + C.S(this._core$_name);
    }
  };
  A.KeyMessage.prototype = {
    toString$0(_) {
      return "KeyMessage(" + C.S(this.events) + ")";
    }
  };
  A.KeyEventManager.prototype = {
    handleKeyData$1(data) {
      var t1, $event, _this = this;
      type$.KeyData._as(data);
      t1 = _this._transitMode;
      switch (t1 == null ? _this._transitMode = B.KeyDataTransitMode_1 : t1) {
        case B.KeyDataTransitMode_0:
          return false;
        case B.KeyDataTransitMode_1:
          if (C.boolConversionCheck(J.$eq$(data.physical, 0)) && C.boolConversionCheck(J.$eq$(data.logical, 0)))
            return false;
          $event = A.KeyEventManager__eventFromData(data);
          if (C.boolConversionCheck(data.synthesized) && C.boolConversionCheck(J.get$isEmpty$asx(_this._keyEventsSinceLastMessage))) {
            _this._hardwareKeyboard.handleKeyEvent$1($event);
            _this._dispatchKeyMessage$2(C._setArrayType([$event], type$.JSArray_KeyEvent), null);
          } else
            J.add$1$ax(_this._keyEventsSinceLastMessage, $event);
          return false;
      }
    },
    _dispatchKeyMessage$2(keyEvents, rawEvent) {
      var message, exception, stack, collector, t1, exception0;
      type$.List_KeyEvent._as(keyEvents);
      type$.nullable_RawKeyEvent._as(rawEvent);
      t1 = this.keyMessageHandler;
      if (t1 != null) {
        message = A.KeyMessage$(keyEvents, rawEvent);
        try {
          t1 = t1.call$1(message);
          return t1;
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          collector = null;
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while processing the key message handler"), exception, collector, "services library", false, stack));
        }
      }
      return false;
    },
    handleRawKeyMessage$1(message) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, rawEvent, shouldDispatch, t1, t2, t3, handled, t4;
      var $async$handleRawKeyMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._transitMode == null) {
                $async$self._transitMode = B.KeyDataTransitMode_0;
                $async$self._rawKeyboard.addListener$1($async$self.get$_convertRawEventAndStore());
              }
              rawEvent = A.RawKeyEvent_RawKeyEvent$fromMessage(type$.Map_String_dynamic._as(message));
              if (rawEvent instanceof A.RawKeyDownEvent) {
                shouldDispatch = C.boolConversionCheck(rawEvent.data.shouldDispatchEvent$0());
                t1 = $async$self._skippedRawKeysPressed;
                t2 = J.getInterceptor$ax(t1);
                if (!shouldDispatch)
                  t2.add$1(t1, rawEvent.get$physicalKey());
                else
                  t2.remove$1(t1, rawEvent.get$physicalKey());
              } else if (rawEvent instanceof A.RawKeyUpEvent) {
                t1 = $async$self._skippedRawKeysPressed;
                t2 = J.getInterceptor$asx(t1);
                t3 = C.boolConversionCheck(t2.contains$1(t1, rawEvent.get$physicalKey()));
                if (t3)
                  t2.remove$1(t1, rawEvent.get$physicalKey());
                shouldDispatch = !t3;
              } else
                shouldDispatch = true;
              if (shouldDispatch) {
                handled = $async$self._rawKeyboard.handleRawKeyEvent$1(rawEvent);
                for (t1 = $async$self._keyEventsSinceLastMessage, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1), t4 = $async$self._hardwareKeyboard; C.boolConversionCheck(t3.moveNext$0());)
                  handled = C.boolConversionCheck(t4.handleKeyEvent$1(t3.get$current())) || handled;
                C.boolConversionCheck(J.$eq$($async$self._transitMode, B.KeyDataTransitMode_0));
                handled = C.boolConversionCheck($async$self._dispatchKeyMessage$2(t1, rawEvent)) || handled;
                t2.clear$0(t1);
              } else
                handled = true;
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["handled", handled], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handleRawKeyMessage$1, $async$completer);
    },
    _convertDeviceType$1(rawEvent) {
      type$.RawKeyEvent._as(rawEvent);
      return B.KeyEventDeviceType_0;
    },
    _convertRawEventAndStore$1(rawEvent) {
      var physicalKey, logicalKey, t1, physicalKeysPressed, eventAfterwards, recordedLogicalMain, timeStamp, character, deviceType, mainEvent, t2, t3, t4, t5, t6, t7, _this = this;
      type$.RawKeyEvent._as(rawEvent);
      physicalKey = rawEvent.get$physicalKey();
      logicalKey = rawEvent.get$logicalKey();
      t1 = _this._hardwareKeyboard;
      physicalKeysPressed = t1.get$physicalKeysPressed();
      eventAfterwards = C._setArrayType([], type$.JSArray_KeyEvent);
      recordedLogicalMain = t1.lookUpLayout$1(physicalKey);
      timeStamp = D.ServicesBinding_instance().get$currentSystemFrameTimeStamp();
      character = rawEvent.character;
      if (C.boolConversionCheck(J.$eq$(character, "")))
        character = null;
      deviceType = _this._convertDeviceType$1(rawEvent);
      if (rawEvent instanceof A.RawKeyDownEvent)
        if (recordedLogicalMain == null) {
          mainEvent = A.KeyDownEvent$(character, deviceType, logicalKey, physicalKey, false, timeStamp);
          physicalKeysPressed.add$1(0, physicalKey);
        } else
          mainEvent = A.KeyRepeatEvent$(character, deviceType, recordedLogicalMain, physicalKey, timeStamp);
      else if (recordedLogicalMain == null)
        mainEvent = null;
      else {
        mainEvent = A.KeyUpEvent$(deviceType, recordedLogicalMain, physicalKey, false, timeStamp);
        physicalKeysPressed.remove$1(0, physicalKey);
      }
      for (t2 = _this._rawKeyboard, t3 = J.get$iterator$ax(physicalKeysPressed.difference$1(t2.get$physicalKeysPressed())), t4 = _this._keyEventsSinceLastMessage, t5 = J.getInterceptor$ax(t4); C.boolConversionCheck(t3.moveNext$0());) {
        t6 = t3.get$current();
        if (C.boolConversionCheck(t6.$eq(0, physicalKey)))
          F.JSArray_methods.add$1(eventAfterwards, A.KeyUpEvent$(deviceType, logicalKey, t6, true, timeStamp));
        else {
          t7 = t1.lookUpLayout$1(t6);
          t7.toString;
          t5.add$1(t4, A.KeyUpEvent$(deviceType, t7, t6, true, timeStamp));
        }
      }
      for (t1 = J.get$iterator$ax(t2.get$physicalKeysPressed().difference$1(physicalKeysPressed)); C.boolConversionCheck(t1.moveNext$0());) {
        t3 = t1.get$current();
        t6 = t2.lookUpLayout$1(t3);
        t6.toString;
        t5.add$1(t4, A.KeyDownEvent$(null, deviceType, t6, t3, true, timeStamp));
      }
      if (mainEvent != null)
        t5.add$1(t4, mainEvent);
      t5.addAll$1(t4, eventAfterwards);
    },
    set$keyMessageHandler(keyMessageHandler) {
      this.keyMessageHandler = type$.nullable_bool_Function_KeyMessage._as(keyMessageHandler);
    }
  };
  A._KeyEvent_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A.KeyboardInsertedContent.prototype = {
    toString$0(_) {
      var _this = this;
      return C.S(D.objectRuntimeType(_this, "KeyboardInsertedContent")) + "(" + C.S(_this.mimeType) + ", " + C.S(_this.uri) + ", " + C.S(_this.data) + ")";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.KeyboardInsertedContent && C.boolConversionCheck(J.$eq$(other.mimeType, _this.mimeType)) && C.boolConversionCheck(J.$eq$(other.uri, _this.uri)) && C.boolConversionCheck(J.$eq$(other.data, _this.data));
    },
    get$hashCode(_) {
      return C.Object_hash(this.mimeType, this.uri, this.data, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    }
  };
  A.PhysicalKeyboardKey.prototype = {
    get$debugName() {
      return null;
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.usbHidUsage);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), this.get$runtimeType(0))))
        return false;
      return other instanceof A.PhysicalKeyboardKey && C.boolConversionCheck(J.$eq$(other.usbHidUsage, this.usbHidUsage));
    },
    debugFillProperties$1(properties) {
      type$.DiagnosticPropertiesBuilder._as(properties);
      this.super$Diagnosticable$debugFillProperties(properties);
      properties.add$1(0, D.StringProperty$("usbHidUsage", "0x" + C.S(J.padLeft$2$s(J.toRadixString$1$n(this.usbHidUsage, 16), 8, "0")), E.C__NoDefaultValue, true, true));
      properties.add$1(0, D.StringProperty$("debugName", this.get$debugName(), null, true, true));
    }
  };
  A.MouseCursorManager.prototype = {
    handleDeviceCursorUpdate$3(device, triggeringEvent, cursorCandidates) {
      var t1, t2, lastSession, nextCursor, t3, nextSession;
      C._asInt(device);
      type$.nullable_PointerEvent._as(triggeringEvent);
      type$.Iterable_MouseCursor._as(cursorCandidates);
      if (type$.PointerRemovedEvent._is(triggeringEvent)) {
        J.remove$1$ax(this._lastSession, device);
        return;
      }
      t1 = this._lastSession;
      t2 = J.getInterceptor$asx(t1);
      lastSession = t2.$index(t1, device);
      nextCursor = A._DeferringMouseCursor_firstNonDeferred(cursorCandidates);
      if (nextCursor == null)
        nextCursor = this.fallbackMouseCursor;
      t3 = lastSession == null;
      if (C.boolConversionCheck(J.$eq$(t3 ? null : lastSession.get$cursor(), nextCursor)))
        return;
      nextSession = nextCursor.createSession$1(device);
      t2.$indexSet(t1, device, nextSession);
      if (!t3)
        lastSession.dispose$0();
      nextSession.activate$0();
    }
  };
  A.SwipeEdge.prototype = {
    _enumToString$0() {
      return "SwipeEdge." + C.S(this._core$_name);
    }
  };
  A.PredictiveBackEvent.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.PredictiveBackEvent && C.boolConversionCheck(J.$eq$(_this.touchOffset, other.touchOffset)) && C.boolConversionCheck(J.$eq$(_this.progress, other.progress)) && C.boolConversionCheck(J.$eq$(_this.swipeEdge, other.swipeEdge));
    },
    get$hashCode(_) {
      return C.Object_hash(this.touchOffset, this.progress, this.swipeEdge, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    },
    toString$0(_) {
      return "PredictiveBackEvent{touchOffset: " + C.S(this.touchOffset) + ", progress: " + C.S(this.progress) + ", swipeEdge: " + C.S(this.swipeEdge) + "}";
    }
  };
  A.KeyboardSide.prototype = {
    _enumToString$0() {
      return "KeyboardSide." + C.S(this._core$_name);
    }
  };
  A.ModifierKey.prototype = {
    _enumToString$0() {
      return "ModifierKey." + C.S(this._core$_name);
    }
  };
  A.RawKeyEventData.prototype = {
    get$modifiersPressed() {
      var t1, t2, side,
        result = C.LinkedHashMap_LinkedHashMap$_empty(type$.ModifierKey, type$.KeyboardSide);
      for (t1 = F.JSArray_methods.get$iterator(B.List_jV0); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (C.boolConversionCheck(this.isModifierPressed$1(t2))) {
          side = this.getModifierSide$1(t2);
          if (side != null)
            result.$indexSet(0, t2, side);
        }
      }
      return result;
    },
    shouldDispatchEvent$0() {
      return true;
    },
    $isDiagnosticable: 1
  };
  A.RawKeyEvent.prototype = {
    get$physicalKey() {
      return this.data.get$physicalKey();
    },
    get$logicalKey() {
      return this.data.get$logicalKey();
    },
    debugFillProperties$1(properties) {
      var _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("logicalKey", _this.get$logicalKey(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.LogicalKeyboardKey));
      properties.add$1(0, D.DiagnosticsProperty$("physicalKey", _this.get$physicalKey(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.PhysicalKeyboardKey));
      if (_this instanceof A.RawKeyDownEvent)
        properties.add$1(0, D.DiagnosticsProperty$("repeat", _this.repeat, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.bool));
    },
    $isDiagnosticable: 1
  };
  A.RawKeyDownEvent.prototype = {};
  A.RawKeyUpEvent.prototype = {};
  A.RawKeyboard0.prototype = {
    addListener$1(listener) {
      J.add$1$ax(this._raw_keyboard$_listeners, type$.void_Function_RawKeyEvent._as(listener));
    },
    handleRawKeyEvent$1($event) {
      var listener, exception, stack, collector, t1, t2, t3, exception0, _this = this;
      type$.RawKeyEvent._as($event);
      if ($event instanceof A.RawKeyDownEvent)
        J.$indexSet$ax(_this._keysPressed, $event.get$physicalKey(), $event.get$logicalKey());
      else if ($event instanceof A.RawKeyUpEvent)
        J.remove$1$ax(_this._keysPressed, $event.get$physicalKey());
      _this._synchronizeModifiers$1($event);
      for (t1 = _this._raw_keyboard$_listeners, t2 = J.get$iterator$ax(C.List_List$of(t1, true, type$.void_Function_RawKeyEvent)), t3 = J.getInterceptor$asx(t1); C.boolConversionCheck(t2.moveNext$0());) {
        listener = t2.get$current();
        try {
          if (C.boolConversionCheck(t3.contains$1(t1, listener)))
            listener.call$1($event);
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          collector = null;
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while processing a raw key listener"), exception, collector, "services library", false, stack));
        }
      }
      return false;
    },
    _synchronizeModifiers$1($event) {
      var t1, modifiersPressed, t2, modifierKeys, anySideKeys, t3, t4, t5, t6, thisKeyModifier, thisKeyModifier0, t7, t8, thisModifierKeys, mappedKeys, t9, nonModifierCapsLock, skipReleasingKey;
      type$.RawKeyEvent._as($event);
      t1 = $event.data;
      modifiersPressed = t1.get$modifiersPressed();
      t2 = type$.PhysicalKeyboardKey;
      modifierKeys = C.LinkedHashMap_LinkedHashMap$_empty(t2, type$.LogicalKeyboardKey);
      anySideKeys = C.LinkedHashSet_LinkedHashSet$_empty(t2);
      t3 = this._keysPressed;
      t4 = C.LinkedHashSet_LinkedHashSet$of(t3.get$keys(), t2);
      t5 = $event instanceof A.RawKeyDownEvent;
      if (t5)
        t4.add$1(0, $event.get$physicalKey());
      for (t6 = F.JSArray_methods.get$iterator(B.List_jV0), thisKeyModifier = null; C.boolConversionCheck(t6.moveNext$0());) {
        thisKeyModifier0 = t6.get$current();
        t7 = $.$get$RawKeyboard__modifierKeyMap();
        t8 = J.getInterceptor$asx(t7);
        thisModifierKeys = t8.$index(t7, A._ModifierSidePair$(thisKeyModifier0, B.KeyboardSide_3));
        if (thisModifierKeys == null)
          continue;
        if (C.boolConversionCheck(thisModifierKeys.contains$1(0, $event.get$physicalKey())))
          thisKeyModifier = thisKeyModifier0;
        if (C.boolConversionCheck(J.$eq$(modifiersPressed.$index(0, thisKeyModifier0), B.KeyboardSide_0))) {
          anySideKeys.addAll$1(0, thisModifierKeys);
          if (C.boolConversionCheck(thisModifierKeys.any$1(0, t4.get$contains(t4))))
            continue;
        }
        mappedKeys = modifiersPressed.$index(0, thisKeyModifier0) == null ? C.LinkedHashSet_LinkedHashSet$_empty(t2) : t8.$index(t7, A._ModifierSidePair$(thisKeyModifier0, modifiersPressed.$index(0, thisKeyModifier0)));
        if (mappedKeys == null)
          continue;
        for (t7 = mappedKeys.get$iterator(mappedKeys); C.boolConversionCheck(t7.moveNext$0());) {
          t8 = t7.get$current();
          t9 = J.$index$asx($.$get$RawKeyboard__allModifiers(), t8);
          t9.toString;
          modifierKeys.$indexSet(0, t8, t9);
        }
      }
      t1 = t1 instanceof A.RawKeyEventDataWeb;
      if (t1) {
        t2 = J.getInterceptor$asx(t3);
        nonModifierCapsLock = t2.$index(t3, B.PhysicalKeyboardKey_458809) != null && !C.boolConversionCheck(J.$eq$(t2.$index(t3, B.PhysicalKeyboardKey_458809), B.LogicalKeyboardKey_4294967556));
      } else
        nonModifierCapsLock = false;
      for (t2 = J.get$iterator$ax($.$get$RawKeyboard__allModifiersExceptFn().get$keys()), t4 = J.getInterceptor$ax(t3); C.boolConversionCheck(t2.moveNext$0());) {
        t6 = t2.get$current();
        skipReleasingKey = nonModifierCapsLock && C.boolConversionCheck(t6.$eq(0, B.PhysicalKeyboardKey_458809));
        if (!C.boolConversionCheck(anySideKeys.contains$1(0, t6)) && !skipReleasingKey)
          t4.remove$1(t3, t6);
      }
      t4.remove$1(t3, B.PhysicalKeyboardKey_18);
      t4.addAll$1(t3, modifierKeys);
      if (t5 && thisKeyModifier != null && !C.boolConversionCheck(t3.containsKey$1($event.get$physicalKey())))
        if (t1 && C.boolConversionCheck(J.$eq$($event.get$physicalKey(), B.PhysicalKeyboardKey_458982)))
          t4.$indexSet(t3, $event.get$physicalKey(), $event.get$logicalKey());
    },
    get$physicalKeysPressed() {
      return J.toSet$0$ax(this._keysPressed.get$keys());
    },
    lookUpLayout$1(physicalKey) {
      return J.$index$asx(this._keysPressed, type$.PhysicalKeyboardKey._as(physicalKey));
    }
  };
  A._ModifierSidePair.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), this.get$runtimeType(0))))
        return false;
      return other instanceof A._ModifierSidePair && C.boolConversionCheck(J.$eq$(other.modifier, this.modifier)) && C.boolConversionCheck(J.$eq$(other.side, this.side));
    },
    get$hashCode(_) {
      return C.Object_hash(this.modifier, this.side, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    }
  };
  A._RawKeyEvent_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A._RawKeyEventData_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A.RawKeyEventDataWeb.prototype = {
    get$physicalKey() {
      var t1 = this.code,
        t2 = B.Map_xwOPX.$index(0, t1);
      if (t2 == null) {
        t1 = J.get$hashCode$(t1);
        if (typeof t1 !== "number")
          return C.iae(t1);
        t1 = A.PhysicalKeyboardKey$(98784247808 + t1);
      } else
        t1 = t2;
      return t1;
    },
    get$logicalKey() {
      var newKey,
        t1 = this.key,
        t2 = B.Map_08qt.$index(0, t1),
        maybeLocationKey = t2 == null ? null : J.$index$asx(t2, this.location);
      if (maybeLocationKey != null)
        return maybeLocationKey;
      newKey = B.Map_o0QDz.$index(0, t1);
      if (newKey != null)
        return newKey;
      t2 = J.getInterceptor$asx(t1);
      if (J.$eq$(t2.get$length(t1), 1))
        return A.LogicalKeyboardKey$(J.codeUnitAt$1$s(t2.toLowerCase$0(t1), 0));
      t1 = J.get$hashCode$(this.code);
      if (typeof t1 !== "number")
        return t1.$add();
      return A.LogicalKeyboardKey$(t1 + 98784247808);
    },
    isModifierPressed$1(key) {
      var t1, _this = this;
      type$.ModifierKey._as(key);
      $label0$0: {
        if (B.ModifierKey_0 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 4) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_1 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 1) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_2 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 2) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_3 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 8) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_5 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 16) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_4 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 32) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_6 === key) {
          t1 = _this.metaState;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 64) !== 0;
          break $label0$0;
        }
        if (B.ModifierKey_7 === key || B.ModifierKey_8 === key) {
          t1 = false;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    getModifierSide$1(key) {
      type$.ModifierKey._as(key);
      return B.KeyboardSide_0;
    },
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = type$.String;
      properties.add$1(0, D.DiagnosticsProperty$("code", _this.code, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("key", _this.key, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      t1 = type$.int;
      properties.add$1(0, D.DiagnosticsProperty$("location", _this.location, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("metaState", _this.metaState, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("keyCode", _this.keyCode, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.RawKeyEventDataWeb && C.boolConversionCheck(J.$eq$(other.code, _this.code)) && C.boolConversionCheck(J.$eq$(other.key, _this.key)) && C.boolConversionCheck(J.$eq$(other.location, _this.location)) && C.boolConversionCheck(J.$eq$(other.metaState, _this.metaState)) && C.boolConversionCheck(J.$eq$(other.keyCode, _this.keyCode));
    },
    get$hashCode(_) {
      var _this = this;
      return C.Object_hash(_this.code, _this.key, _this.location, _this.metaState, _this.keyCode, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    }
  };
  A.RestorationManager.prototype = {
    RestorationManager$0() {
      D.ChangeNotifier_maybeDispatchObjectCreation(this);
      this.initChannels$0();
    },
    initChannels$0() {
      B.OptionalMethodChannel_IJ0.setMethodCallHandler$1(this.get$_methodHandler());
    },
    get$rootBucket() {
      var _this = this;
      if (C.boolConversionCheck(_this._rootBucketIsValid))
        return D.SynchronousFuture$(_this._rootBucket, type$.nullable_RestorationBucket);
      if (_this._pendingRootBucket == null) {
        _this.set$_pendingRootBucket(C.Completer_Completer(type$.nullable_RestorationBucket));
        _this._getRootBucketFromEngine$0();
      }
      return _this._pendingRootBucket.get$future();
    },
    get$isReplacing() {
      return this._isReplacing;
    },
    _getRootBucketFromEngine$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, config;
      var $async$_getRootBucketFromEngine$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return C._asyncAwait(B.OptionalMethodChannel_IJ0.invokeMethod$1$1("get", type$.Map_of_nullable_Object_and_nullable_Object), $async$_getRootBucketFromEngine$0);
            case 3:
              // returning from await.
              config = $async$result;
              if ($async$self._pendingRootBucket == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._parseAndHandleRestorationUpdateFromEngine$1(config);
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_getRootBucketFromEngine$0, $async$completer);
    },
    _parseAndHandleRestorationUpdateFromEngine$1(update) {
      var t1, t2;
      type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(update);
      t1 = update == null;
      if (!t1) {
        t2 = update.$index(0, "enabled");
        t2.toString;
        C._asBool(t2);
      } else
        t2 = false;
      this.handleRestorationUpdateFromEngine$2$data$enabled(t1 ? null : type$.nullable_Uint8List._as(update.$index(0, "data")), t2);
    },
    handleRestorationUpdateFromEngine$2$data$enabled(data, enabled) {
      var t1, oldRoot, t2, _this = this;
      C._asBool(enabled);
      type$.nullable_Uint8List._as(data);
      t1 = C.boolConversionCheck(_this._rootBucketIsValid) && enabled;
      _this._isReplacing = t1;
      if (t1)
        D.SchedulerBinding_instance().addPostFrameCallback$2$debugLabel(new A.RestorationManager_handleRestorationUpdateFromEngine_closure(_this), "RestorationManager.resetIsReplacing");
      oldRoot = _this._rootBucket;
      t1 = enabled ? A.RestorationBucket$root(_this, _this._decodeRestorationData$1(data)) : null;
      _this._rootBucket = t1;
      _this._rootBucketIsValid = true;
      t2 = _this._pendingRootBucket;
      if (t2 != null)
        t2.complete$1(t1);
      _this.set$_pendingRootBucket(null);
      if (!C.boolConversionCheck(J.$eq$(_this._rootBucket, oldRoot))) {
        _this.notifyListeners$0();
        if (oldRoot != null)
          oldRoot.dispose$0();
      }
    },
    sendToEngine$1(encodedData) {
      return B.OptionalMethodChannel_IJ0.invokeMethod$1$2("put", type$.Uint8List._as(encodedData), type$.void);
    },
    _methodHandler$1($call) {
      return this._methodHandler$body$RestorationManager(type$.MethodCall._as($call));
    },
    _methodHandler$body$RestorationManager($call) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$_methodHandler$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $call.method;
              switch (t1) {
                case "push":
                  $async$self._parseAndHandleRestorationUpdateFromEngine$1(type$.Map_of_nullable_Object_and_nullable_Object._as($call.$arguments));
                  break;
                default:
                  throw C.wrapException(C.UnimplementedError$(C.S(t1) + " was invoked but isn't implemented by " + C.S($async$self.get$runtimeType(0))));
              }
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$_methodHandler$1, $async$completer);
    },
    _decodeRestorationData$1(data) {
      type$.nullable_Uint8List._as(data);
      if (data == null)
        return null;
      return type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(E.C_StandardMessageCodec.decodeMessage$1(J.asByteData$2$x(F.NativeUint8List_methods.get$buffer(data), F.NativeUint8List_methods.get$offsetInBytes(data), F.NativeUint8List_methods.get$lengthInBytes(data))));
    },
    _encodeRestorationData$1(data) {
      var t1 = E.C_StandardMessageCodec.encodeMessage$1(type$.Map_of_nullable_Object_and_nullable_Object._as(data));
      t1.toString;
      return J.asUint8List$2$x(F.NativeByteData_methods.get$buffer(t1), F.NativeByteData_methods.get$offsetInBytes(t1), F.NativeByteData_methods.get$lengthInBytes(t1));
    },
    scheduleSerializationFor$1(bucket) {
      var _this = this;
      J.add$1$ax(_this._bucketsNeedingSerialization, type$.RestorationBucket._as(bucket));
      if (!C.boolConversionCheck(_this._serializationScheduled)) {
        _this._serializationScheduled = true;
        D.SchedulerBinding_instance().addPostFrameCallback$2$debugLabel(new A.RestorationManager_scheduleSerializationFor_closure(_this), "RestorationManager.doSerialization");
      }
    },
    unscheduleSerializationFor$1(bucket) {
      J.remove$1$ax(this._bucketsNeedingSerialization, type$.RestorationBucket._as(bucket));
    },
    _doSerialization$0() {
      var t1, t2, t3, _this = this;
      if (!C.boolConversionCheck(_this._serializationScheduled))
        return;
      _this._serializationScheduled = false;
      for (t1 = _this._bucketsNeedingSerialization, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1); C.boolConversionCheck(t3.moveNext$0());)
        t3.get$current().finalize$0();
      t2.clear$0(t1);
      _this.sendToEngine$1(_this._encodeRestorationData$1(_this._rootBucket._rawData));
    },
    set$_pendingRootBucket(_pendingRootBucket) {
      this._pendingRootBucket = type$.nullable_Completer_nullable_RestorationBucket._as(_pendingRootBucket);
    }
  };
  A.RestorationBucket.prototype = {
    RestorationBucket$empty$2$debugOwner$restorationId(debugOwner, restorationId) {
      this._maybeDispatchObjectCreation$0();
    },
    RestorationBucket$root$2$manager$rawData(manager, rawData) {
      this._maybeDispatchObjectCreation$0();
    },
    RestorationBucket$child$3$debugOwner$parent$restorationId(debugOwner, $parent, restorationId) {
      this._maybeDispatchObjectCreation$0();
    },
    get$debugOwner() {
      return null;
    },
    get$isReplacing() {
      var t1 = this._restoration$_manager;
      t1 = t1 == null ? null : t1.get$isReplacing();
      return t1 == null ? false : t1;
    },
    get$restorationId() {
      return this._restorationId;
    },
    get$_rawChildren() {
      var t1 = this._rawData.putIfAbsent$2("c", new A.RestorationBucket__rawChildren_closure());
      t1.toString;
      return type$.Map_of_nullable_Object_and_nullable_Object._as(t1);
    },
    get$_rawValues() {
      var t1 = this._rawData.putIfAbsent$2("v", new A.RestorationBucket__rawValues_closure());
      t1.toString;
      return type$.Map_of_nullable_Object_and_nullable_Object._as(t1);
    },
    read$1$1(restorationId, $P) {
      C._asString(restorationId);
      return $P._eval$1("0?")._as(J.$index$asx(this.get$_rawValues(), restorationId));
    },
    write$1$2(restorationId, value, $P) {
      var _this = this;
      C._asString(restorationId);
      $P._as(value);
      if (!C.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$_rawValues(), restorationId), value)) || !C.boolConversionCheck(_this.get$_rawValues().containsKey$1(restorationId))) {
        J.$indexSet$ax(_this.get$_rawValues(), restorationId, value);
        _this._markNeedsSerialization$0();
      }
    },
    remove$1$1(_, restorationId, $P) {
      var needsUpdate, result, _this = this;
      C._asString(restorationId);
      needsUpdate = _this.get$_rawValues().containsKey$1(restorationId);
      result = $P._eval$1("0?")._as(J.remove$1$ax(_this.get$_rawValues(), restorationId));
      if (C.boolConversionCheck(J.get$isEmpty$asx(_this.get$_rawValues())))
        J.remove$1$ax(_this._rawData, "v");
      if (needsUpdate)
        _this._markNeedsSerialization$0();
      return result;
    },
    contains$1(_, restorationId) {
      C._asString(restorationId);
      return this.get$_rawValues().containsKey$1(restorationId);
    },
    claimChild$2$debugOwner(restorationId, debugOwner) {
      var t1, child, _this = this;
      C._asString(restorationId);
      t1 = _this._claimedChildren;
      if (C.boolConversionCheck(t1.containsKey$1(restorationId)) || !C.boolConversionCheck(_this.get$_rawChildren().containsKey$1(restorationId))) {
        child = A.RestorationBucket$empty(debugOwner, restorationId);
        _this.adoptChild$1(child);
        return child;
      }
      child = A.RestorationBucket$child(debugOwner, _this, restorationId);
      J.$indexSet$ax(t1, restorationId, child);
      return child;
    },
    adoptChild$1(child) {
      var t1, _this = this;
      type$.RestorationBucket._as(child);
      if (!C.boolConversionCheck(J.$eq$(child._restoration$_parent, _this))) {
        t1 = child._restoration$_parent;
        if (t1 != null)
          t1._removeChildData$1(child);
        child._restoration$_parent = _this;
        _this._addChildData$1(child);
        if (!C.boolConversionCheck(J.$eq$(child._restoration$_manager, _this._restoration$_manager)))
          _this._recursivelyUpdateManager$1(child);
      }
    },
    _restoration$_dropChild$1(child) {
      type$.RestorationBucket._as(child);
      this._removeChildData$1(child);
      child._restoration$_parent = null;
      if (child._restoration$_manager != null) {
        child._restoration$_updateManager$1(null);
        child._visitChildren$1(this.get$_recursivelyUpdateManager());
      }
    },
    _markNeedsSerialization$0() {
      var t1, _this = this;
      if (!C.boolConversionCheck(_this._needsSerialization)) {
        _this._needsSerialization = true;
        t1 = _this._restoration$_manager;
        if (t1 != null)
          t1.scheduleSerializationFor$1(_this);
      }
    },
    finalize$0() {
      this._needsSerialization = false;
    },
    _recursivelyUpdateManager$1(bucket) {
      type$.RestorationBucket._as(bucket);
      bucket._restoration$_updateManager$1(this._restoration$_manager);
      bucket._visitChildren$1(this.get$_recursivelyUpdateManager());
    },
    _restoration$_updateManager$1(newManager) {
      var t1, _this = this;
      type$.nullable_RestorationManager._as(newManager);
      if (C.boolConversionCheck(J.$eq$(_this._restoration$_manager, newManager)))
        return;
      if (C.boolConversionCheck(_this._needsSerialization)) {
        t1 = _this._restoration$_manager;
        if (t1 != null)
          t1.unscheduleSerializationFor$1(_this);
      }
      _this._restoration$_manager = newManager;
      if (C.boolConversionCheck(_this._needsSerialization) && newManager != null) {
        _this._needsSerialization = false;
        _this._markNeedsSerialization$0();
      }
    },
    _removeChildData$1(child) {
      var t1, t2, pendingChildren, t3, _this = this;
      type$.RestorationBucket._as(child);
      if (C.boolConversionCheck(J.$eq$(J.remove$1$ax(_this._claimedChildren, child.get$restorationId()), child))) {
        J.remove$1$ax(_this.get$_rawChildren(), child.get$restorationId());
        t1 = _this._childrenToAdd;
        t2 = J.getInterceptor$asx(t1);
        pendingChildren = t2.$index(t1, child.get$restorationId());
        if (pendingChildren != null) {
          t3 = J.getInterceptor$ax(pendingChildren);
          _this._finalizeAddChildData$1(t3.removeLast$0(pendingChildren));
          if (C.boolConversionCheck(t3.get$isEmpty(pendingChildren)))
            t2.remove$1(t1, child.get$restorationId());
        }
        if (C.boolConversionCheck(J.get$isEmpty$asx(_this.get$_rawChildren())))
          J.remove$1$ax(_this._rawData, "c");
        _this._markNeedsSerialization$0();
        return;
      }
      t1 = _this._childrenToAdd;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, child.get$restorationId());
      if (t3 != null)
        J.remove$1$ax(t3, child);
      t3 = t2.$index(t1, child.get$restorationId());
      t3 = t3 == null ? null : J.get$isEmpty$asx(t3);
      if (C.boolConversionCheck(t3 == null ? false : t3))
        t2.remove$1(t1, child.get$restorationId());
    },
    _addChildData$1(child) {
      var _this = this;
      type$.RestorationBucket._as(child);
      if (C.boolConversionCheck(_this._claimedChildren.containsKey$1(child.get$restorationId()))) {
        J.add$1$ax(_this._childrenToAdd.putIfAbsent$2(child.get$restorationId(), new A.RestorationBucket__addChildData_closure()), child);
        _this._markNeedsSerialization$0();
        return;
      }
      _this._finalizeAddChildData$1(child);
      _this._markNeedsSerialization$0();
    },
    _finalizeAddChildData$1(child) {
      type$.RestorationBucket._as(child);
      J.$indexSet$ax(this._claimedChildren, child.get$restorationId(), child);
      J.$indexSet$ax(this.get$_rawChildren(), child.get$restorationId(), child._rawData);
    },
    _visitChildren$2$concurrentModification(visitor, concurrentModification) {
      var children;
      type$.void_Function_RestorationBucket._as(visitor);
      C._asBool(concurrentModification);
      children = J.followedBy$1$ax(this._claimedChildren.get$values(), J.expand$1$1$ax(this._childrenToAdd.get$values(), new A.RestorationBucket__visitChildren_closure(), type$.RestorationBucket));
      J.forEach$1$ax(concurrentModification ? J.toList$1$growable$ax(children, false) : children, visitor);
    },
    _visitChildren$1(visitor) {
      return this._visitChildren$2$concurrentModification(visitor, false);
    },
    rename$1(newRestorationId) {
      var t1, _this = this;
      C._asString(newRestorationId);
      if (newRestorationId === _this.get$restorationId())
        return;
      t1 = _this._restoration$_parent;
      if (t1 != null)
        t1._removeChildData$1(_this);
      _this._restorationId = newRestorationId;
      t1 = _this._restoration$_parent;
      if (t1 != null)
        t1._addChildData$1(_this);
    },
    _maybeDispatchObjectCreation$0() {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type_RestorationBucket_QTB), "package:flutter/services.dart", this);
    },
    dispose$0() {
      var t1, _this = this;
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectDisposed$1$object(_this);
      _this._visitChildren$2$concurrentModification(_this.get$_restoration$_dropChild(), true);
      J.clear$0$ax(_this._claimedChildren);
      J.clear$0$ax(_this._childrenToAdd);
      t1 = _this._restoration$_parent;
      if (t1 != null)
        t1._removeChildData$1(_this);
      _this._restoration$_parent = null;
      _this._restoration$_updateManager$1(null);
    },
    toString$0(_) {
      return C.S(D.objectRuntimeType(this, "RestorationBucket")) + "(restorationId: " + C.S(this.get$restorationId()) + ", owner: " + C.S(this.get$debugOwner()) + ")";
    }
  };
  A.ServicesServiceExtensions.prototype = {
    _enumToString$0() {
      return "ServicesServiceExtensions." + C.S(this._core$_name);
    }
  };
  A.SystemUiOverlayStyle.prototype = {
    _toMap$0() {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this.systemNavigationBarColor;
      t1 = t1 == null ? _null : t1.get$value();
      t2 = _this.systemNavigationBarDividerColor;
      t2 = t2 == null ? _null : t2.get$value();
      t3 = _this.statusBarColor;
      t3 = t3 == null ? _null : t3.get$value();
      t4 = _this.statusBarBrightness;
      t4 = t4 == null ? _null : J.toString$0$(t4);
      t5 = _this.statusBarIconBrightness;
      t5 = t5 == null ? _null : J.toString$0$(t5);
      t6 = _this.systemNavigationBarIconBrightness;
      t6 = t6 == null ? _null : J.toString$0$(t6);
      return C.LinkedHashMap_LinkedHashMap$_literal(["systemNavigationBarColor", t1, "systemNavigationBarDividerColor", t2, "systemStatusBarContrastEnforced", _this.systemStatusBarContrastEnforced, "statusBarColor", t3, "statusBarBrightness", t4, "statusBarIconBrightness", t5, "systemNavigationBarIconBrightness", t6, "systemNavigationBarContrastEnforced", _this.systemNavigationBarContrastEnforced], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return C.S(D.objectRuntimeType(this, "SystemUiOverlayStyle")) + "(" + C.S(this._toMap$0()) + ")";
    },
    get$hashCode(_) {
      var _this = this;
      return C.Object_hash(_this.systemNavigationBarColor, _this.systemNavigationBarDividerColor, _this.systemNavigationBarContrastEnforced, _this.statusBarColor, _this.statusBarBrightness, _this.statusBarIconBrightness, _this.systemStatusBarContrastEnforced, _this.systemNavigationBarIconBrightness, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.SystemUiOverlayStyle && C.boolConversionCheck(J.$eq$(other.systemNavigationBarColor, _this.systemNavigationBarColor)) && C.boolConversionCheck(J.$eq$(other.systemNavigationBarDividerColor, _this.systemNavigationBarDividerColor)) && C.boolConversionCheck(J.$eq$(other.systemNavigationBarContrastEnforced, _this.systemNavigationBarContrastEnforced)) && C.boolConversionCheck(J.$eq$(other.statusBarColor, _this.statusBarColor)) && C.boolConversionCheck(J.$eq$(other.statusBarIconBrightness, _this.statusBarIconBrightness)) && C.boolConversionCheck(J.$eq$(other.statusBarBrightness, _this.statusBarBrightness)) && C.boolConversionCheck(J.$eq$(other.systemStatusBarContrastEnforced, _this.systemStatusBarContrastEnforced)) && C.boolConversionCheck(J.$eq$(other.systemNavigationBarIconBrightness, _this.systemNavigationBarIconBrightness));
    }
  };
  A.TextEditingDelta.prototype = {$isDiagnosticable: 1};
  A.TextEditingDeltaInsertion.prototype = {
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = type$.String;
      properties.add$1(0, D.DiagnosticsProperty$("oldText", _this.oldText, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("textInserted", _this.textInserted, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("insertionOffset", _this.insertionOffset, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.int));
      properties.add$1(0, D.DiagnosticsProperty$("selection", _this.selection, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextSelection));
      properties.add$1(0, D.DiagnosticsProperty$("composing", _this.composing, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextRange));
    }
  };
  A.TextEditingDeltaDeletion.prototype = {
    get$textDeleted() {
      var t1 = this.deletedRange;
      return J.substring$2$s(this.oldText, t1.start, t1.end);
    },
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = type$.String;
      properties.add$1(0, D.DiagnosticsProperty$("oldText", _this.oldText, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("textDeleted", _this.get$textDeleted(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      t1 = type$.TextRange;
      properties.add$1(0, D.DiagnosticsProperty$("deletedRange", _this.deletedRange, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("selection", _this.selection, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextSelection));
      properties.add$1(0, D.DiagnosticsProperty$("composing", _this.composing, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
    }
  };
  A.TextEditingDeltaReplacement.prototype = {
    get$textReplaced() {
      var t1 = this.replacedRange;
      return J.substring$2$s(this.oldText, t1.start, t1.end);
    },
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = type$.String;
      properties.add$1(0, D.DiagnosticsProperty$("oldText", _this.oldText, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("textReplaced", _this.get$textReplaced(), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("replacementText", _this.replacementText, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      t1 = type$.TextRange;
      properties.add$1(0, D.DiagnosticsProperty$("replacedRange", _this.replacedRange, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("selection", _this.selection, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextSelection));
      properties.add$1(0, D.DiagnosticsProperty$("composing", _this.composing, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
    }
  };
  A.TextEditingDeltaNonTextUpdate.prototype = {
    debugFillProperties$1(properties) {
      var _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      _this.super$Diagnosticable$debugFillProperties(properties);
      properties.add$1(0, D.DiagnosticsProperty$("oldText", _this.oldText, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.String));
      properties.add$1(0, D.DiagnosticsProperty$("selection", _this.selection, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextSelection));
      properties.add$1(0, D.DiagnosticsProperty$("composing", _this.composing, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.TextRange));
    }
  };
  A._TextEditingDelta_Object_Diagnosticable.prototype = {$isDiagnosticable: 1};
  A.TextInputType.prototype = {
    get$_text_input$_name() {
      return "TextInputType." + C.S(F.JSArray_methods.$index(B.List_cRy, this.index));
    },
    toJson$0() {
      return C.LinkedHashMap_LinkedHashMap$_literal(["name", this.get$_text_input$_name(), "signed", null, "decimal", null], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return C.S(D.objectRuntimeType(this, "TextInputType")) + "(name: " + C.S(this.get$_text_input$_name()) + ", signed: null, decimal: null)";
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.TextInputType)
        t1 = C.boolConversionCheck(J.$eq$(other.index, this.index));
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return C.Object_hash(this.index, null, null, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    }
  };
  A.TextInputAction.prototype = {
    _enumToString$0() {
      return "TextInputAction." + C.S(this._core$_name);
    }
  };
  A.FloatingCursorDragState.prototype = {
    _enumToString$0() {
      return "FloatingCursorDragState." + C.S(this._core$_name);
    }
  };
  A.RawFloatingCursorPoint.prototype = {};
  A.TextEditingValue.prototype = {
    toJSON$0() {
      var t1 = this.selection,
        t2 = this.composing;
      return C.LinkedHashMap_LinkedHashMap$_literal(["text", this.text, "selectionBase", t1.baseOffset, "selectionExtent", t1.extentOffset, "selectionAffinity", J.toString$0$(t1.affinity), "selectionIsDirectional", t1.isDirectional, "composingBase", t2.start, "composingExtent", t2.end], type$.String, type$.dynamic);
    },
    toString$0(_) {
      var _this = this;
      return C.S(D.objectRuntimeType(_this, "TextEditingValue")) + "(text: \u2524" + C.S(_this.text) + "\u251c, selection: " + C.S(_this.selection) + ", composing: " + C.S(_this.composing) + ")";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return other instanceof A.TextEditingValue && C.boolConversionCheck(J.$eq$(other.text, _this.text)) && C.boolConversionCheck(J.$eq$(other.selection, _this.selection)) && C.boolConversionCheck(J.$eq$(other.composing, _this.composing));
    },
    get$hashCode(_) {
      return C.Object_hash(J.get$hashCode$(this.text), J.get$hashCode$(this.selection), J.get$hashCode$(this.composing), F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    }
  };
  A.TextInput.prototype = {
    TextInput$_$0() {
      this.set$_channel(B.OptionalMethodChannel_6FR);
      this.get$_channel().setMethodCallHandler$1(this.get$_loudlyHandleTextInputInvocation());
    },
    _attach$2(connection, configuration) {
      type$.TextInputConnection._as(connection);
      type$.TextInputConfiguration._as(configuration);
      this._currentConnection = connection;
      this.set$_currentConfiguration(configuration);
      this._setClient$2(connection.get$_client(), configuration);
    },
    get$_channel() {
      return this.__TextInput__channel_A;
    },
    set$_channel(value) {
      this.__TextInput__channel_A = type$.MethodChannel._as(value);
    },
    get$_currentConfiguration() {
      return this.__TextInput__currentConfiguration_A;
    },
    set$_currentConfiguration(value) {
      this.__TextInput__currentConfiguration_A = type$.TextInputConfiguration._as(value);
    },
    _loudlyHandleTextInputInvocation$1($call) {
      return this._loudlyHandleTextInputInvocation$body$TextInput(type$.MethodCall._as($call));
    },
    _loudlyHandleTextInputInvocation$body$TextInput($call) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, exception, stack, t1, exception0, $async$exception0;
      var $async$_loudlyHandleTextInputInvocation$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return C._asyncAwait($async$self._handleTextInputInvocation$1($call), $async$_loudlyHandleTextInputInvocation$1);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception0 = $async$currentError;
              exception = C.unwrapException($async$exception0);
              stack = C.getTraceFromException($async$exception0);
              D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("during method call " + C.S($call.method)), exception, new A.TextInput__loudlyHandleTextInputInvocation_closure($call), "services library", false, stack));
              throw $async$exception0;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return C._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return C._asyncStartSync($async$_loudlyHandleTextInputInvocation$1, $async$completer);
    },
    _handleTextInputInvocation$1(methodCall) {
      return this._handleTextInputInvocation$body$TextInput(type$.MethodCall._as(methodCall));
    },
    _handleTextInputInvocation$body$TextInput(methodCall) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, args, t1, t2, editingValue, value, t3, encoded, $content, firstArg, method;
      var $async$_handleTextInputInvocation$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                method = methodCall.method;
                switch (method) {
                  case "TextInputClient.focusElement":
                    args = type$.List_dynamic._as(methodCall.$arguments);
                    t1 = J.getInterceptor$asx(args);
                    t2 = J.$index$asx($async$self._scribbleClients, t1.$index(args, 0));
                    if (t2 != null)
                      t2.onScribbleFocus$1(D.Offset$(F.JSNumber_methods.toDouble$0(C._asNum(t1.$index(args, 1))), F.JSNumber_methods.toDouble$0(C._asNum(t1.$index(args, 2)))));
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case "TextInputClient.requestElementsInRect":
                    t1 = type$.List_dynamic;
                    args = J.toList$0$ax(J.map$1$1$ax(J.cast$1$0$ax(t1._as(methodCall.$arguments), type$.num), new A.TextInput__handleTextInputInvocation_closure(), type$.double));
                    $async$returnValue = J.toList$0$ax(J.map$1$1$ax(J.where$1$ax($async$self._scribbleClients.get$keys(), new A.TextInput__handleTextInputInvocation_closure0($async$self, args)), new A.TextInput__handleTextInputInvocation_closure1($async$self), t1));
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case "TextInputClient.scribbleInteractionBegan":
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case "TextInputClient.scribbleInteractionFinished":
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
                t1 = $async$self._currentConnection;
                if (t1 == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (method === "TextInputClient.requestExistingInputState") {
                  $async$self._attach$2(t1, $async$self.get$_currentConfiguration());
                  editingValue = $async$self._currentConnection.get$_client().get$currentTextEditingValue();
                  if (editingValue != null)
                    $async$self._setEditingState$1(editingValue);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = type$.List_dynamic;
                args = t2._as(methodCall.$arguments);
                if (method === "TextInputClient.updateEditingStateWithTag") {
                  t1.get$_client().get$currentAutofillScope();
                  t1 = type$.Map_String_dynamic;
                  editingValue = t1._as(J.$index$asx(args, 1));
                  for (t2 = J.get$iterator$ax(editingValue.get$keys()); C.boolConversionCheck(t2.moveNext$0());)
                    A.TextEditingValue_TextEditingValue$fromJSON(t1._as(editingValue.$index(0, t2.get$current())));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = J.getInterceptor$asx(args);
                if (C._asInt(t1.$index(args, 0)) !== $async$self._currentConnection.get$_text_input$_id()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                switch (method) {
                  case "TextInputClient.updateEditingState":
                    value = A.TextEditingValue_TextEditingValue$fromJSON(type$.Map_String_dynamic._as(t1.$index(args, 1)));
                    $.$get$TextInput__instance()._updateEditingValue$2$exclude(value, $.$get$_PlatformTextInputControl_instance());
                    break;
                  case "TextInputClient.updateEditingStateWithDeltas":
                    t3 = type$.Map_String_dynamic;
                    encoded = t3._as(t1.$index(args, 1));
                    t1 = C._setArrayType([], type$.JSArray_TextEditingDelta);
                    for (t2 = J.get$iterator$ax(t2._as(encoded.$index(0, "deltas"))); C.boolConversionCheck(t2.moveNext$0());)
                      t1.push(A.TextEditingDelta_TextEditingDelta$fromJSON(t3._as(t2.get$current())));
                    type$.DeltaTextInputClient._as($async$self._currentConnection.get$_client()).updateEditingValueWithDeltas$1(t1);
                    break;
                  case "TextInputClient.performAction":
                    if (C._asString(t1.$index(args, 1)) === "TextInputAction.commitContent") {
                      $content = A.KeyboardInsertedContent$fromJson(type$.Map_String_dynamic._as(t1.$index(args, 2)));
                      $async$self._currentConnection.get$_client().insertContent$1($content);
                    } else
                      $async$self._currentConnection.get$_client().performAction$1(A._toTextInputAction(C._asString(t1.$index(args, 1))));
                    break;
                  case "TextInputClient.performSelectors":
                    J.forEach$1$ax(J.cast$1$0$ax(t2._as(t1.$index(args, 1)), type$.String), $async$self._currentConnection.get$_client().get$performSelector());
                    break;
                  case "TextInputClient.performPrivateCommand":
                    t2 = type$.Map_String_dynamic;
                    firstArg = t2._as(t1.$index(args, 1));
                    t1 = $async$self._currentConnection.get$_client();
                    t3 = C._asString(firstArg.$index(0, "action"));
                    t1.performPrivateCommand$2(t3, firstArg.$index(0, "data") == null ? C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic) : t2._as(firstArg.$index(0, "data")));
                    break;
                  case "TextInputClient.updateFloatingCursor":
                    $async$self._currentConnection.get$_client().updateFloatingCursor$1(A._toTextPoint(A._toTextCursorAction(C._asString(t1.$index(args, 1))), type$.Map_String_dynamic._as(t1.$index(args, 2))));
                    break;
                  case "TextInputClient.onConnectionClosed":
                    $async$self._currentConnection.get$_client().connectionClosed$0();
                    break;
                  case "TextInputClient.showAutocorrectionPromptRect":
                    $async$self._currentConnection.get$_client().showAutocorrectionPromptRect$2(C._asInt(t1.$index(args, 1)), C._asInt(t1.$index(args, 2)));
                    break;
                  case "TextInputClient.showToolbar":
                    $async$self._currentConnection.get$_client().showToolbar$0();
                    break;
                  case "TextInputClient.insertTextPlaceholder":
                    $async$self._currentConnection.get$_client().insertTextPlaceholder$1(D.Size$(F.JSNumber_methods.toDouble$0(C._asNum(t1.$index(args, 1))), F.JSNumber_methods.toDouble$0(C._asNum(t1.$index(args, 2)))));
                    break;
                  case "TextInputClient.removeTextPlaceholder":
                    $async$self._currentConnection.get$_client().removeTextPlaceholder$0();
                    break;
                  default:
                    throw C.wrapException(D.MissingPluginException$(null));
                }
              case 1:
                // return
                return C._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return C._asyncStartSync($async$_handleTextInputInvocation$1, $async$completer);
    },
    _setClient$2(client, configuration) {
      var t1;
      type$.TextInputClient._as(client);
      type$.TextInputConfiguration._as(configuration);
      for (t1 = J.get$iterator$ax(this._inputControls); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().attach$2(client, configuration);
    },
    _setEditingState$1(value) {
      var t1;
      type$.TextEditingValue._as(value);
      for (t1 = J.get$iterator$ax(this._inputControls); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().setEditingState$1(value);
    },
    _updateEditingValue$2$exclude(value, exclude) {
      var t1, t2;
      type$.TextEditingValue._as(value);
      type$.nullable_TextInputControl._as(exclude);
      if (this._currentConnection == null)
        return;
      for (t1 = J.get$iterator$ax($.$get$TextInput__instance()._inputControls); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (t2 !== exclude)
          t2.setEditingState$1(value);
      }
      $.$get$TextInput__instance()._currentConnection.get$_client().updateEditingValue$1(value);
    }
  };
  A.TextInputControl.prototype = {};
  A._PlatformTextInputControl.prototype = {
    get$_channel() {
      return $.$get$TextInput__instance().get$_channel();
    },
    _configurationToJson$1(configuration) {
      var json, none;
      type$.TextInputConfiguration._as(configuration);
      json = configuration.toJson$0();
      if (!C.boolConversionCheck(J.$eq$($.$get$TextInput__instance()._currentControl, $.$get$_PlatformTextInputControl_instance()))) {
        none = B.TextInputType_10.toJson$0();
        none.$indexSet(0, "isMultiline", J.$eq$(configuration.get$inputType(), B.TextInputType_1));
        json.$indexSet(0, "inputType", none);
      }
      return json;
    },
    attach$2(client, configuration) {
      type$.TextInputClient._as(client);
      type$.TextInputConfiguration._as(configuration);
      this.get$_channel().invokeMethod$1$2("TextInput.setClient", C._setArrayType([$.$get$TextInput__instance()._currentConnection.get$_text_input$_id(), this._configurationToJson$1(configuration)], type$.JSArray_Object), type$.void);
    },
    setEditingState$1(value) {
      type$.TextEditingValue._as(value);
      this.get$_channel().invokeMethod$1$2("TextInput.setEditingState", value.toJSON$0(), type$.void);
    },
    $isTextInputControl: 1
  };
  A.__PlatformTextInputControl_Object_TextInputControl.prototype = {$isTextInputControl: 1};
  A.StatefulBuilder.prototype = {
    createState$0() {
      return A._StatefulBuilderState$();
    },
    builder$2(arg0, arg1) {
      return this.builder.call$2(arg0, arg1);
    }
  };
  A._StatefulBuilderState.prototype = {
    build$1(context) {
      type$.BuildContext._as(context);
      return this.get$widget().builder$2(context, this.get$setState());
    }
  };
  A.WidgetsBinding.prototype = {
    get$buildOwner() {
      return this.WidgetsBinding__buildOwner;
    },
    get$focusManager() {
      return this.WidgetsBinding__buildOwner.focusManager;
    },
    set$platformMenuDelegate(value) {
      this.WidgetsBinding___WidgetsBinding_platformMenuDelegate_A = type$.PlatformMenuDelegate._as(value);
    },
    addObserver$1(observer) {
      return J.add$1$ax(this.WidgetsBinding__observers, type$.WidgetsBindingObserver._as(observer));
    },
    removeObserver$1(observer) {
      type$.WidgetsBindingObserver._as(observer);
      if (observer === this.WidgetsBinding__backGestureObserver)
        this.WidgetsBinding__backGestureObserver = null;
      return J.remove$1$ax(this.WidgetsBinding__observers, observer);
    },
    handleRequestAppExit$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.AppExitResponse),
        $async$returnValue, $async$self = this, t1, didCancel, $async$temp1, $async$temp2;
      var $async$handleRequestAppExit$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$iterator$ax(C.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)), didCancel = false;
            case 3:
              // for condition
              if (!C.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$temp1 = C;
              $async$temp2 = J;
              $async$goto = 5;
              return C._asyncAwait(t1.get$current().didRequestAppExit$0(), $async$handleRequestAppExit$0);
            case 5:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$temp2.$eq$($async$result, B.AppExitResponse_1)))
                didCancel = true;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = didCancel ? B.AppExitResponse_1 : E.AppExitResponse_0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handleRequestAppExit$0, $async$completer);
    },
    handleLocaleChanged$0() {
      this.dispatchLocalesChanged$1(this.get$platformDispatcher().get$locales());
    },
    dispatchLocalesChanged$1(locales) {
      var t1;
      type$.nullable_List_Locale._as(locales);
      for (t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeLocales$1(locales);
    },
    handlePopRoute$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$handlePopRoute$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$iterator$ax(C.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver));
            case 3:
              // for condition
              if (!C.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$temp1 = C;
              $async$goto = 5;
              return C._asyncAwait(t1.get$current().didPopRoute$0(), $async$handlePopRoute$0);
            case 5:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              A.SystemNavigator_pop();
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handlePopRoute$0, $async$completer);
    },
    _handleStartBackGesture$1($arguments) {
      var backEvent, t1, t2;
      type$.Map_of_nullable_String_and_nullable_Object._as($arguments);
      this.WidgetsBinding__backGestureObserver = null;
      backEvent = A.PredictiveBackEvent_PredictiveBackEvent$fromMap($arguments);
      for (t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (C.boolConversionCheck(t2.handleStartBackGesture$1(backEvent))) {
          this.WidgetsBinding__backGestureObserver = t2;
          return C.Future_Future$value(true, type$.bool);
        }
      }
      return C.Future_Future$value(false, type$.bool);
    },
    _handleUpdateBackGestureProgress$1($arguments) {
      return this._handleUpdateBackGestureProgress$body$WidgetsBinding(type$.Map_of_nullable_String_and_nullable_Object._as($arguments));
    },
    _handleUpdateBackGestureProgress$body$WidgetsBinding($arguments) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$_handleUpdateBackGestureProgress$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.WidgetsBinding__backGestureObserver;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1.handleUpdateBackGestureProgress$1(A.PredictiveBackEvent_PredictiveBackEvent$fromMap($arguments));
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handleUpdateBackGestureProgress$1, $async$completer);
    },
    _handleCommitBackGesture$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$_handleCommitBackGesture$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.WidgetsBinding__backGestureObserver;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return C._asyncAwait($async$self.handlePopRoute$0(), $async$_handleCommitBackGesture$0);
            case 5:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t1.handleCommitBackGesture$0();
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handleCommitBackGesture$0, $async$completer);
    },
    _handleCancelBackGesture$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$_handleCancelBackGesture$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.WidgetsBinding__backGestureObserver;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1.handleCancelBackGesture$0();
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handleCancelBackGesture$0, $async$completer);
    },
    handlePushRoute$1(route) {
      return this.handlePushRoute$body$WidgetsBinding(C._asString(route));
    },
    handlePushRoute$body$WidgetsBinding(route) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, routeInformation, $async$temp1;
      var $async$handlePushRoute$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              routeInformation = D.RouteInformation$(null, D.Uri_parse(route));
              t1 = J.get$iterator$ax(C.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver));
            case 3:
              // for condition
              if (!C.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$temp1 = C;
              $async$goto = 5;
              return C._asyncAwait(t1.get$current().didPushRouteInformation$1(routeInformation), $async$handlePushRoute$1);
            case 5:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handlePushRoute$1, $async$completer);
    },
    _handlePushRouteInformation$1(routeArguments) {
      return this._handlePushRouteInformation$body$WidgetsBinding(type$.Map_dynamic_dynamic._as(routeArguments));
    },
    _handlePushRouteInformation$body$WidgetsBinding(routeArguments) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, routeInformation, $async$temp1;
      var $async$_handlePushRouteInformation$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = D.Uri_parse(C._asString(routeArguments.$index(0, "location")));
              routeInformation = D.RouteInformation$(routeArguments.$index(0, "state"), t1);
              t1 = J.get$iterator$ax(C.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver));
            case 3:
              // for condition
              if (!C.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$temp1 = C;
              $async$goto = 5;
              return C._asyncAwait(t1.get$current().didPushRouteInformation$1(routeInformation), $async$_handlePushRouteInformation$1);
            case 5:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_handlePushRouteInformation$1, $async$completer);
    },
    _handleNavigationInvocation$1(methodCall) {
      var _0_0, t1;
      type$.MethodCall._as(methodCall);
      _0_0 = methodCall.method;
      $label0$0: {
        if ("popRoute" === _0_0) {
          t1 = this.handlePopRoute$0();
          break $label0$0;
        }
        if ("pushRoute" === _0_0) {
          t1 = this.handlePushRoute$1(C._asString(methodCall.$arguments));
          break $label0$0;
        }
        if ("pushRouteInformation" === _0_0) {
          t1 = this._handlePushRouteInformation$1(type$.Map_dynamic_dynamic._as(methodCall.$arguments));
          break $label0$0;
        }
        t1 = C.Future_Future$value(false, type$.bool);
        break $label0$0;
      }
      return t1;
    },
    _handleBackGestureInvocation$1(methodCall) {
      var t1, $arguments, _0_0, _this = this;
      type$.MethodCall._as(methodCall);
      t1 = type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(methodCall.$arguments);
      $arguments = t1 == null ? null : t1.cast$2$0(0, type$.nullable_String, type$.nullable_Object);
      _0_0 = methodCall.method;
      $label0$0: {
        if ("startBackGesture" === _0_0) {
          $arguments.toString;
          t1 = _this._handleStartBackGesture$1($arguments);
          break $label0$0;
        }
        if ("updateBackGestureProgress" === _0_0) {
          $arguments.toString;
          t1 = _this._handleUpdateBackGestureProgress$1($arguments);
          break $label0$0;
        }
        if ("commitBackGesture" === _0_0) {
          t1 = _this._handleCommitBackGesture$0();
          break $label0$0;
        }
        if ("cancelBackGesture" === _0_0) {
          t1 = _this._handleCancelBackGesture$0();
          break $label0$0;
        }
        t1 = C.throwExpression(D.MissingPluginException$(null));
      }
      return t1;
    },
    get$firstFrameRasterized() {
      return this.WidgetsBinding__firstFrameCompleter.get$isCompleted();
    },
    _handleBuildScheduled$0() {
      this.ensureVisualUpdate$0();
    },
    get$rootElement() {
      return this.WidgetsBinding__rootElement;
    },
    scheduleAttachRootWidget$1(rootWidget) {
      D.Timer_run(new A.WidgetsBinding_scheduleAttachRootWidget_closure(this, type$.Widget._as(rootWidget)));
    },
    attachRootWidget$1(rootWidget) {
      this.attachToBuildOwner$1(A.RootWidget$(type$.Widget._as(rootWidget), "[root]"));
    },
    attachToBuildOwner$1(widget) {
      var t1, t2, _this = this;
      type$.RootWidget._as(widget);
      t1 = _this.get$rootElement();
      _this.WidgetsBinding__readyToProduceFrames = true;
      t2 = _this.get$buildOwner();
      t2.toString;
      _this.set$_binding0$_rootElement(widget.attach$2(t2, type$.nullable_RootElement._as(_this.get$rootElement())));
      if (t1 == null)
        D.SchedulerBinding_instance().ensureVisualUpdate$0();
    },
    set$_binding0$_rootElement(_rootElement) {
      this.WidgetsBinding__rootElement = type$.nullable_Element._as(_rootElement);
    },
    $isBindingBase: 1,
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isRendererBinding: 1,
    $isSchedulerBinding: 1,
    $isSemanticsBinding: 1,
    $isServicesBinding: 1
  };
  A.RootWidget.prototype = {
    createElement$0() {
      return A.RootElement$(this);
    },
    attach$2(owner, element) {
      var t2, t1 = {};
      t1.element = element;
      type$.BuildOwner._as(owner);
      type$.nullable_RootElement._as(element);
      t1.element = element;
      if (element == null) {
        owner.lockState$1(new A.RootWidget_attach_closure(t1, this, owner));
        t2 = t1.element;
        t2.toString;
        owner.buildScope$2(t2, new A.RootWidget_attach_closure0(t1));
      } else {
        element._newWidget = this;
        element.markNeedsBuild$0();
      }
      t1 = t1.element;
      t1.toString;
      return t1;
    },
    toStringShort$0() {
      var t1 = this.debugShortDescription;
      return t1 == null ? this.super$Widget$toStringShort() : t1;
    }
  };
  A.RootElement.prototype = {
    visitChildren$1(visitor) {
      var t1;
      type$.void_Function_Element._as(visitor);
      t1 = this._child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1(child) {
      type$.Element._as(child);
      this._child = null;
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      this.super$_RootElement_Element_RootElementMixin$mount(type$.nullable_Element._as($parent), newSlot);
      this._rebuild$0();
      this.super$Element$performRebuild();
    },
    update$1(newWidget) {
      this.super$Element$update0(type$.RootWidget._as(newWidget));
      this._rebuild$0();
    },
    performRebuild$0() {
      var _this = this,
        t1 = _this._newWidget;
      if (t1 != null) {
        _this._newWidget = null;
        _this.update$1(t1);
      }
      _this.super$Element$performRebuild();
    },
    _rebuild$0() {
      var exception, stack, details, exception0, _this = this;
      try {
        _this.set$_child(_this.updateChild$3(_this._child, type$.RootWidget._as(_this.get$widget()).child, null));
      } catch (exception0) {
        exception = C.unwrapException(exception0);
        stack = C.getTraceFromException(exception0);
        details = D.FlutterErrorDetails$(D.ErrorDescription$("attaching to the render tree"), exception, null, "widgets library", false, stack);
        D.FlutterError_reportError(details);
        _this._child = null;
      }
    },
    set$_child(_child) {
      this._child = type$.nullable_Element._as(_child);
    },
    $isRootElementMixin: 1
  };
  A.WidgetsFlutterBinding.prototype = {$isGestureBinding: 1, $isHitTestable: 1, $isHitTestDispatcher: 1, $isHitTestTarget: 1, $isPaintingBinding: 1, $isRendererBinding: 1, $isSchedulerBinding: 1, $isSemanticsBinding: 1, $isServicesBinding: 1, $isWidgetsBinding: 1};
  A._RootElement_Element_RootElementMixin.prototype = {
    mount$2($parent, newSlot) {
      this.super$Element$mount0(type$.nullable_Element._as($parent), newSlot);
    },
    $isRootElementMixin: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$BindingBase$initInstances();
      $.GestureBinding__instance = _this;
      _this.get$platformDispatcher().set$onPointerDataPacket(_this.get$_handlePointerDataPacket());
    },
    unlocked$0() {
      this.super$BindingBase$unlocked();
      this._flushPointerEventQueue$0();
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances();
      $.SchedulerBinding__instance = _this;
      _this.addTimingsCallback$1(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure(_this));
    },
    initServiceExtensions$0() {
      this.super$BindingBase$initServiceExtensions();
      this.registerNumericServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(), C.EnumName_get_name(B.SchedulerServiceExtensions_0), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0());
    },
    unlocked$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked();
      if (C.boolConversionCheck(J.get$isNotEmpty$asx(this.SchedulerBinding__taskQueue)))
        this._ensureEventLoopCallback$0();
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isSchedulerBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initInstances();
      $.ServicesBinding__instance = _this;
      _this.set$_defaultBinaryMessenger(_this.createBinaryMessenger$0());
      _this.set$_restorationManager(_this.createRestorationManager$0());
      _this._initKeyboard$0();
      _this.initLicenses$0();
      B.BasicMessageChannel_UCU.setMessageHandler$1(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure(_this));
      E.BasicMessageChannel_EyN.setMessageHandler$1(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure0(_this));
      B.BasicMessageChannel_uMb.setMessageHandler$1(_this.get$_handleLifecycleMessage());
      E.OptionalMethodChannel_ENd.setMethodCallHandler$1(_this.get$_handlePlatformMessage());
      _this.get$platformDispatcher().set$onViewFocusChange(_this.get$handleViewFocusChanged());
      A.TextInput_ensureInitialized();
      _this.readInitialLifecycleStateFromNativeWindow$0();
      _this.initializationComplete$0();
    },
    initServiceExtensions$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initServiceExtensions();
      this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure(), C.EnumName_get_name(B.ServicesServiceExtensions_0), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure0());
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isSchedulerBinding: 1,
    $isServicesBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initInstances();
      $.PaintingBinding__instance = _this;
      _this.set$_imageCache(_this.createImageCache$0());
    },
    handleMemoryPressure$0() {
      this.super$ServicesBinding$handleMemoryPressure();
      J.clear$0$ax(this.get$imageCache());
    },
    handleSystemMessage$1(systemMessage) {
      return this.handleSystemMessage$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding(type$.Object._as(systemMessage));
    },
    handleSystemMessage$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding(systemMessage) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$handleSystemMessage$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return C._asyncAwait($async$self.super$ServicesBinding$handleSystemMessage(systemMessage), $async$handleSystemMessage$1);
            case 3:
              // returning from await.
              switch (C._asString(type$.Map_String_dynamic._as(systemMessage).$index(0, "type"))) {
                case "fontsChange":
                  $async$self.PaintingBinding__systemFonts.notifyListeners$0();
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$handleSystemMessage$1, $async$completer);
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isPaintingBinding: 1,
    $isSchedulerBinding: 1,
    $isServicesBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding.prototype = {
    initInstances$0() {
      var t1, _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$initInstances();
      $.SemanticsBinding__instance = _this;
      _this.set$_accessibilityFeatures(_this.get$platformDispatcher().get$accessibilityFeatures());
      t1 = _this.get$platformDispatcher();
      t1.set$onSemanticsEnabledChanged(_this.get$_handleSemanticsEnabledChanged());
      t1.set$onSemanticsActionEvent(_this.get$_handleSemanticsActionEvent());
      t1.set$onAccessibilityFeaturesChanged(_this.get$handleAccessibilityFeaturesChanged());
      _this._handleSemanticsEnabledChanged$0();
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isPaintingBinding: 1,
    $isSchedulerBinding: 1,
    $isSemanticsBinding: 1,
    $isServicesBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype = {
    initInstances$0() {
      var t1, _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding$initInstances();
      $.RendererBinding__instance = _this;
      _this.set$_rootPipelineOwner(_this.createRootPipelineOwner$0());
      t1 = _this.get$platformDispatcher();
      t1.set$onMetricsChanged(_this.get$handleMetricsChanged());
      t1.set$onTextScaleFactorChanged(_this.get$handleTextScaleFactorChanged());
      t1.set$onPlatformBrightnessChanged(_this.get$handlePlatformBrightnessChanged());
      _this.addPersistentFrameCallback$1(_this.get$_handlePersistentFrameCallback());
      _this.initMouseTracker$0();
      _this.addPostFrameCallback$2$debugLabel(_this.get$_handleWebFirstFrame(), "RendererBinding.webFirstFrame");
      _this.get$rootPipelineOwner().attach$1(_this.get$_binding1$_manifold());
    },
    initServiceExtensions$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initServiceExtensions();
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(), C.EnumName_get_name(B.RenderingServiceExtensions_8));
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(), C.EnumName_get_name(B.RenderingServiceExtensions_9));
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(), C.EnumName_get_name(B.RenderingServiceExtensions_10));
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(), C.EnumName_get_name(B.RenderingServiceExtensions_11), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3());
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4(), C.EnumName_get_name(B.RenderingServiceExtensions_12), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5());
    },
    dispatchEvent$2($event, hitTestResult) {
      var t1;
      type$.PointerEvent._as($event);
      type$.nullable_HitTestResult._as(hitTestResult);
      t1 = this.RendererBinding__mouseTracker;
      t1.toString;
      t1.updateWithEvent$2($event, type$.PointerMoveEvent._is($event) ? null : hitTestResult);
      this.super$GestureBinding$dispatchEvent($event, hitTestResult);
    },
    hitTestInView$3(result, position, viewId) {
      var t1;
      type$.HitTestResult._as(result);
      type$.Offset._as(position);
      C._asInt(viewId);
      t1 = J.$index$asx(this.RendererBinding__viewIdToRenderView, viewId);
      if (t1 != null)
        t1.hitTest$2$position(result, position);
      this.super$GestureBinding$hitTestInView(result, position, viewId);
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isPaintingBinding: 1,
    $isRendererBinding: 1,
    $isSchedulerBinding: 1,
    $isSemanticsBinding: 1,
    $isServicesBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances();
      $.WidgetsBinding__instance = _this;
      _this.WidgetsBinding__buildOwner = A.BuildOwner$0();
      _this.get$buildOwner().set$onBuildScheduled(_this.get$_handleBuildScheduled());
      _this.get$platformDispatcher().set$onLocaleChanged(_this.get$handleLocaleChanged());
      E.OptionalMethodChannel_86y.setMethodCallHandler$1(_this.get$_handleNavigationInvocation());
      B.OptionalMethodChannel_jWO.setMethodCallHandler$1(_this.get$_handleBackGestureInvocation());
      _this.set$platformMenuDelegate(A.DefaultPlatformMenuDelegate$());
    },
    initServiceExtensions$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions();
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(), C.EnumName_get_name(B.WidgetsServiceExtensions_0));
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(_this), C.EnumName_get_name(B.WidgetsServiceExtensions_1));
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(_this), C.EnumName_get_name(B.WidgetsServiceExtensions_3));
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(_this), C.EnumName_get_name(B.WidgetsServiceExtensions_4));
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(), C.EnumName_get_name(B.WidgetsServiceExtensions_6), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4());
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure5(), C.EnumName_get_name(B.WidgetsServiceExtensions_7), new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure6());
    },
    handleMetricsChanged$0() {
      this.super$RendererBinding$handleMetricsChanged();
      for (var t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeMetrics$0();
    },
    handleTextScaleFactorChanged$0() {
      this.super$RendererBinding$handleTextScaleFactorChanged();
      for (var t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeTextScaleFactor$0();
    },
    handlePlatformBrightnessChanged$0() {
      this.super$RendererBinding$handlePlatformBrightnessChanged();
      for (var t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangePlatformBrightness$0();
    },
    handleAccessibilityFeaturesChanged$0() {
      this.super$SemanticsBinding$handleAccessibilityFeaturesChanged();
      for (var t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeAccessibilityFeatures$0();
    },
    handleAppLifecycleStateChanged$1(state) {
      var t1;
      type$.AppLifecycleState._as(state);
      this.super$SchedulerBinding$handleAppLifecycleStateChanged(state);
      for (t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeAppLifecycleState$1(state);
    },
    handleViewFocusChanged$1($event) {
      var t1;
      type$.ViewFocusEvent._as($event);
      this.super$ServicesBinding$handleViewFocusChanged($event);
      for (t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didChangeViewFocus$1($event);
    },
    handleMemoryPressure$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$handleMemoryPressure();
      for (var t1 = J.get$iterator$ax(C.List_List$of(this.WidgetsBinding__observers, true, type$.WidgetsBindingObserver)); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().didHaveMemoryPressure$0();
    },
    drawFrame$0() {
      var firstFrameCallback, t2, t3, _this = this, t1 = {};
      t1.firstFrameCallback = null;
      if (C.boolConversionCheck(_this.WidgetsBinding__needToReportFirstFrame)) {
        firstFrameCallback = new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(t1, _this);
        t1.firstFrameCallback = firstFrameCallback;
        D.SchedulerBinding_instance().addTimingsCallback$1(firstFrameCallback);
      }
      try {
        if (_this.get$rootElement() != null) {
          t2 = _this.get$buildOwner();
          t2.toString;
          t3 = _this.get$rootElement();
          t3.toString;
          t2.buildScope$1(t3);
        }
        _this.super$RendererBinding$drawFrame();
        _this.get$buildOwner().finalizeTree$0();
      } finally {
      }
      if (C.boolConversionCheck(_this.WidgetsBinding__needToReportFirstFrame) && C.boolConversionCheck(_this.get$sendFramesToEngine()))
        A.Timeline_instantSync("Widgets built first useful frame", null);
      t2 = _this.WidgetsBinding__needToReportFirstFrame = false;
      if (t1.firstFrameCallback != null ? !C.boolConversionCheck(_this.get$sendFramesToEngine()) : t2) {
        _this.WidgetsBinding__needToReportFirstFrame = true;
        t2 = D.SchedulerBinding_instance();
        t1 = t1.firstFrameCallback;
        t1.toString;
        t2.removeTimingsCallback$1(t1);
      }
    },
    get$framesEnabled() {
      return C.boolConversionCheck(A.SchedulerBinding.prototype.get$framesEnabled.call(this)) && C.boolConversionCheck(this.WidgetsBinding__readyToProduceFrames);
    },
    $isGestureBinding: 1,
    $isHitTestable: 1,
    $isHitTestDispatcher: 1,
    $isHitTestTarget: 1,
    $isPaintingBinding: 1,
    $isRendererBinding: 1,
    $isSchedulerBinding: 1,
    $isSemanticsBinding: 1,
    $isServicesBinding: 1,
    $isWidgetsBinding: 1
  };
  A.FocusHighlightStrategy.prototype = {
    _enumToString$0() {
      return "FocusHighlightStrategy." + C.S(this._core$_name);
    }
  };
  A._AppLifecycleListener.prototype = {
    didChangeAppLifecycleState$1(state) {
      return this.onLifecycleStateChanged.call$1(type$.AppLifecycleState._as(state));
    }
  };
  A.FocusManager.prototype = {
    FocusManager$0() {
      var t1, _this = this;
      D.ChangeNotifier_maybeDispatchObjectCreation(_this);
      if (C.boolConversionCheck(_this.get$_respondToWindowFocus())) {
        t1 = A._AppLifecycleListener$(_this.get$_appLifecycleChange());
        _this._appLifecycleListener = t1;
        D.WidgetsBinding_instance().addObserver$1(t1);
      }
      _this.rootScope._manager = _this;
    },
    get$_respondToWindowFocus() {
      return true;
    },
    registerGlobalHandlers$0() {
      return this._highlightManager.registerGlobalHandlers$0();
    },
    get$highlightMode() {
      return this._highlightManager.get$highlightMode();
    },
    addHighlightModeListener$1(listener) {
      return this._highlightManager.addListener$1(type$.void_Function_FocusHighlightMode._as(listener));
    },
    removeHighlightModeListener$1(listener) {
      return this._highlightManager.removeListener$1(type$.void_Function_FocusHighlightMode._as(listener));
    },
    get$primaryFocus() {
      return this._primaryFocus;
    },
    _appLifecycleChange$1(state) {
      var t1, _this = this;
      if (type$.AppLifecycleState._as(state) === E.AppLifecycleState_1)
        if (!C.boolConversionCheck(J.$eq$(_this._primaryFocus, _this.rootScope)))
          _this._suspendedNode = null;
        else {
          t1 = _this._suspendedNode;
          if (t1 != null) {
            t1.requestFocus$0();
            _this._suspendedNode = null;
          }
        }
      else {
        t1 = _this.rootScope;
        if (!C.boolConversionCheck(J.$eq$(_this._primaryFocus, t1))) {
          _this.set$_markedForFocus(t1);
          _this.set$_suspendedNode(_this._primaryFocus);
          _this.applyFocusChangesIfNeeded$0();
        }
      }
    },
    _markDetached$1(node) {
      var _this = this;
      type$.FocusNode._as(node);
      if (C.boolConversionCheck(J.$eq$(_this._primaryFocus, node)))
        _this._primaryFocus = null;
      if (C.boolConversionCheck(J.$eq$(_this._suspendedNode, node)))
        _this._suspendedNode = null;
      J.remove$1$ax(_this._focus_manager$_dirtyNodes, node);
    },
    _markPropertiesChanged$1(node) {
      type$.FocusNode._as(node);
      this._markNeedsUpdate$0();
      J.add$1$ax(this._focus_manager$_dirtyNodes, node);
    },
    _markNextFocus$1(node) {
      var _this = this;
      type$.FocusNode._as(node);
      if (C.boolConversionCheck(J.$eq$(_this._primaryFocus, node)))
        _this._markedForFocus = null;
      else {
        _this._markedForFocus = node;
        _this._markNeedsUpdate$0();
      }
    },
    _markNeedsUpdate$0() {
      if (C.boolConversionCheck(this._haveScheduledUpdate))
        return;
      this._haveScheduledUpdate = true;
      C.scheduleMicrotask(this.get$applyFocusChangesIfNeeded());
    },
    applyFocusChangesIfNeeded$0() {
      var previousFocus, t1, t2, t3, previousPath, nextPath, _this = this;
      _this._haveScheduledUpdate = false;
      previousFocus = _this._primaryFocus;
      for (t1 = _this._pendingAutofocuses, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1); C.boolConversionCheck(t3.moveNext$0());)
        t3.get$current().applyIfValid$1(_this);
      t2.clear$0(t1);
      if (_this._primaryFocus == null && _this._markedForFocus == null)
        _this.set$_markedForFocus(_this.rootScope);
      t1 = _this._markedForFocus;
      if (t1 != null && !C.boolConversionCheck(J.$eq$(t1, _this._primaryFocus))) {
        previousPath = previousFocus == null ? null : J.toSet$0$ax(previousFocus.get$ancestors());
        if (previousPath == null)
          previousPath = C.LinkedHashSet_LinkedHashSet$_empty(type$.FocusNode);
        nextPath = J.toSet$0$ax(_this._markedForFocus.get$ancestors());
        t1 = _this._focus_manager$_dirtyNodes;
        t2 = J.getInterceptor$ax(t1);
        t2.addAll$1(t1, nextPath.difference$1(previousPath));
        t2.addAll$1(t1, previousPath.difference$1(nextPath));
        _this.set$_primaryFocus(_this._markedForFocus);
        _this._markedForFocus = null;
      }
      t1 = _this._primaryFocus;
      if (previousFocus == null ? t1 != null : previousFocus !== t1) {
        if (previousFocus != null)
          J.add$1$ax(_this._focus_manager$_dirtyNodes, previousFocus);
        t1 = _this._primaryFocus;
        if (t1 != null)
          J.add$1$ax(_this._focus_manager$_dirtyNodes, t1);
      }
      for (t1 = _this._focus_manager$_dirtyNodes, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1); C.boolConversionCheck(t3.moveNext$0());)
        t3.get$current()._notify$0();
      t2.clear$0(t1);
      t1 = _this._primaryFocus;
      if (previousFocus == null ? t1 != null : previousFocus !== t1)
        _this.notifyListeners$0();
    },
    debugDescribeChildren$0() {
      return C._setArrayType([this.rootScope.toDiagnosticsNode$1$name("rootScope")], type$.JSArray_DiagnosticsNode);
    },
    debugFillProperties$1(properties) {
      var t1, _this = this, _null = null;
      type$.DiagnosticPropertiesBuilder._as(properties);
      properties.add$1(0, D.FlagProperty$("haveScheduledUpdate", _null, _null, "UPDATE SCHEDULED", E.DiagnosticLevel_3, false, _this._haveScheduledUpdate));
      t1 = type$.FocusNode;
      properties.add$1(0, D.DiagnosticsProperty$("primaryFocus", _this.get$primaryFocus(), true, _null, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      properties.add$1(0, D.DiagnosticsProperty$("nextFocus", _this._markedForFocus, true, _null, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, t1));
      t1 = _this.get$primaryFocus();
      t1 = t1 == null ? _null : t1.get$context();
      type$.nullable_Element._as(t1);
      if (t1 != null)
        properties.add$1(0, D.DiagnosticsProperty$("primaryFocusCreator", t1.debugGetCreatorChain$1(20), true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_8, _null, type$.String));
    },
    set$_primaryFocus(_primaryFocus) {
      this._primaryFocus = type$.nullable_FocusNode._as(_primaryFocus);
    },
    set$_suspendedNode(_suspendedNode) {
      this._suspendedNode = type$.nullable_FocusNode._as(_suspendedNode);
    },
    set$_markedForFocus(_markedForFocus) {
      this._markedForFocus = type$.nullable_FocusNode._as(_markedForFocus);
    },
    $isListenable: 1,
    $isChangeNotifier: 1,
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1,
    $isDiagnosticableTreeMixin: 1,
    $is_DiagnosticableTree_Object_Diagnosticable: 1
  };
  A._HighlightModeManager.prototype = {
    _HighlightModeManager$0() {
      $.$get$FlutterMemoryAllocations_instance().dispatchObjectCreated$3$className$library$object(C.S(B.Type__HighlightModeManager_DOw), "package:flutter/widgets.dart", this);
    },
    get$highlightMode() {
      var t1 = this._highlightMode;
      return t1 == null ? A._HighlightModeManager__defaultModeForPlatform() : t1;
    },
    get$strategy() {
      return B.FocusHighlightStrategy_0;
    },
    addListener$1(listener) {
      type$.void_Function_FocusHighlightMode._as(listener);
      return J.add$1$ax(this._focus_manager$_listeners, listener);
    },
    removeListener$1(listener) {
      type$.void_Function_FocusHighlightMode._as(listener);
      return J.remove$1$ax(this._focus_manager$_listeners, listener);
    },
    registerGlobalHandlers$0() {
      D.ServicesBinding_instance().get$keyEventManager().set$keyMessageHandler(this.get$handleKeyMessage());
      D.GestureBinding_instance().GestureBinding_pointerRouter.addGlobalRoute$1(this.get$handlePointerEvent());
    },
    notifyListeners$0() {
      var listener, exception, stack, collector, t1, exception0, _this = this;
      if (C.boolConversionCheck(J.get$isEmpty$asx(_this._focus_manager$_listeners)))
        return;
      for (t1 = J.get$iterator$ax(C.List_List$of(_this._focus_manager$_listeners, true, type$.void_Function_FocusHighlightMode)); C.boolConversionCheck(t1.moveNext$0());) {
        listener = t1.get$current();
        try {
          if (C.boolConversionCheck(J.contains$1$asx(_this._focus_manager$_listeners, listener)))
            listener.call$1(_this.get$highlightMode());
        } catch (exception0) {
          exception = C.unwrapException(exception0);
          stack = C.getTraceFromException(exception0);
          collector = null;
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while dispatching notifications for " + C.S(_this.get$runtimeType(0))), exception, collector, "widgets library", false, stack));
        }
      }
    },
    handlePointerEvent$1($event) {
      var expectedMode, t1, _this = this;
      switch (type$.PointerEvent._as($event).get$kind()) {
        case E.PointerDeviceKind_0:
        case E.PointerDeviceKind_2:
        case E.PointerDeviceKind_3:
          _this._lastInteractionWasTouch = true;
          expectedMode = E.FocusHighlightMode_0;
          break;
        case E.PointerDeviceKind_1:
        case E.PointerDeviceKind_4:
        case E.PointerDeviceKind_5:
          _this._lastInteractionWasTouch = false;
          expectedMode = E.FocusHighlightMode_1;
          break;
        default:
          expectedMode = null;
      }
      t1 = _this.get$highlightMode();
      if (expectedMode == null ? t1 != null : expectedMode !== t1)
        _this.updateMode$0();
    },
    handleKeyMessage$1(message) {
      var t1, t2, handled, t3, t4, callback, t5, t6, t7, t8, t9, t10, _this = this;
      type$.KeyMessage._as(message);
      _this._lastInteractionWasTouch = false;
      _this.updateMode$0();
      if (D.FocusManager_instance().get$primaryFocus() == null)
        return false;
      t1 = _this._earlyKeyEventHandlers;
      t2 = J.getInterceptor$asx(t1);
      handled = false;
      if (C.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        t3 = C._setArrayType([], type$.JSArray_KeyEventResult);
        for (t1 = J.get$iterator$ax(t2.toList$0(t1)), t2 = message.events, t4 = J.getInterceptor$ax(t2); C.boolConversionCheck(t1.moveNext$0());) {
          callback = t1.get$current();
          for (t5 = t4.get$iterator(t2); C.boolConversionCheck(t5.moveNext$0());)
            t3.push(callback.call$1(t5.get$current()));
        }
        switch (A.combineKeyEventResults(t3).index) {
          case 1:
            break;
          case 0:
            handled = true;
            break;
          case 2:
            break;
        }
      }
      if (handled)
        return true;
      t1 = D.FocusManager_instance().get$primaryFocus();
      t1.toString;
      t1 = C._setArrayType([t1], type$.JSArray_FocusNode);
      F.JSArray_methods.addAll$1(t1, D.FocusManager_instance().get$primaryFocus().get$ancestors());
      t1 = F.JSArray_methods.get$iterator(t1);
      t2 = type$.JSArray_KeyEventResult;
      t3 = message.events;
      t4 = J.getInterceptor$ax(t3);
      t5 = message.rawEvent;
      t6 = t5 != null;
      $label0$2:
        for (; handled = false, C.boolConversionCheck(t1.moveNext$0());) {
          t7 = t1.get$current();
          t8 = C._setArrayType([], t2);
          if (t7.onKeyEvent != null)
            for (t9 = t4.get$iterator(t3); C.boolConversionCheck(t9.moveNext$0());) {
              t10 = t9.get$current();
              t8.push(t7.onKeyEvent.call$2(t7, t10));
            }
          t9 = t7.onKey;
          if (t9 != null && t6)
            t8.push(t9.call$2(t7, t5));
          switch (A.combineKeyEventResults(t8).index) {
            case 1:
              continue $label0$2;
            case 0:
              handled = true;
              break;
            case 2:
              break;
          }
          break $label0$2;
        }
      if (!handled && C.boolConversionCheck(J.get$isNotEmpty$asx(_this._lateKeyEventHandlers))) {
        t1 = C._setArrayType([], t2);
        for (t2 = J.get$iterator$ax(J.toList$0$ax(_this._lateKeyEventHandlers)); C.boolConversionCheck(t2.moveNext$0());) {
          callback = t2.get$current();
          for (t5 = t4.get$iterator(t3); C.boolConversionCheck(t5.moveNext$0());)
            t1.push(callback.call$1(t5.get$current()));
        }
        switch (A.combineKeyEventResults(t1).index) {
          case 1:
            break;
          case 0:
            handled = true;
            break;
          case 2:
            handled = false;
            break;
        }
      }
      return handled;
    },
    updateMode$0() {
      var t1, newMode, oldMode, _this = this;
      switch (_this.get$strategy()) {
        case B.FocusHighlightStrategy_0:
          t1 = _this._lastInteractionWasTouch;
          if (t1 == null)
            return;
          newMode = C.boolConversionCheck(t1) ? E.FocusHighlightMode_0 : E.FocusHighlightMode_1;
          break;
        case B.FocusHighlightStrategy_1:
          newMode = E.FocusHighlightMode_0;
          break;
        case B.FocusHighlightStrategy_2:
          newMode = E.FocusHighlightMode_1;
          break;
        default:
          newMode = null;
      }
      oldMode = _this.get$highlightMode();
      _this._highlightMode = newMode;
      if (!C.boolConversionCheck(J.$eq$(_this.get$highlightMode(), oldMode)))
        _this.notifyListeners$0();
    }
  };
  A._FocusManager_Object_DiagnosticableTreeMixin.prototype = {$isDiagnosticable: 1, $isDiagnosticableTree: 1, $isDiagnosticableTreeMixin: 1, $is_DiagnosticableTree_Object_Diagnosticable: 1};
  A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier.prototype = {$isListenable: 1, $isChangeNotifier: 1, $isDiagnosticable: 1, $isDiagnosticableTree: 1, $isDiagnosticableTreeMixin: 1, $is_DiagnosticableTree_Object_Diagnosticable: 1};
  A._InactiveElements.prototype = {
    _unmount$1(element) {
      type$.Element._as(element);
      element.visitChildren$1(new A._InactiveElements__unmount_closure(this));
      element.unmount$0();
    },
    _unmountAll$0() {
      var elements,
        t1 = this._framework0$_elements,
        t2 = J.getInterceptor$ax(t1),
        elements0 = t2.toList$0(t1);
      J.sort$1$ax(elements0, A.framework0_Element__sort$closure());
      elements = elements0;
      t2.clear$0(t1);
      try {
        J.forEach$1$ax(J.get$reversed$ax(elements), this.get$_unmount());
      } finally {
      }
    },
    add$1(_, element) {
      type$.Element._as(element);
      if (C.boolConversionCheck(J.$eq$(element._framework0$_lifecycleState, E._ElementLifecycle_10)))
        A._InactiveElements__deactivateRecursively(element);
      J.add$1$ax(this._framework0$_elements, element);
    },
    remove$1(_, element) {
      J.remove$1$ax(this._framework0$_elements, type$.Element._as(element));
    }
  };
  A.BuildScope.prototype = {
    _scheduleBuildFor$1(element) {
      var _this = this;
      type$.Element._as(element);
      if (!C.boolConversionCheck(element._framework0$_inDirtyList)) {
        J.add$1$ax(_this._dirtyElements, element);
        element._framework0$_inDirtyList = true;
      }
      if (!C.boolConversionCheck(_this._buildScheduled) && !C.boolConversionCheck(_this._building))
        _this._buildScheduled = true;
      if (_this._dirtyElementsNeedsResorting != null)
        _this._dirtyElementsNeedsResorting = true;
    },
    _tryRebuild$1(element) {
      var e, stack, isTimelineTracked, exception;
      type$.Element._as(element);
      isTimelineTracked = C.boolConversionCheck(D._isProfileBuildsEnabledFor(element.get$widget()));
      if (isTimelineTracked)
        D.FlutterTimeline_startSync(C.S(J.get$runtimeType$(element.get$widget())), null);
      try {
        element.rebuild$0();
      } catch (exception) {
        e = C.unwrapException(exception);
        stack = C.getTraceFromException(exception);
        D._reportException(D.ErrorDescription$("while rebuilding dirty elements"), e, stack, new A.BuildScope__tryRebuild_closure(element));
      }
      if (isTimelineTracked)
        D.FlutterTimeline_finishSync();
    },
    _flushDirtyElements$1$debugBuildRoot(debugBuildRoot) {
      var index, element, element0, t1, t2, t3, t4, _this = this;
      type$.Element._as(debugBuildRoot);
      t1 = _this._dirtyElements;
      t2 = J.getInterceptor$ax(t1);
      t2.sort$1(t1, A.framework0_Element__sort$closure());
      _this._dirtyElementsNeedsResorting = false;
      try {
        index = 0;
        while (true) {
          t3 = index;
          t4 = t2.get$length(t1);
          if (typeof t3 !== "number")
            return t3.$lt();
          if (typeof t4 !== "number")
            return C.iae(t4);
          if (!(t3 < t4))
            break;
          element = t2.$index(t1, index);
          if (element.get$buildScope() === _this)
            _this._tryRebuild$1(element);
          index = _this._dirtyElementIndexAfter$1(index);
        }
      } finally {
        for (t3 = t2.get$iterator(t1); C.boolConversionCheck(t3.moveNext$0());) {
          element0 = t3.get$current();
          if (element0.get$buildScope() === _this)
            element0._framework0$_inDirtyList = false;
        }
        t2.clear$0(t1);
        _this._dirtyElementsNeedsResorting = null;
        _this._buildScheduled = false;
      }
    },
    _dirtyElementIndexAfter$1(index) {
      var t1, t2, t3;
      C._asInt(index);
      t1 = this._dirtyElementsNeedsResorting;
      t1.toString;
      if (!C.boolConversionCheck(t1))
        return index + 1;
      ++index;
      t1 = this._dirtyElements;
      t2 = J.getInterceptor$ax(t1);
      t2.sort$1(t1, A.framework0_Element__sort$closure());
      t3 = this._dirtyElementsNeedsResorting = false;
      while (true) {
        if (!(index > 0 ? C.boolConversionCheck(t2.$index(t1, index - 1).get$dirty()) : t3))
          break;
        --index;
      }
      return index;
    }
  };
  A.BuildOwner.prototype = {
    scheduleBuildFor$1(element) {
      var buildScope, _this = this;
      type$.Element._as(element);
      buildScope = element.get$buildScope();
      if (!C.boolConversionCheck(_this._scheduledFlushDirtyElements) && _this.onBuildScheduled != null) {
        _this._scheduledFlushDirtyElements = true;
        _this.onBuildScheduled.call$0();
      }
      buildScope._scheduleBuildFor$1(element);
    },
    lockState$1(callback) {
      type$.void_Function._as(callback);
      try {
        callback.call$0();
      } finally {
      }
    },
    buildScope$2(context, callback) {
      var buildScope, t1;
      type$.Element._as(context);
      type$.nullable_void_Function._as(callback);
      buildScope = context.get$buildScope();
      t1 = callback == null;
      if (t1 && C.boolConversionCheck(J.get$isEmpty$asx(buildScope._dirtyElements)))
        return;
      D.FlutterTimeline_startSync("BUILD", null);
      try {
        this._scheduledFlushDirtyElements = true;
        buildScope._building = true;
        if (!t1)
          try {
            callback.call$0();
          } finally {
          }
        buildScope._flushDirtyElements$1$debugBuildRoot(context);
      } finally {
        this._scheduledFlushDirtyElements = buildScope._building = false;
        D.FlutterTimeline_finishSync();
      }
    },
    buildScope$1(context) {
      return this.buildScope$2(context, null);
    },
    _registerGlobalKey$2(key, element) {
      J.$indexSet$ax(this._globalKeyRegistry, type$.GlobalKey_State_StatefulWidget._as(key), type$.Element._as(element));
    },
    _unregisterGlobalKey$2(key, element) {
      var t1, t2;
      type$.GlobalKey_State_StatefulWidget._as(key);
      type$.Element._as(element);
      t1 = this._globalKeyRegistry;
      t2 = J.getInterceptor$asx(t1);
      if (C.boolConversionCheck(J.$eq$(t2.$index(t1, key), element)))
        t2.remove$1(t1, key);
    },
    finalizeTree$0() {
      var e, stack, exception;
      D.FlutterTimeline_startSync("FINALIZE TREE", null);
      try {
        this.lockState$1(this._framework0$_inactiveElements.get$_unmountAll());
      } catch (exception) {
        e = C.unwrapException(exception);
        stack = C.getTraceFromException(exception);
        D._reportException(D.ErrorSummary$("while finalizing the widget tree"), e, stack, null);
      } finally {
        D.FlutterTimeline_finishSync();
      }
    },
    set$onBuildScheduled(onBuildScheduled) {
      this.onBuildScheduled = type$.nullable_void_Function._as(onBuildScheduled);
    }
  };
  A.RootElementMixin.prototype = {
    assignOwner$1(owner) {
      this._framework0$_owner = type$.BuildOwner._as(owner);
      this._parentBuildScope = A.BuildScope$();
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1,
    $isBuildContext: 1,
    $isElement0: 1,
    $is_DiagnosticableTree_Object_Diagnosticable: 1
  };
  A.RenderTreeRootElement.prototype = {
    attachRenderObject$1(newSlot) {
      this._slot = newSlot;
    },
    detachRenderObject$0() {
      this._slot = null;
    },
    updateSlot$1(newSlot) {
      this.super$RenderObjectElement$updateSlot(newSlot);
    }
  };
  A.Orientation.prototype = {
    _enumToString$0() {
      return "Orientation." + C.S(this._core$_name);
    }
  };
  A.MediaQueryData.prototype = {
    get$textScaleFactor() {
      return this.get$textScaler().get$textScaleFactor();
    },
    get$textScaler() {
      var t1 = this._textScaler;
      if (B.C__UnspecifiedTextScaler !== t1)
        return t1;
      return E._LinearTextScaler_1;
    },
    get$orientation() {
      var t1 = this.size,
        t2 = t1.get$width();
      t1 = t1.get$height();
      if (typeof t2 !== "number")
        return t2.$gt();
      if (typeof t1 !== "number")
        return C.iae(t1);
      return t2 > t1 ? B.Orientation_1 : B.Orientation_0;
    },
    copyWith$2$padding$platformBrightness(padding, platformBrightness) {
      var t1, t2, t3, _this = this;
      type$.nullable_Brightness._as(platformBrightness);
      type$.nullable_EdgeInsets._as(padding);
      t1 = _this.get$textScaler();
      t1 = t1;
      t2 = platformBrightness == null ? _this.platformBrightness : platformBrightness;
      t3 = padding == null ? _this.padding : padding;
      return A.MediaQueryData$(_this.accessibleNavigation, _this.alwaysUse24HourFormat, _this.boldText, _this.devicePixelRatio, _this.disableAnimations, _this.displayFeatures, _this.gestureSettings, _this.highContrast, _this.invertColors, _this.navigationMode, _this.onOffSwitchLabels, t3, t2, _this.size, _this.supportsShowingSystemContextMenu, _this.systemGestureInsets, t1, _this.viewInsets, _this.viewPadding);
    },
    copyWith$1$platformBrightness(platformBrightness) {
      return this.copyWith$2$padding$platformBrightness(null, platformBrightness);
    },
    copyWith$1$padding(padding) {
      return this.copyWith$2$padding$platformBrightness(padding, null);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      return other instanceof A.MediaQueryData && C.boolConversionCheck(J.$eq$(other.size, _this.size)) && C.boolConversionCheck(J.$eq$(other.devicePixelRatio, _this.devicePixelRatio)) && C.boolConversionCheck(J.$eq$(other.get$textScaleFactor(), _this.get$textScaleFactor())) && C.boolConversionCheck(J.$eq$(other.platformBrightness, _this.platformBrightness)) && C.boolConversionCheck(J.$eq$(other.padding, _this.padding)) && C.boolConversionCheck(J.$eq$(other.viewPadding, _this.viewPadding)) && C.boolConversionCheck(J.$eq$(other.viewInsets, _this.viewInsets)) && C.boolConversionCheck(J.$eq$(other.systemGestureInsets, _this.systemGestureInsets)) && C.boolConversionCheck(J.$eq$(other.alwaysUse24HourFormat, _this.alwaysUse24HourFormat)) && C.boolConversionCheck(J.$eq$(other.highContrast, _this.highContrast)) && C.boolConversionCheck(J.$eq$(other.onOffSwitchLabels, _this.onOffSwitchLabels)) && C.boolConversionCheck(J.$eq$(other.disableAnimations, _this.disableAnimations)) && C.boolConversionCheck(J.$eq$(other.invertColors, _this.invertColors)) && C.boolConversionCheck(J.$eq$(other.accessibleNavigation, _this.accessibleNavigation)) && C.boolConversionCheck(J.$eq$(other.boldText, _this.boldText)) && C.boolConversionCheck(J.$eq$(other.navigationMode, _this.navigationMode)) && C.boolConversionCheck(J.$eq$(other.gestureSettings, _this.gestureSettings)) && C.boolConversionCheck(D.listEquals(other.displayFeatures, _this.displayFeatures, type$.DisplayFeature)) && C.boolConversionCheck(J.$eq$(other.supportsShowingSystemContextMenu, _this.supportsShowingSystemContextMenu));
    },
    get$hashCode(_) {
      var _this = this;
      return C.Object_hash(_this.size, _this.devicePixelRatio, _this.get$textScaleFactor(), _this.platformBrightness, _this.padding, _this.viewPadding, _this.viewInsets, _this.alwaysUse24HourFormat, _this.highContrast, _this.onOffSwitchLabels, _this.disableAnimations, _this.invertColors, _this.accessibleNavigation, _this.boldText, _this.navigationMode, _this.gestureSettings, C.Object_hashAll(_this.displayFeatures), _this.supportsShowingSystemContextMenu, F.C_SentinelValue, F.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this,
        properties = C._setArrayType(["size: " + C.S(_this.size), "devicePixelRatio: " + C.S(J.toStringAsFixed$1$n(_this.devicePixelRatio, 1)), "textScaler: " + C.S(_this.get$textScaler()), "platformBrightness: " + C.S(_this.platformBrightness), "padding: " + C.S(_this.padding), "viewPadding: " + C.S(_this.viewPadding), "viewInsets: " + C.S(_this.viewInsets), "systemGestureInsets: " + C.S(_this.systemGestureInsets), "alwaysUse24HourFormat: " + C.S(_this.alwaysUse24HourFormat), "accessibleNavigation: " + C.S(_this.accessibleNavigation), "highContrast: " + C.S(_this.highContrast), "onOffSwitchLabels: " + C.S(_this.onOffSwitchLabels), "disableAnimations: " + C.S(_this.disableAnimations), "invertColors: " + C.S(_this.invertColors), "boldText: " + C.S(_this.boldText), "navigationMode: " + C.S(C.EnumName_get_name(_this.navigationMode)), "gestureSettings: " + C.S(_this.gestureSettings), "displayFeatures: " + C.S(_this.displayFeatures), "supportsShowingSystemContextMenu: " + C.S(_this.supportsShowingSystemContextMenu)], type$.JSArray_String);
      return C.S(D.objectRuntimeType(_this, "MediaQueryData")) + "(" + C.S(F.JSArray_methods.join$1(properties, ", ")) + ")";
    }
  };
  A._MediaQueryFromView.prototype = {
    createState$0() {
      return A._MediaQueryFromViewState$();
    }
  };
  A._MediaQueryFromViewState.prototype = {
    initState$0() {
      this.super$State$initState0();
      D.WidgetsBinding_instance().addObserver$1(this);
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      this._media_query$_updateParentData$0();
      this._updateData$0();
    },
    didUpdateWidget$1(oldWidget) {
      var _this = this;
      type$._MediaQueryFromView._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      _this.get$widget().toString;
      if (_this._media_query$_data == null || !C.boolConversionCheck(J.$eq$(oldWidget.view, _this.get$widget().view)))
        _this._updateData$0();
    },
    _media_query$_updateParentData$0() {
      var t1, _this = this;
      _this.get$widget().toString;
      t1 = D.MediaQuery_maybeOf(_this.get$context());
      _this.set$_parentData(t1);
      _this._media_query$_data = null;
    },
    _updateData$0() {
      var _this = this,
        newData = A.MediaQueryData$fromView(_this.get$widget().view, _this._parentData);
      if (!C.boolConversionCheck(newData.$eq(0, _this._media_query$_data)))
        _this.setState$1(new A._MediaQueryFromViewState__updateData_closure(_this, newData));
    },
    didChangeAccessibilityFeatures$0() {
      if (this._parentData == null)
        this._updateData$0();
    },
    didChangeMetrics$0() {
      this._updateData$0();
    },
    didChangeTextScaleFactor$0() {
      if (this._parentData == null)
        this._updateData$0();
    },
    didChangePlatformBrightness$0() {
      if (this._parentData == null)
        this._updateData$0();
    },
    dispose$0() {
      D.WidgetsBinding_instance().removeObserver$1(this);
      this.super$State$dispose();
    },
    build$1(context) {
      var t1, effectiveData;
      type$.BuildContext._as(context);
      t1 = this._media_query$_data;
      t1.toString;
      if (this._parentData == null && t1.platformBrightness != null)
        effectiveData = t1.copyWith$1$platformBrightness(null);
      else
        effectiveData = t1;
      return D.MediaQuery$(this.get$widget().child, effectiveData);
    },
    set$_parentData(_parentData) {
      this._parentData = type$.nullable_MediaQueryData._as(_parentData);
    },
    set$_media_query$_data(_data) {
      this._media_query$_data = type$.nullable_MediaQueryData._as(_data);
    },
    $isWidgetsBindingObserver: 1
  };
  A._UnspecifiedTextScaler.prototype = {
    scale$1(fontSize) {
      C._asDouble(fontSize);
      return C.throwExpression(C.UnimplementedError$(null));
    },
    get$textScaleFactor() {
      return C.throwExpression(C.UnimplementedError$(null));
    },
    $isTextScaler: 1
  };
  A.__MediaQueryFromViewState_State_WidgetsBindingObserver.prototype = {$isWidgetsBindingObserver: 1};
  A.PlatformMenuDelegate.prototype = {};
  A.DefaultPlatformMenuDelegate.prototype = {
    DefaultPlatformMenuDelegate$1$channel(channel) {
      this.channel.setMethodCallHandler$1(this.get$_methodCallHandler());
    },
    _methodCallHandler$1($call) {
      return this._methodCallHandler$body$DefaultPlatformMenuDelegate(type$.MethodCall._as($call));
    },
    _methodCallHandler$body$DefaultPlatformMenuDelegate($call) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, id, t1;
      var $async$_methodCallHandler$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              id = C._asInt($call.$arguments);
              t1 = $async$self._idMap;
              if (!C.boolConversionCheck(t1.containsKey$1(id))) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = J.$index$asx(t1, id);
              t1.toString;
              t2 = $call.method;
              t3 = J.getInterceptor$(t2);
              if (C.boolConversionCheck(t3.$eq(t2, "Menu.selectedCallback"))) {
                t2 = t1.get$onSelected();
                if (t2 != null)
                  t2.call$0();
                if (t1.get$onSelectedIntent() != null) {
                  t2 = D.FocusManager_instance().get$primaryFocus().get$context();
                  t2.toString;
                  t1 = t1.get$onSelectedIntent();
                  t1.toString;
                  A.Actions_maybeInvoke(t2, t1, type$.Intent);
                }
              } else if (C.boolConversionCheck(t3.$eq(t2, "Menu.opened"))) {
                t1 = t1.get$onOpen();
                if (t1 != null)
                  t1.call$0();
              } else if (C.boolConversionCheck(t3.$eq(t2, "Menu.closed"))) {
                t1 = t1.get$onClose();
                if (t1 != null)
                  t1.call$0();
              }
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$_methodCallHandler$1, $async$completer);
    }
  };
  A.WidgetsServiceExtensions.prototype = {
    _enumToString$0() {
      return "WidgetsServiceExtensions." + C.S(this._core$_name);
    }
  };
  A.View.prototype = {
    createState$0() {
      return A._ViewState$();
    }
  };
  A._ViewState.prototype = {
    initState$0() {
      this.super$State$initState0();
      D.WidgetsBinding_instance().addObserver$1(this);
    },
    dispose$0() {
      D.WidgetsBinding_instance().removeObserver$1(this);
      this._scopeNode.dispose$0();
      this.super$State$dispose();
    },
    didChangeViewFocus$1($event) {
      var nextFocus, nextFocus0, _this = this;
      type$.ViewFocusEvent._as($event);
      if (!C.boolConversionCheck(J.$eq$($event.viewId, _this.get$widget().view.viewId)))
        return;
      switch ($event.state) {
        case E.ViewFocusState_1:
          switch ($event.direction) {
            case E.ViewFocusDirection_1:
              nextFocus = _this._scopeNode;
              nextFocus0 = _this._policy.findFirstFocus$2$ignoreCurrentFocus(nextFocus, true);
              nextFocus = nextFocus0 == null ? nextFocus : nextFocus0;
              break;
            case E.ViewFocusDirection_2:
              nextFocus = _this._policy.findLastFocus$2$ignoreCurrentFocus(_this._scopeNode, true);
              break;
            case E.ViewFocusDirection_0:
              nextFocus = _this._scopeNode;
              break;
            default:
              nextFocus = null;
          }
          nextFocus.requestFocus$0();
          break;
        case E.ViewFocusState_0:
          D.FocusManager_instance().rootScope.requestScopeFocus$0();
          break;
      }
    },
    build$1(context) {
      var t1, t2, _this = this;
      type$.BuildContext._as(context);
      t1 = _this.get$widget().view;
      _this.get$widget().toString;
      _this.get$widget().toString;
      t2 = _this.get$widget().view;
      return A.RawView$(A.MediaQuery_fromView(D.FocusTraversalGroup$(D._FocusScopeWithExternalFocusNode$(_this.get$widget().child, _this._scopeNode, false), _this._policy), t2), null, null, t1);
    },
    $isWidgetsBindingObserver: 1
  };
  A.RawView.prototype = {
    build$1(context) {
      var _this = this;
      type$.BuildContext._as(context);
      return A._RawViewInternal$(new A.RawView_build_closure(_this), _this._deprecatedPipelineOwner, _this._deprecatedRenderView, _this.view);
    }
  };
  A._RawViewInternal.prototype = {
    createElement$0() {
      return A._RawViewElement$(this);
    },
    createRenderObject$1(context) {
      var t1;
      type$.BuildContext._as(context);
      t1 = this._deprecatedRenderView;
      return t1 == null ? A.RenderView$(this.view) : t1;
    }
  };
  A._RawViewElement.prototype = {
    get$_pipelineOwner() {
      var result, _this = this,
        value = _this.___RawViewElement__pipelineOwner_FI;
      if (C.boolConversionCheck(D.isSentinel(value))) {
        result = A.PipelineOwner$(_this.get$_handleSemanticsOwnerCreated(), _this.get$_handleSemanticsOwnerDisposed(), _this.get$_handleSemanticsUpdate());
        value !== $ && C.throwLateFieldADI("_pipelineOwner");
        _this.___RawViewElement__pipelineOwner_FI = result;
        value = result;
      }
      return value;
    },
    get$_effectivePipelineOwner() {
      var t1 = type$._RawViewInternal._as(this.get$widget())._deprecatedPipelineOwner;
      return t1 == null ? this.get$_pipelineOwner() : t1;
    },
    _handleSemanticsOwnerCreated$0() {
      var t1 = type$.nullable_RenderView._as(this.get$_effectivePipelineOwner().get$rootNode());
      if (t1 != null)
        t1.scheduleInitialSemantics$0();
    },
    _handleSemanticsOwnerDisposed$0() {
      var t1 = type$.nullable_RenderView._as(this.get$_effectivePipelineOwner().get$rootNode());
      if (t1 != null)
        t1.clearSemantics$0();
    },
    _handleSemanticsUpdate$1(update) {
      type$.SemanticsUpdate._as(update);
      type$._RawViewInternal._as(this.get$widget()).view.updateSemantics$1(update);
    },
    get$renderObject() {
      return type$.RenderView._as(D.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    _updateChild$0() {
      var child, e, stack, details, error, exception, error0, _this = this;
      try {
        child = type$._RawViewInternal._as(_this.get$widget()).builder.call$2(_this, _this.get$_effectivePipelineOwner());
        _this.set$_view$_child(_this.updateChild$3(_this._view$_child, child, null));
      } catch (exception) {
        e = C.unwrapException(exception);
        stack = C.getTraceFromException(exception);
        details = D.FlutterErrorDetails$(D.ErrorDescription$("building " + C.S(_this)), e, new A._RawViewElement__updateChild_closure(_this), "widgets library", false, stack);
        D.FlutterError_reportError(details);
        error0 = D.ErrorWidget__defaultErrorWidgetBuilder(details);
        error = error0;
        _this.set$_view$_child(_this.updateChild$3(null, error, _this.get$slot()));
      }
    },
    mount$2($parent, newSlot) {
      var _this = this;
      _this.super$RenderObjectElement$mount(type$.nullable_Element._as($parent), newSlot);
      _this.get$_effectivePipelineOwner().set$rootNode(_this.get$renderObject());
      _this._attachView$0();
      _this._updateChild$0();
      _this.get$renderObject().prepareInitialFrame$0();
      if (_this.get$_effectivePipelineOwner().get$semanticsOwner() != null)
        _this.get$renderObject().scheduleInitialSemantics$0();
    },
    _attachView$1(parentPipelineOwner) {
      var _this = this;
      type$.nullable_PipelineOwner._as(parentPipelineOwner);
      if (parentPipelineOwner == null)
        parentPipelineOwner = D.View_pipelineOwnerOf(_this);
      parentPipelineOwner.adoptChild$1(_this.get$_effectivePipelineOwner());
      D.RendererBinding_instance().addRenderView$1(_this.get$renderObject());
      _this._parentPipelineOwner = parentPipelineOwner;
    },
    _attachView$0() {
      return this._attachView$1(null);
    },
    _detachView$0() {
      var _this = this,
        parentPipelineOwner = _this._parentPipelineOwner;
      if (parentPipelineOwner != null) {
        D.RendererBinding_instance().removeRenderView$1(_this.get$renderObject());
        parentPipelineOwner.dropChild$1(_this.get$_effectivePipelineOwner());
        _this._parentPipelineOwner = null;
      }
    },
    didChangeDependencies$0() {
      var t1, newParentPipelineOwner, _this = this;
      _this.super$Element$didChangeDependencies();
      t1 = _this._parentPipelineOwner;
      if (t1 == null)
        return;
      newParentPipelineOwner = D.View_pipelineOwnerOf(_this);
      if (newParentPipelineOwner !== t1) {
        _this._detachView$0();
        _this._attachView$1(newParentPipelineOwner);
      }
    },
    performRebuild$0() {
      this.super$RenderObjectElement$performRebuild();
      this._updateChild$0();
    },
    activate$0() {
      var _this = this;
      _this.super$Element$activate();
      _this.get$_effectivePipelineOwner().set$rootNode(_this.get$renderObject());
      _this._attachView$0();
    },
    deactivate$0() {
      this._detachView$0();
      this.get$_effectivePipelineOwner().set$rootNode(null);
      this.super$RenderObjectElement$deactivate();
    },
    update$1(newWidget) {
      this.super$RenderObjectElement$update(type$._RawViewInternal._as(newWidget));
      this._updateChild$0();
    },
    visitChildren$1(visitor) {
      var t1;
      type$.void_Function_Element._as(visitor);
      t1 = this._view$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1(child) {
      type$.Element._as(child);
      this._view$_child = null;
      this.super$Element$forgetChild(child);
    },
    insertRenderObjectChild$2(child, slot) {
      type$.RenderBox._as(child);
      this.get$renderObject().set$child(child);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      type$.RenderObject._as(child);
    },
    removeRenderObjectChild$2(child, slot) {
      type$.RenderObject._as(child);
      this.get$renderObject().set$child(null);
    },
    unmount$0() {
      var _this = this;
      if (!C.boolConversionCheck(J.$eq$(_this.get$_effectivePipelineOwner(), type$._RawViewInternal._as(_this.get$widget())._deprecatedPipelineOwner)))
        _this.get$_effectivePipelineOwner().dispose$0();
      _this.super$RenderObjectElement$unmount();
    },
    set$_view$_child(_child) {
      this._view$_child = type$.nullable_Element._as(_child);
    }
  };
  A._ViewScope.prototype = {
    updateShouldNotify$1(oldWidget) {
      return !C.boolConversionCheck(J.$eq$(this.view, type$._ViewScope._as(oldWidget).view));
    }
  };
  A._PipelineOwnerScope.prototype = {
    updateShouldNotify$1(oldWidget) {
      return !C.boolConversionCheck(J.$eq$(this.pipelineOwner, type$._PipelineOwnerScope._as(oldWidget).pipelineOwner));
    }
  };
  A._MultiChildComponentWidget.prototype = {
    createElement$0() {
      return A._MultiChildComponentElement$(this);
    }
  };
  A.ViewCollection.prototype = {};
  A._MultiChildComponentElement.prototype = {
    attachRenderObject$1(newSlot) {
      this.super$Element$attachRenderObject(newSlot);
    },
    mount$2($parent, newSlot) {
      this.super$Element$mount0(type$.nullable_Element._as($parent), newSlot);
      this.rebuild$0();
    },
    updateSlot$1(newSlot) {
      this.super$Element$updateSlot(newSlot);
    },
    update$1(newWidget) {
      this.super$Element$update0(type$._MultiChildComponentWidget._as(newWidget));
      this.rebuild$1$force(true);
    },
    performRebuild$0() {
      var views, t1, t2, _length, _list, _i, _this = this,
        typedWidget = type$._MultiChildComponentWidget._as(_this.get$widget());
      _this.set$_childElement(_this.updateChild$3(_this._childElement, null, _this.get$slot()));
      views = typedWidget._view$_views;
      t1 = _this._viewElements;
      t2 = _this._forgottenViewElements;
      _length = J.get$length$asx(views);
      _list = J.JSArray_JSArray$allocateGrowable(_length, type$.Object);
      for (_i = 0; _i < _length; ++_i)
        F.JSArray_methods.$indexSet(_list, _i, E.C_Object);
      _this.set$_viewElements(_this.updateChildren$4$forgottenChildren$slots(t1, views, t2, _list));
      J.clear$0$ax(t2);
      _this.super$Element$performRebuild();
    },
    forgetChild$1(child) {
      var _this = this;
      type$.Element._as(child);
      if (C.boolConversionCheck(child.$eq(0, _this._childElement)))
        _this._childElement = null;
      else
        J.add$1$ax(_this._forgottenViewElements, child);
      _this.super$Element$forgetChild(child);
    },
    visitChildren$1(visitor) {
      var t1, t2, t3, t4;
      type$.void_Function_Element._as(visitor);
      t1 = this._childElement;
      if (t1 != null)
        visitor.call$1(t1);
      for (t1 = J.get$iterator$ax(this._viewElements), t2 = this._forgottenViewElements, t3 = J.getInterceptor$asx(t2); C.boolConversionCheck(t1.moveNext$0());) {
        t4 = t1.get$current();
        if (!C.boolConversionCheck(t3.contains$1(t2, t4)))
          visitor.call$1(t4);
      }
    },
    get$renderObjectAttachingChild() {
      return this._childElement;
    },
    debugDescribeChildren$0() {
      var i, i0,
        t1 = C._setArrayType([], type$.JSArray_DiagnosticsNode),
        t2 = this._childElement;
      if (t2 != null)
        t1.push(t2.toDiagnosticsNode$0());
      i = 0;
      while (true) {
        t2 = J.get$length$asx(this._viewElements);
        if (typeof t2 !== "number")
          return C.iae(t2);
        if (!(i < t2))
          break;
        i0 = i + 1;
        t1.push(J.$index$asx(this._viewElements, i).toDiagnosticsNode$2$name$style("view " + i0, E.DiagnosticsTreeStyle_2));
        i = i0;
      }
      return t1;
    },
    set$_viewElements(_viewElements) {
      this._viewElements = type$.List_Element._as(_viewElements);
    },
    set$_childElement(_childElement) {
      this._childElement = type$.nullable_Element._as(_childElement);
    }
  };
  A._DeprecatedRawViewKey.prototype = {
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (!C.boolConversionCheck(J.$eq$(J.get$runtimeType$(other), _this.get$runtimeType(0))))
        return false;
      t1 = false;
      if (_this.$ti._is(other)) {
        t2 = other.view;
        t3 = _this.view;
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = other.owner;
          t3 = _this.owner;
          if (t2 == null ? t3 == null : t2 === t3) {
            t1 = other.renderView;
            t2 = _this.renderView;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          }
        }
      }
      return t1;
    },
    get$hashCode(_) {
      return C.Object_hash(this.view, this.owner, this.renderView, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue, F.C_SentinelValue);
    },
    toString$0(_) {
      return "[_DeprecatedRawViewKey " + C.S(D.describeIdentity(this.view)) + "]";
    }
  };
  A.__ViewState_State_WidgetsBindingObserver.prototype = {$isWidgetsBindingObserver: 1};
  A.Key0.prototype = {};
  A.LocalKey0.prototype = {};
  A.UniqueKey0.prototype = {
    toString$0(_) {
      return "[#" + C.S(this.get$hashCode(0)) + "]";
    }
  };
  A.FlutterEmbedView.prototype = {
    createState$0() {
      return A._FlutterEmbedViewState$();
    }
  };
  A._FlutterEmbedViewState.prototype = {
    initState$0() {
      this.super$State$initState();
      this.get$context().get$binding().addPostFrameCallback$1(new A._FlutterEmbedViewState_initState_closure(this));
    },
    get$didRenderView() {
      var t1 = this._frame;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 1;
    },
    waitOnWarmupFrames$0() {
      var t1, _this = this;
      if (!C.boolConversionCheck(_this.get$mounted()))
        return;
      t1 = _this._frame;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 1) {
        _this.setState$1(new A._FlutterEmbedViewState_waitOnWarmupFrames_closure());
        return;
      }
      D.WidgetsBinding_instance().addPostFrameCallback$1(new A._FlutterEmbedViewState_waitOnWarmupFrames_closure0(_this));
    },
    dispose$0() {
      var t1 = this.viewId;
      if (t1 != null)
        A.removeView(t1);
      this.super$State$dispose0();
    },
    findChildDomElement$1(element) {
      var t1 = {};
      type$.Element_2._as(element);
      t1.node = null;
      element.visitChildren$1(new A._FlutterEmbedViewState_findChildDomElement_closure(t1, this));
      return t1.node;
    },
    didUpdateComponent$1(oldComponent) {
      var t1;
      this.super$State$didUpdateComponent(type$.FlutterEmbedView._as(oldComponent));
      t1 = this.rebuildFlutterApp;
      if (t1 != null)
        t1.call$0();
    },
    build$1(context) {
      return C._makeSyncStarIterable(this.build$body$_FlutterEmbedViewState(type$.BuildContext_2._as(context)), type$.Component);
    },
    build$body$_FlutterEmbedViewState($async$context) {
      var $async$self = this;
      return function() {
        var context = $async$context;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t3, _0_0, t4, t5, t6, t7, t1, t2;
        return function $async$build$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$component().id;
                t2 = C._setArrayType([], type$.JSArray_nullable_String);
                if ($async$self.get$component().classes != null)
                  t2.push($async$self.get$component().classes);
                if (C.boolConversionCheck($async$self.get$didRenderView()))
                  t2.push("active");
                t2 = F.JSArray_methods.join$1(t2, " ");
                t3 = C._setArrayType([], type$.JSArray_Styles);
                _0_0 = $async$self.get$component().constraints;
                if (_0_0 != null) {
                  t4 = type$.nullable_double;
                  if (!C.boolConversionCheck(J.$eq$(C.getProperty(_0_0, "minWidth", t4), 1 / 0))) {
                    t5 = C.getProperty(_0_0, "minWidth", t4);
                    t5 = t5 == null ? null : C.UnitExt_get_px(t5);
                  } else
                    t5 = null;
                  if (!C.boolConversionCheck(J.$eq$(C.getProperty(_0_0, "maxWidth", t4), 1 / 0))) {
                    t6 = C.getProperty(_0_0, "maxWidth", t4);
                    t6 = t6 == null ? null : C.UnitExt_get_px(t6);
                  } else
                    t6 = null;
                  if (!C.boolConversionCheck(J.$eq$(C.getProperty(_0_0, "minHeight", t4), 1 / 0))) {
                    t7 = C.getProperty(_0_0, "minHeight", t4);
                    t7 = t7 == null ? null : C.UnitExt_get_px(t7);
                  } else
                    t7 = null;
                  if (!C.boolConversionCheck(J.$eq$(C.getProperty(_0_0, "maxHeight", t4), 1 / 0))) {
                    t4 = C.getProperty(_0_0, "maxHeight", t4);
                    t4 = t4 == null ? null : C.UnitExt_get_px(t4);
                  } else
                    t4 = null;
                  t3.push(C._BoxStyles$(null, null, t4, t6, t7, t5));
                }
                if ($async$self.get$component().styles != null) {
                  t4 = $async$self.get$component().styles;
                  t4.toString;
                  t3.push(t4);
                }
                t3 = C._CombinedStyles$(t3);
                t4 = type$.JSArray_Component;
                t5 = C._setArrayType([], t4);
                if ($async$self.get$component().loader != null && !C.boolConversionCheck($async$self.get$didRenderView())) {
                  t6 = $async$self.get$component().loader;
                  t6.toString;
                  t5.push(t6);
                }
                t5.push(C.div(C._setArrayType([], t4), null, null, $async$self.flutterDivKey, null));
                $async$goto = 2;
                return $async$iterator._async$_current = C.div(t5, t2, t1, null, t3), 1;
              case 2:
                // after yield
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    set$rebuildFlutterApp(rebuildFlutterApp) {
      this.rebuildFlutterApp = type$.nullable_void_Function._as(rebuildFlutterApp);
    },
    set$viewId(viewId) {
      this.viewId = C._asIntQ(viewId);
    },
    set$_frame(_frame) {
      this._frame = C._asInt(_frame);
    }
  };
  A.MultiViewApp.prototype = {
    createState$0() {
      return A._MultiViewAppState$();
    },
    viewBuilder$1(arg0) {
      return this.viewBuilder.call$1(arg0);
    }
  };
  A._MultiViewAppState.prototype = {
    initState$0() {
      this.super$State$initState0();
      D.WidgetsBinding_instance().addObserver$1(this);
      this._updateViews$0();
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.MultiViewApp._as(oldWidget));
      J.clear$0$ax(this._views);
      this._updateViews$0();
    },
    didChangeMetrics$0() {
      this._updateViews$0();
    },
    _updateViews$0() {
      var t1, t2, t3, t4, viewWidget, _this = this,
        newViews = C.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.Widget);
      for (t1 = J.get$iterator$ax(D.WidgetsBinding_instance().get$platformDispatcher().get$views()); C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t3 = _this._views;
        t4 = t2.viewId;
        viewWidget = J.$index$asx(t3, t4);
        newViews.$indexSet(0, t4, viewWidget == null ? _this._createViewWidget$1(t2) : viewWidget);
      }
      _this.setState$1(new A._MultiViewAppState__updateViews_closure(_this, newViews));
    },
    _createViewWidget$1(view) {
      var t1;
      type$.FlutterView._as(view);
      t1 = this.get$widget().viewBuilder$1(view.viewId);
      t1.toString;
      return A.View$(t1, view);
    },
    dispose$0() {
      D.WidgetsBinding_instance().removeObserver$1(this);
      this.super$State$dispose();
    },
    build$1(context) {
      type$.BuildContext._as(context);
      return A.ViewCollection$(J.toList$1$growable$ax(this._views.get$values(), false));
    },
    set$_views(_views) {
      this._views = type$.Map_Object_Widget._as(_views);
    },
    $isWidgetsBindingObserver: 1
  };
  A.__MultiViewAppState_State_WidgetsBindingObserver.prototype = {$isWidgetsBindingObserver: 1};
  var typesOffset = hunkHelpers.updateTypes(["~()", "bool(FlutterHtmlKeyboardEvent)", "List<DiagnosticsNode>()", "int(RenderObject,RenderObject)", "~(Element0)", "~(Object?)", "~(List<FrameTiming>)", "Future<@>(MethodCall)", "bool(SemanticsNode)", "bool(KeyData)", "~(Duration)", "KeyData()", "Future<ServiceExtensionResponse>(String,Map<String,String>)", "~(AppLifecycleState)", "~(SemanticsUpdate0)", "~(RestorationBucket)", "Future<~>(MethodCall)", "int(SemanticsNode,SemanticsNode)", "~(PointerEvent)", "~({allowPlatformDefault!bool})", "FontFamily(@)", "Map<~(PointerEvent),Matrix40?>()", "~(~(PointerEvent),Matrix40?)", "bool(PointerData)", "HitTestResult(Offset,int)", "MouseCursor0(MouseTrackerAnnotation)", "~(MouseTrackerAnnotation,Matrix40)", "bool(MouseTrackerAnnotation)", "FontAsset(@)", "_PointerEventDescription?(PointerData)", "~(FrameTiming)", "~(int,_FrameCallbackEntry)", "~(SemanticsActionEvent)", "~(int)", "double?(int)", "Stream<LicenseEntry>()", "Future<String?>(String?)", "~(PointerDataPacket)", "Future<Map<String,@>>(@)", "int(Object?,Object?)", "RawKeyEventData()", "bool(int,PointerEventResampler)", "PointerEventResampler()", "List<RestorationBucket>()", "List<RestorationBucket>(List<RestorationBucket>)", "bool(InheritedElement)", "Future<bool>(MethodCall)", "String(GestureArenaMember)", "bool(KeyMessage)", "~(RawKeyEvent)", "_ViewScope(BuildContext,PipelineOwner)", "~(int,bool(FlutterHtmlKeyboardEvent))", "Widget(BuildContext,~(~()))", "~(ViewFocusEvent)", "~(ByteData?)", "int(_TaskEntry<@>,_TaskEntry<@>)", "bool({priority!int,scheduler!SchedulerBinding})", "List<LicenseEntry>(String)", "int(Element0,Element0)", "_GestureArena()"]);
  A.AppBootstrap_prepareEngineInitializer_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.JavaScriptObject),
        $async$returnValue, $async$self = this, t1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return C._asyncAwait(t1.autoStart$0(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = t1._prepareFlutterApp$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 77
  };
  A.AppBootstrap_prepareEngineInitializer_closure0.prototype = {
    call$1(configuration) {
      return this.$call$body$AppBootstrap_prepareEngineInitializer_closure(type$.nullable_JavaScriptObject._as(configuration));
    },
    call$0() {
      return this.call$1(null);
    },
    $call$body$AppBootstrap_prepareEngineInitializer_closure(configuration) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.JavaScriptObject),
        $async$returnValue, $async$self = this, t1;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return C._asyncAwait(t1._initializeEngine$1(configuration), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = t1._prepareAppRunner$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 59
  };
  A.AppBootstrap__prepareAppRunner_closure.prototype = {
    call$1(params) {
      return this.$call$body$AppBootstrap__prepareAppRunner_closure(type$.nullable_JavaScriptObject._as(params));
    },
    call$0() {
      return this.call$1(null);
    },
    $call$body$AppBootstrap__prepareAppRunner_closure(params) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.JavaScriptObject),
        $async$returnValue, $async$self = this, t1;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return C._asyncAwait(t1._runApp$0(), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = t1._prepareFlutterApp$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 59
  };
  A.AppBootstrap__prepareFlutterApp_closure.prototype = {
    call$1(options) {
      type$.JavaScriptObject._as(options);
      return this.$this.get$viewManager().createAndRegisterView$1(options).viewId;
    },
    $signature: 76
  };
  A.AppBootstrap__prepareFlutterApp_closure0.prototype = {
    call$1(viewId) {
      C._asInt(viewId);
      return this.$this.get$viewManager().disposeAndUnregisterView$1(viewId);
    },
    $signature: 75
  };
  A.fetchFontManifest_closure.prototype = {
    call$1(accumulated) {
      var t1;
      type$.List_nullable_Object._as(accumulated);
      t1 = J.getInterceptor$asx(accumulated);
      if (!C.boolConversionCheck(J.$eq$(t1.get$length(accumulated), 1)))
        throw C.wrapException(C.AssertionError$(string$.There_));
      this._box_0.fontManifestJson = t1.get$first(accumulated);
    },
    $signature: 69
  };
  A.fetchFontManifest_closure0.prototype = {
    call$1(chunk) {
      return J.add$1$ax(this.inputSink, D.JSUint8ArrayToUint8List_get_toDart(type$.NativeUint8List._as(chunk)));
    },
    $signature: 66
  };
  A.fetchFontManifest_closure1.prototype = {
    call$1(fontFamilyJson) {
      type$.Map_String_dynamic._as(fontFamilyJson);
      return A.FontFamily$(D.JsonExtensions_readString(fontFamilyJson, "family"), J.toList$0$ax(J.map$1$1$ax(D.JsonExtensions_readList(fontFamilyJson, "fonts"), new A.fetchFontManifest__closure(), type$.FontAsset)));
    },
    $signature: typesOffset + 20
  };
  A.fetchFontManifest__closure.prototype = {
    call$1(fontAssetJson) {
      var asset, t2, t3, t4,
        t1 = type$.String,
        descriptors = C.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = J.get$iterator$ax(type$.Map_String_dynamic._as(fontAssetJson).get$entries()), asset = null; C.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t3 = t2.key;
        t4 = C.boolConversionCheck(J.$eq$(t3, "asset"));
        t2 = t2.value;
        if (t4) {
          C._asString(t2);
          asset = t2;
        } else
          descriptors.$indexSet(0, t3, C.S(t2));
      }
      if (asset == null)
        throw C.wrapException(C.AssertionError$("Invalid Font manifest, missing 'asset' key on font."));
      return A.FontAsset$(asset, descriptors);
    },
    $signature: typesOffset + 28
  };
  A.initializeEngineServices_closure.prototype = {
    call$2(_, __) {
      var t1;
      C._asString(_);
      type$.Map_String_String._as(__);
      for (t1 = J.get$iterator$ax($._hotRestartListeners); C.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().call$0();
      return C.Future_Future$value(A.ServiceExtensionResponse$result("OK"), type$.ServiceExtensionResponse);
    },
    $signature: typesOffset + 12
  };
  A.initializeEngineServices_closure0.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (!C.boolConversionCheck(t1.waitingForAnimation)) {
        t1.waitingForAnimation = true;
        D.DomWindowExtension_requestAnimationFrame(self.window, new A.initializeEngineServices__closure(t1));
      }
    },
    $signature: 0
  };
  A.initializeEngineServices__closure.prototype = {
    call$1(highResTime) {
      var t1, highResTimeMicroseconds;
      C._asDouble(highResTime);
      A.FrameTimingRecorder_recordCurrentFrameVsync();
      A.FrameTimingRecorder_recordCurrentFrameBuildStart();
      this._box_0.waitingForAnimation = false;
      t1 = D.JSNumberToNumber_get_toDartDouble(highResTime);
      if (typeof t1 !== "number")
        return C.iae(t1);
      highResTimeMicroseconds = F.JSNumber_methods.toInt$0(1000 * t1);
      if (D.EnginePlatformDispatcher_instance().get$onBeginFrame() != null)
        D.EnginePlatformDispatcher_instance().invokeOnBeginFrame$1(D.Duration$(highResTimeMicroseconds, 0));
      if (D.EnginePlatformDispatcher_instance().get$onDrawFrame() != null)
        D.EnginePlatformDispatcher_instance().invokeOnDrawFrame$0();
    },
    $signature: 30
  };
  A.initializeEngineServices_initializeRendererCallback.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = D.renderer().initialize$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 8
  };
  A.FlutterApp__staticInteropFactoryStub_closure.prototype = {
    call$1(id) {
      return this.removeView.call$1(D.JSNumberToNumber_get_toDartInt(C._asDouble(id)));
    },
    $signature: 65
  };
  A.FlutterEngineInitializer__staticInteropFactoryStub_closure.prototype = {
    call$1(config) {
      return A.futureToPromise(this.initializeEngine.call$1(type$.nullable_JavaScriptObject._as(config)), type$.JSObject);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 48
  };
  A.FlutterEngineInitializer__staticInteropFactoryStub_closure0.prototype = {
    call$0() {
      return A.futureToPromise(this.autoStart.call$0(), type$.JSObject);
    },
    $signature: 42
  };
  A.FlutterAppRunner__staticInteropFactoryStub_closure.prototype = {
    call$1(args) {
      return A.futureToPromise(this.runApp.call$1(type$.nullable_JavaScriptObject._as(args)), type$.JSObject);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 48
  };
  A.futureToPromise_closure.prototype = {
    call$2(resolver, rejecter) {
      var t1 = type$.JavaScriptFunction;
      this.future.then$1$2$onError(new A.futureToPromise__closure(t1._as(resolver), this.T), new A.futureToPromise__closure0(t1._as(rejecter)), type$.void);
    },
    $signature: 50
  };
  A.futureToPromise__closure.prototype = {
    call$1(value) {
      return C._callMethodUnchecked2(this.resolver, "call", null, this.T._as(value), type$.void);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.futureToPromise__closure0.prototype = {
    call$1(error) {
      $.$get$printWarning().call$1("Rejecting promise with error: " + C.S(error));
      C._callMethodUnchecked2(this.rejecter, "call", null, null, type$.void);
    },
    $signature: 41
  };
  A._kLogicalKeyToModifierGetter_closure.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$altKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure0.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$altKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure1.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$ctrlKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure2.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$ctrlKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure3.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$shiftKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure4.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$shiftKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure5.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$metaKey();
    },
    $signature: typesOffset + 1
  };
  A._kLogicalKeyToModifierGetter_closure6.prototype = {
    call$1($event) {
      return type$.FlutterHtmlKeyboardEvent._as($event).get$metaKey();
    },
    $signature: typesOffset + 1
  };
  A._cached_closure.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = t1.cache;
      return t2 == null ? t1.cache = this.body.call$0() : t2;
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.KeyboardBinding$__closure.prototype = {
    call$1(domEvent) {
      var $event, t1;
      type$.JavaScriptObject._as(domEvent);
      $event = A.FlutterHtmlKeyboardEvent$(domEvent);
      this.$this.get$_converter().handleEvent$1($event);
      t1 = A.RawKeyboard_instance();
      if (t1 != null)
        t1.handleHtmlEvent$1(domEvent);
    },
    $signature: 1
  };
  A.KeyboardBinding$__closure0.prototype = {
    call$1(domEvent) {
      var $event, t1;
      type$.JavaScriptObject._as(domEvent);
      $event = A.FlutterHtmlKeyboardEvent$(domEvent);
      this.$this.get$_converter().handleEvent$1($event);
      t1 = A.RawKeyboard_instance();
      if (t1 != null)
        t1.handleHtmlEvent$1(domEvent);
    },
    $signature: 1
  };
  A.KeyboardBinding__addEventListener_loggedHandler.prototype = {
    call$1($event) {
      type$.JavaScriptObject._as($event);
      if (C.boolConversionCheck(D.EngineSemantics_instance().receiveGlobalEvent$1($event)))
        this.handler.call$1($event);
    },
    $signature: 1
  };
  A.KeyboardBinding__onKeyData_closure.prototype = {
    call$1(handled) {
      this._box_0.result = C._asBool(handled);
    },
    $signature: 12
  };
  A.KeyboardConverter__scheduleAsyncEvent_closure.prototype = {
    call$1(_) {
      var _this = this;
      if (!C.boolConversionCheck(_this._box_0.canceled) && !C.boolConversionCheck(_this.$this._disposed)) {
        _this.callback.call$0();
        _this.$this.performDispatchKeyData$1(_this.getData.call$0());
      }
    },
    $signature: 5
  };
  A.KeyboardConverter__scheduleAsyncEvent_closure0.prototype = {
    call$0() {
      this._box_0.canceled = true;
    },
    $signature: 0
  };
  A.KeyboardConverter__startGuardingKey_closure.prototype = {
    call$0() {
      return A.KeyData$(null, this.logicalKey, this.physicalKey, true, J.$add$ansx(this.currentTimeStamp, E.Duration_2000000), B.KeyEventType_1);
    },
    $signature: typesOffset + 11
  };
  A.KeyboardConverter__startGuardingKey_closure0.prototype = {
    call$0() {
      J.remove$1$ax(this.$this._pressingRecords, this.physicalKey);
    },
    $signature: 0
  };
  A.KeyboardConverter__handleEvent_closure.prototype = {
    call$0() {
      var t2, result, localeLogicalKeys, t3, _this = this,
        t1 = _this.eventKey,
        mappedLogicalKey = B.Map_o06v8.$index(0, t1);
      if (mappedLogicalKey != null)
        return mappedLogicalKey;
      t2 = _this.event;
      if (C.boolConversionCheck(B.Map_0GYb.containsKey$1(t2.get$key()))) {
        t1 = t2.get$key();
        t1.toString;
        t1 = B.Map_0GYb.$index(0, t1);
        if (t1 == null)
          result = null;
        else {
          t2 = t2.get$location();
          t2.toString;
          result = J.$index$asx(t1, t2);
        }
        result.toString;
        return result;
      }
      if (C.boolConversionCheck(_this.logicalKeyIsCharacter)) {
        localeLogicalKeys = _this.$this._mapping.getLogicalKey$3(t2.get$code(), t2.get$key(), t2.get$keyCode());
        if (localeLogicalKeys != null)
          return localeLogicalKeys;
      }
      t3 = J.getInterceptor$(t1);
      if (C.boolConversionCheck(t3.$eq(t1, "Dead")))
        return A.KeyboardConverter__deadKeyToLogicalKey(_this.physicalKey, t2);
      t1 = t3.get$hashCode(t1);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + 98784247808;
    },
    $signature: 40
  };
  A.KeyboardConverter__handleEvent_closure0.prototype = {
    call$0() {
      return A.KeyData$(null, this.logicalKey.call$0(), this.physicalKey, true, this.timeStamp, B.KeyEventType_1);
    },
    $signature: typesOffset + 11
  };
  A.KeyboardConverter__handleEvent_closure1.prototype = {
    call$0() {
      J.remove$1$ax(this.$this._pressingRecords, this.physicalKey);
    },
    $signature: 0
  };
  A.KeyboardConverter__handleEvent_closure2.prototype = {
    call$2(testeeLogicalKey, getModifier) {
      var t1, t2, _this = this;
      C._asInt(testeeLogicalKey);
      type$.bool_Function_FlutterHtmlKeyboardEvent._as(getModifier);
      if (C.boolConversionCheck(J.$eq$(_this.logicalKey.call$0(), testeeLogicalKey)))
        return;
      t1 = _this.$this;
      t2 = t1._pressingRecords;
      if (C.boolConversionCheck(t2.containsValue$1(testeeLogicalKey)) && !C.boolConversionCheck(getModifier.call$1(_this.event)))
        J.removeWhere$1$ax(t2, new A.KeyboardConverter__handleEvent__closure(t1, testeeLogicalKey, _this.timeStamp));
    },
    $signature: typesOffset + 51
  };
  A.KeyboardConverter__handleEvent__closure.prototype = {
    call$2(physicalKey, logicalRecord) {
      var t1, t2;
      C._asInt(physicalKey);
      t1 = this.testeeLogicalKey;
      if (C._asInt(logicalRecord) !== t1)
        return false;
      t2 = this.$this._dispatchKeyData;
      t2.toString;
      t2.call$1(A.KeyData$(null, t1, physicalKey, true, this.timeStamp, B.KeyEventType_1));
      return true;
    },
    $signature: 67
  };
  A.KeyboardConverter_handleEvent_closure.prototype = {
    call$1(data) {
      type$.KeyData._as(data);
      this._box_0.sentAnyEvents = true;
      return this.$this.performDispatchKeyData$1(data);
    },
    $signature: typesOffset + 9
  };
  A.MultiEntriesBrowserHistory_onPopState_closure.prototype = {
    call$1(_) {
      type$.nullable_ByteData._as(_);
    },
    $signature: 7
  };
  A.SingleEntryBrowserHistory_onPopState_closure.prototype = {
    call$1(_) {
      type$.nullable_ByteData._as(_);
    },
    $signature: 7
  };
  A.SingleEntryBrowserHistory_onPopState_closure0.prototype = {
    call$1(_) {
      type$.nullable_ByteData._as(_);
    },
    $signature: 7
  };
  A.RawKeyboard$__closure.prototype = {
    call$0() {
      this.$this.dispose$0();
    },
    $signature: 0
  };
  A.RawKeyboard_handleHtmlEvent_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      J.remove$1$ax(t1._keydownTimers, this.timerKey);
      t1._synthesizeKeyup$1(this.event);
    },
    $signature: 0
  };
  A.RawKeyboard_handleHtmlEvent_closure0.prototype = {
    call$1(data) {
      var t1;
      type$.nullable_ByteData._as(data);
      if (data == null)
        return;
      if (C._asBool(type$.Map_String_dynamic._as(E.C_JSONMessageCodec.decodeMessage$1(data)).$index(0, "handled"))) {
        t1 = this.event;
        t1.preventDefault$0();
        t1.stopPropagation$0();
      }
    },
    $signature: 7
  };
  A.TestUrlStrategy_go_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._currentEntryIndex,
        t3 = this.count;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return C.iae(t3);
      t1.set$_currentEntryIndex(t2 + t3);
      if (C.boolConversionCheck(t1.get$withinAppHistory()))
        t1._firePopStateEvent$0();
    },
    $signature: 0
  };
  A.TestUrlStrategy_addPopStateListener_closure.prototype = {
    call$0() {
      C.scheduleMicrotask(new A.TestUrlStrategy_addPopStateListener__closure(this.$this, this.fn));
    },
    $signature: 0
  };
  A.TestUrlStrategy_addPopStateListener__closure.prototype = {
    call$0() {
      return J.remove$1$ax(this.$this.listeners, this.fn);
    },
    $signature: 0
  };
  A.TestUrlStrategy__nextEventLoop_closure.prototype = {
    call$1(_) {
      return this.callback.call$0();
    },
    $signature: 68
  };
  A.EngineFlutterWindow_handleNavigationMessage_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, uriString, uri, t2, path, t3, decoded, $arguments;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              decoded = E.C_JSONMethodCodec.decodeMethodCall$1($async$self.data);
              $arguments = type$.nullable_Map_String_dynamic._as(decoded.$arguments);
            case 3:
              // switch
              switch (decoded.method) {
                case "selectMultiEntryHistory":
                  // goto case
                  $async$goto = 5;
                  break;
                case "selectSingleEntryHistory":
                  // goto case
                  $async$goto = 6;
                  break;
                case "routeUpdated":
                  // goto case
                  $async$goto = 7;
                  break;
                case "routeInformationUpdated":
                  // goto case
                  $async$goto = 8;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              $async$goto = 9;
              return C._asyncAwait($async$self.$this._useMultiEntryBrowserHistory$0(), $async$call$0);
            case 9:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 6:
              // case
              $async$goto = 10;
              return C._asyncAwait($async$self.$this._useSingleEntryBrowserHistory$0(), $async$call$0);
            case 10:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              t1 = $async$self.$this;
              $async$goto = 11;
              return C._asyncAwait(t1._useSingleEntryBrowserHistory$0(), $async$call$0);
            case 11:
              // returning from await.
              t1 = t1.get$browserHistory();
              $arguments.toString;
              t1.setRouteName$1(D.JsonExtensions_tryString($arguments, "routeName"));
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
              $arguments.toString;
              uriString = D.JsonExtensions_tryString($arguments, "uri");
              if (uriString != null) {
                uri = D.Uri_parse(uriString);
                t1 = C.boolConversionCheck(J.get$isEmpty$asx(uri.get$path())) ? "/" : uri.get$path();
                t2 = C.boolConversionCheck(J.get$isEmpty$asx(uri.get$queryParametersAll())) ? null : uri.get$queryParametersAll();
                path = D.Uri_decodeComponent(J.toString$0$(D._Uri__Uri(C.boolConversionCheck(J.get$isEmpty$asx(uri.get$fragment())) ? null : uri.get$fragment(), t1, t2)));
              } else {
                t1 = D.JsonExtensions_tryString($arguments, "location");
                t1.toString;
                path = t1;
              }
              t1 = $async$self.$this.get$browserHistory();
              t2 = $arguments.$index(0, "state");
              t3 = D.JsonExtensions_tryBool($arguments, "replace");
              t1.setRouteName$3$replace$state(path, t3 == null ? false : t3, t2);
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // after switch
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._StringStream__goalToEventCode_closure.prototype = {
    call$1(beforeEntry) {
      type$.MapEntry_String_String._as(beforeEntry);
      return C.MapEntry$_(J.codeUnitAt$1$s(beforeEntry.value, 0), beforeEntry.key, type$.int, type$.String);
    },
    $signature: 70
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      D._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && C.boolConversionCheck(doneFuture.get$_mayComplete()))
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A.FutureOfJSAnyToJSPromise_get_toJS_closure.prototype = {
    call$2(resolve, reject) {
      var t1 = type$.JavaScriptFunction;
      this._this.then$1$2$onError(new A.FutureOfJSAnyToJSPromise_get_toJS__closure(t1._as(resolve)), new A.FutureOfJSAnyToJSPromise_get_toJS__closure0(t1._as(reject)), type$.nullable_Object);
    },
    $signature: 50
  };
  A.FutureOfJSAnyToJSPromise_get_toJS__closure.prototype = {
    call$1(value) {
      var t1 = this.resolve;
      C._callMethodUnchecked2(t1, "call", t1, value, type$.nullable_Object);
      return value;
    },
    $signature: 34
  };
  A.FutureOfJSAnyToJSPromise_get_toJS__closure0.prototype = {
    call$2(error, stackTrace) {
      var wrapper, t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      wrapper = A.JSFunctionUnsafeUtilExtension_callAsConstructor(type$.JavaScriptFunction._as(C.JSObjectUnsafeUtilExtension___(C.globalContext(), "Error")), C.StringToJSString_get_toJS("Dart exception thrown from converted Future. Use the properties 'error' to fetch the boxed error and 'stack' to recover the stack trace."), type$.JSObject);
      A.JSObjectUnsafeUtilExtension____(wrapper, "error", A.ObjectToJSBoxedDartObject_get_toJSBox(error));
      A.JSObjectUnsafeUtilExtension____(wrapper, "stack", C.StringToJSString_get_toJS(stackTrace.toString$0(0)));
      t1 = this.reject;
      C._callMethodUnchecked2(t1, "call", t1, wrapper, type$.nullable_Object);
      return wrapper;
    },
    $signature: 71
  };
  A.KeyData__logicalToString_closure.prototype = {
    call$0() {
      switch (this.planeNum) {
        case 0:
          return " (Unicode)";
        case 1:
          return " (Unprintable)";
        case 2:
          return " (Flutter)";
        case 17:
          return " (Android)";
        case 18:
          return " (Fuchsia)";
        case 19:
          return " (iOS)";
        case 20:
          return " (macOS)";
        case 21:
          return " (GTK)";
        case 22:
          return " (Windows)";
        case 23:
          return " (Web)";
        case 24:
          return " (GLFW)";
      }
      return "";
    },
    $signature: 10
  };
  A.KeyData__quotedCharCode_closure.prototype = {
    call$1(code) {
      return J.padLeft$2$s(F.JSInt_methods.toRadixString$1(C._asInt(code), 16), 2, "0");
    },
    $signature: 72
  };
  A.bootstrapEngine_closure.prototype = {
    call$1(configuration) {
      return this.$call$body$bootstrapEngine_closure(type$.nullable_JavaScriptObject._as(configuration));
    },
    call$0() {
      return this.call$1(null);
    },
    $call$body$bootstrapEngine_closure(configuration) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return C._asyncAwait(A.initializeEngineServices(configuration), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 73
  };
  A.bootstrapEngine_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.registerPlugins;
              if (t1 != null)
                t1.call$0();
              $async$goto = 2;
              return C._asyncAwait(A.initializeEngineUi(), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.runApp;
              if (t1 != null)
                t1.call$0();
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 8
  };
  A.BrowserPlatformLocation_getOrCreateDomEventListener_closure.prototype = {
    call$0() {
      return D.createDomEventListener(this.fn);
    },
    $signature: 32
  };
  A.HashUrlStrategy_addPopStateListener_wrappedFn.prototype = {
    call$1($event) {
      this.fn.call$1(A.DomPopStateEventExtension_get_state(type$.JavaScriptObject._as(type$.Object._as($event))));
    },
    $signature: 74
  };
  A.HashUrlStrategy_addPopStateListener_closure.prototype = {
    call$0() {
      this.$this.toString;
      return B.C_BrowserPlatformLocation.removePopStateListener$1(this.wrappedFn);
    },
    $signature: 0
  };
  A.HashUrlStrategy__waitForPopState_closure.prototype = {
    call$1(_) {
      this.unsubscribe.readLocal$1$0(type$.void_Function).call$0();
      this.completer.complete$0();
    },
    $signature: 9
  };
  A.BindingBase_initServiceExtensions_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.connectedVmServiceUri;
              $async$returnValue = t1 == null ? "" : t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A.BindingBase_initServiceExtensions_closure0.prototype = {
    call$1(uri) {
      return this.$call$body$BindingBase_initServiceExtensions_closure0(C._asString(uri));
    },
    $call$body$BindingBase_initServiceExtensions_closure0(uri) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.connectedVmServiceUri = uri;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 61
  };
  A.BindingBase_initServiceExtensions_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.activeDevToolsServerAddress;
              $async$returnValue = t1 == null ? "" : t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A.BindingBase_initServiceExtensions_closure2.prototype = {
    call$1(serverAddress) {
      return this.$call$body$BindingBase_initServiceExtensions_closure(C._asString(serverAddress));
    },
    $call$body$BindingBase_initServiceExtensions_closure(serverAddress) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.activeDevToolsServerAddress = serverAddress;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 61
  };
  A.BindingBase_lockEvents_closure.prototype = {
    call$0() {
      var error, stack, exception,
        t1 = this.$this,
        t2 = t1._lockCount;
      if (typeof t2 !== "number")
        return t2.$sub();
      t1.set$_lockCount(t2 - 1);
      if (!C.boolConversionCheck(t1.get$locked())) {
        this._box_0.debugTimelineTask.finish$0();
        try {
          t1.unlocked$0();
        } catch (exception) {
          error = C.unwrapException(exception);
          stack = C.getTraceFromException(exception);
          D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("while handling pending events"), error, null, "foundation", false, stack));
        }
      }
    },
    $signature: 6
  };
  A.BindingBase_registerBoolServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerBoolServiceExtension_closure(type$.Map_String_String._as(parameters));
    },
    $call$body$BindingBase_registerBoolServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = C.boolConversionCheck(parameters.containsKey$1("enabled")) ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return C._asyncAwait($async$self.setter.call$1(J.$eq$(parameters.$index(0, "enabled"), "true")), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = C;
              $async$goto = 6;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = $async$temp1.boolConversionCheck($async$result) ? "true" : "false";
              $async$self.$this._postExtensionStateChangedEvent$2($async$self.name, t1);
            case 4:
              // join
              $async$temp1 = C;
              $async$temp2 = C;
              $async$goto = 7;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["enabled", $async$temp2.boolConversionCheck($async$result) ? "true" : "false"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.BindingBase_registerNumericServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerNumericServiceExtension_closure(type$.Map_String_String._as(parameters));
    },
    $call$body$BindingBase_registerNumericServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t2, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.name;
              $async$goto = C.boolConversionCheck(parameters.containsKey$1(t1)) ? 3 : 4;
              break;
            case 3:
              // then
              t2 = parameters.$index(0, t1);
              t2.toString;
              $async$goto = 5;
              return C._asyncAwait($async$self.setter.call$1(D.double_parse(t2)), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = $async$self.$this;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 6;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1._postExtensionStateChangedEvent$2($async$temp2, $async$temp3.toString$0$($async$result));
            case 4:
              // join
              $async$temp1 = C;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 7;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal([$async$temp2, $async$temp3.toString$0$($async$result)], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.BindingBase_registerStringServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerStringServiceExtension_closure(type$.Map_String_String._as(parameters));
    },
    $call$body$BindingBase_registerStringServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = C.boolConversionCheck(parameters.containsKey$1("value")) ? 3 : 4;
              break;
            case 3:
              // then
              t1 = parameters.$index(0, "value");
              t1.toString;
              $async$goto = 5;
              return C._asyncAwait($async$self.setter.call$1(t1), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = $async$self.$this;
              $async$temp2 = $async$self.name;
              $async$goto = 6;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1._postExtensionStateChangedEvent$2($async$temp2, $async$result);
            case 4:
              // join
              $async$temp1 = C;
              $async$goto = 7;
              return C._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["value", $async$result], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.BindingBase_registerServiceExtension_closure.prototype = {
    call$2(method, parameters) {
      return this.$call$body$BindingBase_registerServiceExtension_closure(C._asString(method), type$.Map_String_String._as(parameters));
    },
    $call$body$BindingBase_registerServiceExtension_closure(method, parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.ServiceExtensionResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, result, exception, stack, exception0, t1, $async$exception0, $async$temp1;
      var $async$call$2 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return C._asyncAwait(A.debugInstrumentAction("Wait for outer event loop", new A.BindingBase_registerServiceExtension__closure(), type$.void), $async$call$2);
            case 3:
              // returning from await.
              result = C._Cell$named("result");
              $async$handler = 5;
              $async$temp1 = result;
              $async$goto = 8;
              return C._asyncAwait($async$self.callback.call$1(parameters), $async$call$2);
            case 8:
              // returning from await.
              $async$temp1.set$value($async$result);
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception0 = $async$currentError;
              exception = C.unwrapException($async$exception0);
              stack = C.getTraceFromException($async$exception0);
              D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$('during a service extension callback for "' + method + '"'), exception, null, "Flutter framework", false, stack));
              t1 = type$.String;
              t1 = A.ServiceExtensionResponse$error(-32000, F.C_JsonCodec.encode$1(C.LinkedHashMap_LinkedHashMap$_literal(["exception", J.toString$0$(exception), "stack", J.toString$0$(stack), "method", method], t1, t1)));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
              t1 = type$.Map_String_dynamic;
              J.$indexSet$ax(result.readLocal$1$0(t1), "type", "_extensionType");
              J.$indexSet$ax(result.readLocal$1$0(t1), "method", method);
              $async$returnValue = A.ServiceExtensionResponse$result(F.C_JsonCodec.encode$1(result.readLocal$1$0(t1)));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return C._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: typesOffset + 12
  };
  A.BindingBase_registerServiceExtension__closure.prototype = {
    call$0() {
      return D.Future_Future$delayed(F.Duration_0, null, type$.void);
    },
    $signature: 8
  };
  A._GestureArena_toString_closure.prototype = {
    call$1(member) {
      type$.GestureArenaMember._as(member);
      if (member === this.$this.eagerWinner)
        return C.S(member) + " (eager winner)";
      return C.S(member);
    },
    $signature: typesOffset + 47
  };
  A.GestureArenaManager_add_closure.prototype = {
    call$0() {
      return A._GestureArena$();
    },
    $signature: typesOffset + 59
  };
  A.GestureArenaManager__tryToResolveArena_closure.prototype = {
    call$0() {
      return this.$this._resolveByDefault$2(this.pointer, this.state);
    },
    $signature: 0
  };
  A._Resampler_addOrDispatch_closure.prototype = {
    call$0() {
      return A.PointerEventResampler$();
    },
    $signature: typesOffset + 42
  };
  A._Resampler_sample_closure.prototype = {
    call$1(_) {
      type$.Timer._as(_);
      return this.$this._onSampleTimeChanged$0();
    },
    $signature: 58
  };
  A._Resampler_sample_closure0.prototype = {
    call$2(key, resampler) {
      C._asInt(key);
      type$.PointerEventResampler._as(resampler);
      return !C.boolConversionCheck(resampler.get$hasPendingEvents()) && !C.boolConversionCheck(resampler.get$isDown());
    },
    $signature: typesOffset + 41
  };
  A._Resampler_sample_closure1.prototype = {
    call$1(_) {
      var t1, t2;
      type$.Duration._as(_);
      t1 = this.$this;
      t1._frameCallbackScheduled = false;
      t1.set$_frameTime(this.scheduler.get$currentSystemFrameTimeStamp());
      t1._frameTimeAge.reset$0();
      t2 = t1._binding$_timer;
      if (t2 != null)
        t2.cancel$0();
      t1.set$_binding$_timer(A.Timer_Timer$periodic(t1._samplingInterval, new A._Resampler_sample__closure(t1)));
      t1._onSampleTimeChanged$0();
    },
    $signature: 3
  };
  A._Resampler_sample__closure.prototype = {
    call$1(_) {
      type$.Timer._as(_);
      return this.$this._onSampleTimeChanged$0();
    },
    $signature: 58
  };
  A.GestureBinding_dispatchEvent_closure.prototype = {
    call$0() {
      var _null = null;
      return C._setArrayType([D.DiagnosticsProperty$("Event", this.event, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_9, _null, type$.PointerEvent)], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A.GestureBinding_dispatchEvent_closure0.prototype = {
    call$0() {
      var _null = null;
      return C._setArrayType([D.DiagnosticsProperty$("Event", this.event, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_9, _null, type$.PointerEvent), D.DiagnosticsProperty$("Target", this.entry.target, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_9, _null, type$.HitTestTarget)], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A.PointerEventConverter_expand_closure.prototype = {
    call$1(datum) {
      return !C.boolConversionCheck(J.$eq$(type$.PointerData._as(datum).signalKind, E.PointerSignalKind_4));
    },
    $signature: typesOffset + 23
  };
  A.PointerEventConverter_expand_closure0.prototype = {
    call$1(datum) {
      var t1, devicePixelRatio, position, delta, radiusMinor, radiusMajor, radiusMin, radiusMax, timeStamp, kind, t2;
      type$.PointerData._as(datum);
      t1 = datum.viewId;
      devicePixelRatio = this.devicePixelRatioForView.call$1(t1);
      if (devicePixelRatio == null)
        return null;
      position = D.Offset$(datum.physicalX, datum.physicalY).$div(0, devicePixelRatio);
      delta = D.Offset$(datum.physicalDeltaX, datum.physicalDeltaY).$div(0, devicePixelRatio);
      radiusMinor = A.PointerEventConverter__toLogicalPixels(datum.radiusMinor, devicePixelRatio);
      radiusMajor = A.PointerEventConverter__toLogicalPixels(datum.radiusMajor, devicePixelRatio);
      radiusMin = A.PointerEventConverter__toLogicalPixels(datum.radiusMin, devicePixelRatio);
      radiusMax = A.PointerEventConverter__toLogicalPixels(datum.radiusMax, devicePixelRatio);
      timeStamp = datum.timeStamp;
      kind = datum.kind;
      t2 = datum.signalKind;
      switch (t2 == null ? E.PointerSignalKind_0 : t2) {
        case E.PointerSignalKind_0:
          switch (datum.change) {
            case E.PointerChange_1:
              return A.PointerAddedEvent$(datum.device, datum.distance, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, position, datum.pressureMax, datum.pressureMin, radiusMax, radiusMin, datum.tilt, timeStamp, t1);
            case E.PointerChange_3:
              return A.PointerHoverEvent$(datum.buttons, delta, datum.device, datum.distance, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, position, datum.pressureMax, datum.pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, datum.size, datum.synthesized, datum.tilt, timeStamp, t1);
            case E.PointerChange_4:
              return A.PointerDownEvent$(A._synthesiseDownButtons(datum.buttons, kind), datum.device, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, datum.pointerIdentifier, position, datum.pressure, datum.pressureMax, datum.pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, datum.size, datum.tilt, timeStamp, t1);
            case E.PointerChange_5:
              return A.PointerMoveEvent$(A._synthesiseDownButtons(datum.buttons, kind), delta, datum.device, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, datum.platformData, datum.pointerIdentifier, position, datum.pressure, datum.pressureMax, datum.pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, datum.size, datum.synthesized, datum.tilt, timeStamp, t1);
            case E.PointerChange_6:
              return A.PointerUpEvent$(datum.buttons, datum.device, datum.distance, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, datum.pointerIdentifier, position, datum.pressure, datum.pressureMax, datum.pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, datum.size, datum.tilt, timeStamp, t1);
            case E.PointerChange_0:
              return A.PointerCancelEvent$(datum.buttons, datum.device, datum.distance, datum.distanceMax, 0, kind, datum.obscured, datum.orientation, datum.pointerIdentifier, position, datum.pressureMax, datum.pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, datum.size, datum.tilt, timeStamp, t1);
            case E.PointerChange_2:
              return A.PointerRemovedEvent$(datum.device, datum.distanceMax, 0, kind, datum.obscured, position, datum.pressureMax, datum.pressureMin, radiusMax, radiusMin, timeStamp, t1);
            case E.PointerChange_7:
              return A.PointerPanZoomStartEvent$(datum.device, 0, datum.pointerIdentifier, position, datum.synthesized, timeStamp, t1);
            case E.PointerChange_8:
              return A.PointerPanZoomUpdateEvent$(datum.device, 0, D.Offset$(0, 0).$div(0, devicePixelRatio), D.Offset$(0, 0).$div(0, devicePixelRatio), datum.pointerIdentifier, position, 0, datum.scale, datum.synthesized, timeStamp, t1);
            case E.PointerChange_9:
              return A.PointerPanZoomEndEvent$(datum.device, 0, datum.pointerIdentifier, position, datum.synthesized, timeStamp, t1);
          }
          break;
        case E.PointerSignalKind_1:
          t2 = datum.scrollDeltaX;
          if (!C.boolConversionCheck(J.get$isFinite$n(t2)) || !C.boolConversionCheck(J.get$isFinite$n(datum.scrollDeltaY)) || devicePixelRatio <= 0)
            return null;
          return A.PointerScrollEvent$(datum.device, 0, kind, datum.get$respond(), position, D.Offset$(t2, datum.scrollDeltaY).$div(0, devicePixelRatio), timeStamp, t1);
        case E.PointerSignalKind_2:
          return A.PointerScrollInertiaCancelEvent$(datum.device, 0, kind, position, timeStamp, t1);
        case E.PointerSignalKind_3:
          return A.PointerScaleEvent$(datum.device, 0, kind, position, datum.scale, timeStamp, t1);
        case E.PointerSignalKind_4:
          throw C.wrapException(C.StateError$("Unreachable"));
      }
    },
    $signature: typesOffset + 29
  };
  A.PointerRouter_addRoute_closure.prototype = {
    call$0() {
      return C.LinkedHashMap_LinkedHashMap$_empty(type$.void_Function_PointerEvent, type$.nullable_Matrix4);
    },
    $signature: typesOffset + 21
  };
  A.PointerRouter__dispatchEventToRoutes_closure.prototype = {
    call$2(route, transform) {
      type$.void_Function_PointerEvent._as(route);
      type$.nullable_Matrix4._as(transform);
      if (C.boolConversionCheck(this.referenceRoutes.containsKey$1(route)))
        this.$this._dispatch$3(this.event, route, transform);
    },
    $signature: typesOffset + 22
  };
  A.RendererBinding_initMouseTracker_closure.prototype = {
    call$2(position, viewId) {
      var result;
      type$.Offset._as(position);
      C._asInt(viewId);
      result = A.HitTestResult$();
      this.$this.hitTestInView$3(result, position, viewId);
      return result;
    },
    $signature: typesOffset + 24
  };
  A.RendererBinding__scheduleMouseTrackerUpdate_closure.prototype = {
    call$1(duration) {
      type$.Duration._as(duration);
      this.$this.RendererBinding__mouseTracker.updateAllDevices$0();
    },
    $signature: 3
  };
  A.MouseTracker__handleDeviceUpdate_closure.prototype = {
    call$1(annotation) {
      return type$.MouseTrackerAnnotation._as(annotation).get$cursor();
    },
    $signature: typesOffset + 25
  };
  A.MouseTracker_updateWithEvent_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      t1._deviceUpdatePhase$1(new A.MouseTracker_updateWithEvent__closure(_this._box_0, t1, _this.existingState, _this.event, _this.device));
    },
    $signature: 0
  };
  A.MouseTracker_updateWithEvent__closure.prototype = {
    call$0() {
      var t2, t3, targetState, lastEvent, nextAnnotations, _this = this,
        t1 = _this.existingState;
      if (t1 == null) {
        t2 = _this.event;
        if (type$.PointerRemovedEvent._is(t2))
          return;
        J.$indexSet$ax(_this.$this._mouseStates, _this.device, A._MouseState$(t2));
      } else {
        t2 = _this.event;
        if (type$.PointerRemovedEvent._is(t2))
          J.remove$1$ax(_this.$this._mouseStates, t2.get$device());
      }
      t3 = _this.$this;
      targetState = J.$index$asx(t3._mouseStates, _this.device);
      if (targetState == null) {
        t1.toString;
        targetState = t1;
      }
      lastEvent = targetState.replaceLatestEvent$1(t2);
      nextAnnotations = type$.PointerRemovedEvent._is(t2) ? C.LinkedHashMap_LinkedHashMap(type$.MouseTrackerAnnotation, type$.Matrix4) : t3._hitTestInViewResultToAnnotations$1(_this._box_0.result);
      t3._handleDeviceUpdate$1(A._MouseTrackerUpdateDetails$byPointerEvent(targetState.replaceAnnotations$1(nextAnnotations), nextAnnotations, lastEvent, t2));
    },
    $signature: 0
  };
  A.MouseTracker_updateAllDevices_closure.prototype = {
    call$0() {
      var t1, t2, t3, lastEvent, nextAnnotations;
      for (t1 = this.$this, t2 = J.get$iterator$ax(t1._mouseStates.get$values()); C.boolConversionCheck(t2.moveNext$0());) {
        t3 = t2.get$current();
        lastEvent = t3.get$latestEvent();
        nextAnnotations = t1._findAnnotations$1(t3);
        t1._handleDeviceUpdate$1(A._MouseTrackerUpdateDetails$byNewFrame(t3.replaceAnnotations$1(nextAnnotations), nextAnnotations, lastEvent));
      }
    },
    $signature: 0
  };
  A.MouseTracker__handleDeviceUpdateMouseEvents_closure.prototype = {
    call$2(annotation, transform) {
      var t1;
      type$.MouseTrackerAnnotation._as(annotation);
      type$.Matrix4._as(transform);
      if (C.boolConversionCheck(annotation.get$validForMouseTracker()) && !C.boolConversionCheck(this.nextAnnotations.containsKey$1(annotation))) {
        t1 = annotation.get$onExit();
        if (t1 != null)
          t1.call$1(this.baseExitEvent.transformed$1(J.$index$asx(this.lastAnnotations, annotation)));
      }
    },
    $signature: typesOffset + 26
  };
  A.MouseTracker__handleDeviceUpdateMouseEvents_closure0.prototype = {
    call$1(annotation) {
      return !C.boolConversionCheck(this.lastAnnotations.containsKey$1(type$.MouseTrackerAnnotation._as(annotation)));
    },
    $signature: typesOffset + 27
  };
  A.PipelineOwner_flushLayout_closure.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.RenderObject;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 3
  };
  A.PipelineOwner_flushCompositingBits_closure.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.RenderObject;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 3
  };
  A.PipelineOwner_flushPaint_closure.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.RenderObject;
      t1._as(a);
      t1 = t1._as(b).get$depth();
      t2 = a.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 3
  };
  A.PipelineOwner_flushSemantics_closure.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.RenderObject;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 3
  };
  A.SchedulerBinding_handleEventLoopCallback_closure.prototype = {
    call$0() {
      return C._setArrayType([D.DiagnosticsStackTrace$(string$._This_, this.callbackStack, null)], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A.SchedulerBinding_endOfFrame_closure.prototype = {
    call$1(timeStamp) {
      var t1;
      type$.Duration._as(timeStamp);
      t1 = this.$this;
      t1.SchedulerBinding__nextFrameCompleter.complete$0();
      t1.SchedulerBinding__nextFrameCompleter = null;
    },
    $signature: 3
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure.prototype = {
    call$0() {
      this.$this.handleBeginFrame$1(null);
    },
    $signature: 0
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.handleDrawFrame$0();
      t1.resetEpoch$0();
      t1.SchedulerBinding__warmUpFrame = false;
      if (C.boolConversionCheck(this.hadScheduledFrame))
        t1.scheduleFrame$0();
    },
    $signature: 0
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return C._asyncAwait($async$self.$this.get$endOfFrame(), $async$call$0);
            case 2:
              // returning from await.
              $async$self._box_0.debugTimelineTask.finish$0();
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 8
  };
  A.SchedulerBinding__handleDrawFrame_closure.prototype = {
    call$1(timeStamp) {
      var t1;
      type$.Duration._as(timeStamp);
      t1 = this.$this;
      t1.SchedulerBinding__hasScheduledFrame = false;
      t1.scheduleFrame$0();
    },
    $signature: 3
  };
  A.SchedulerBinding_handleBeginFrame_closure.prototype = {
    call$2(id, callbackEntry) {
      var t1, t2;
      C._asInt(id);
      type$._FrameCallbackEntry._as(callbackEntry);
      t1 = this.$this;
      if (!C.boolConversionCheck(J.contains$1$asx(t1.SchedulerBinding__removedIds, id))) {
        t2 = t1.SchedulerBinding__currentFrameTimeStamp;
        t2.toString;
        t1._invokeFrameCallback$3(callbackEntry.callback, t2, null);
      }
    },
    $signature: typesOffset + 31
  };
  A.SchedulerBinding__invokeFrameCallback_closure.prototype = {
    call$0() {
      return C._setArrayType([D.DiagnosticsStackTrace$(string$._This_, this.callbackStack, null)], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure.prototype = {
    call$1(node) {
      type$.SemanticsNode._as(node);
      return !C.boolConversionCheck(J.contains$1$asx(this.$this._detachedNodes, node));
    },
    $signature: typesOffset + 8
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure0.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.SemanticsNode;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 17
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure1.prototype = {
    call$2(a, b) {
      var t2,
        t1 = type$.SemanticsNode;
      t1._as(a);
      t1._as(b);
      t1 = a.get$depth();
      t2 = b.get$depth();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return C.iae(t2);
      return t1 - t2;
    },
    $signature: typesOffset + 17
  };
  A.SemanticsOwner__getSemanticsActionHandlerForId_closure.prototype = {
    call$1(node) {
      type$.SemanticsNode._as(node);
      if (C.boolConversionCheck(node._canPerformAction$1(this.action))) {
        this._box_0.result = node;
        return false;
      }
      return true;
    },
    $signature: typesOffset + 8
  };
  A.SemanticsOwner__getSemanticsActionHandlerForPosition_closure.prototype = {
    call$1(child) {
      type$.SemanticsNode._as(child);
      if (C.boolConversionCheck(child._canPerformAction$1(this.action))) {
        this._box_0.result = child;
        return false;
      }
      return true;
    },
    $signature: typesOffset + 8
  };
  A.ServicesBinding__initKeyboard_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      t1.get$platformDispatcher().set$onKeyData(t1.get$_keyEventManager().get$handleKeyData());
      B.BasicMessageChannel_EjH.setMessageHandler$1(t1.get$_keyEventManager().get$handleRawKeyMessage());
    },
    $signature: 5
  };
  A.ServicesBinding__addLicenses_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, rawLicenses, $async$temp1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              rawLicenses = C._Cell$named("rawLicenses");
              $async$temp1 = rawLicenses;
              $async$goto = 2;
              return C._asyncAwait($.$get$rootBundle().loadString$2$cache("NOTICES", false), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.set$finalLocalValue($async$result);
              t1 = type$.String;
              t2 = $async$self.controller;
              t3 = type$.StreamController_LicenseEntry;
              $async$temp1 = J;
              $async$goto = 3;
              return C._asyncAwait(D.compute(A.binding4_ServicesBinding__parseLicenses$closure(), rawLicenses.readLocal$1$0(t1), "parseLicenses", t1, type$.List_LicenseEntry), $async$call$0);
            case 3:
              // returning from await.
              $async$temp1.forEach$1$ax($async$result, type$.void_Function_LicenseEntry._as(J.get$add$ax(t2.readLocal$1$0(t3))));
              $async$goto = 4;
              return C._asyncAwait(t2.readLocal$1$0(t3).close$0(), $async$call$0);
            case 4:
              // returning from await.
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 8
  };
  A._DefaultBinaryMessenger_send_closure.prototype = {
    call$1(reply) {
      var exception, stack, exception0;
      type$.nullable_ByteData._as(reply);
      try {
        this.completer.complete$1(reply);
      } catch (exception0) {
        exception = C.unwrapException(exception0);
        stack = C.getTraceFromException(exception0);
        D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("during a platform message response callback"), exception, null, "services library", false, stack));
      }
    },
    $signature: 7
  };
  A._DefaultBinaryMessenger_setMessageHandler_closure.prototype = {
    call$2(data, callback) {
      return this.$call$body$_DefaultBinaryMessenger_setMessageHandler_closure(type$.nullable_ByteData._as(data), type$.void_Function_nullable_ByteData._as(callback));
    },
    $call$body$_DefaultBinaryMessenger_setMessageHandler_closure(data, callback) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, exception, stack, exception0, response, $async$exception0;
      var $async$call$2 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              response = null;
              $async$handler = 3;
              $async$goto = 6;
              return C._asyncAwait(D._wrapAwaitedExpression($async$self.handler.call$1(data), type$.nullable_ByteData), $async$call$2);
            case 6:
              // returning from await.
              response = $async$result;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception0 = $async$currentError;
              exception = C.unwrapException($async$exception0);
              stack = C.getTraceFromException($async$exception0);
              D.FlutterError_reportError(D.FlutterErrorDetails$(D.ErrorDescription$("during a platform message callback"), exception, null, "services library", false, stack));
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              callback.call$1(response);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return C._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return C._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 79
  };
  A.RawKeyEvent_RawKeyEvent$fromMessage_dataFromWeb.prototype = {
    call$0() {
      var t4, t5, t6,
        t1 = this.message,
        t2 = J.getInterceptor$asx(t1),
        key = C._asStringQ(t2.$index(t1, "key")),
        t3 = key == null;
      if (!t3 && C.boolConversionCheck(F.JSString_methods.get$isNotEmpty(key)) && key.length === 1)
        this._box_0.character = key;
      t4 = C._asStringQ(t2.$index(t1, "code"));
      if (t4 == null)
        t4 = "";
      t3 = t3 ? "" : key;
      t5 = C._asIntQ(t2.$index(t1, "location"));
      if (t5 == null)
        t5 = 0;
      t6 = C._asIntQ(t2.$index(t1, "metaState"));
      if (t6 == null)
        t6 = 0;
      t1 = C._asIntQ(t2.$index(t1, "keyCode"));
      return A.RawKeyEventDataWeb$(t4, t3, t1 == null ? 0 : t1, t5, t6);
    },
    $signature: typesOffset + 40
  };
  A.RestorationManager_handleRestorationUpdateFromEngine_closure.prototype = {
    call$1(_) {
      type$.Duration._as(_);
      this.$this._isReplacing = false;
    },
    $signature: 3
  };
  A.RestorationManager_scheduleSerializationFor_closure.prototype = {
    call$1(_) {
      type$.Duration._as(_);
      return this.$this._doSerialization$0();
    },
    $signature: 3
  };
  A.RestorationBucket__rawChildren_closure.prototype = {
    call$0() {
      var t1 = type$.nullable_Object;
      return C.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    $signature: 56
  };
  A.RestorationBucket__rawValues_closure.prototype = {
    call$0() {
      var t1 = type$.nullable_Object;
      return C.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    $signature: 56
  };
  A.RestorationBucket__addChildData_closure.prototype = {
    call$0() {
      return C._setArrayType([], type$.JSArray_RestorationBucket);
    },
    $signature: typesOffset + 43
  };
  A.RestorationBucket__visitChildren_closure.prototype = {
    call$1(buckets) {
      return type$.List_RestorationBucket._as(buckets);
    },
    $signature: typesOffset + 44
  };
  A.SystemChrome_setSystemUIOverlayStyle_closure.prototype = {
    call$0() {
      if (!C.boolConversionCheck(J.$eq$($.SystemChrome__pendingStyle, $.SystemChrome__latestStyle))) {
        E.OptionalMethodChannel_ENd.invokeMethod$1$2("SystemChrome.setSystemUIOverlayStyle", $.SystemChrome__pendingStyle._toMap$0(), type$.void);
        $.SystemChrome__latestStyle = $.SystemChrome__pendingStyle;
      }
      $.SystemChrome__pendingStyle = null;
    },
    $signature: 0
  };
  A.TextInput__loudlyHandleTextInputInvocation_closure.prototype = {
    call$0() {
      var _null = null;
      return C._setArrayType([D.DiagnosticsProperty$("call", this.$call, true, E.C__NoDefaultValue, _null, _null, _null, E.DiagnosticLevel_3, false, true, true, E.DiagnosticsTreeStyle_9, _null, type$.MethodCall)], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A.TextInput__handleTextInputInvocation_closure.prototype = {
    call$1(value) {
      return F.JSNumber_methods.toDouble$0(C._asNum(value));
    },
    $signature: 81
  };
  A.TextInput__handleTextInputInvocation_closure0.prototype = {
    call$1(elementIdentifier) {
      var t1, t2, rect, t3, bounds;
      C._asString(elementIdentifier);
      t1 = this.args;
      t2 = J.getInterceptor$asx(t1);
      rect = D.Rect$fromLTWH(t2.$index(t1, 0), t2.$index(t1, 1), t2.$index(t1, 2), t2.$index(t1, 3));
      t1 = this.$this._scribbleClients;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, elementIdentifier);
      t3 = t3 == null ? null : t3.isInScribbleRect$1(rect);
      if (!C.boolConversionCheck(t3 == null ? false : t3))
        return false;
      t1 = t2.$index(t1, elementIdentifier);
      bounds = t1 == null ? null : t1.get$bounds();
      if (bounds == null)
        bounds = E.Rect_0_0_0_0;
      return !(C.boolConversionCheck(bounds.$eq(0, E.Rect_0_0_0_0)) || C.boolConversionCheck(bounds.get$hasNaN()) || C.boolConversionCheck(bounds.get$isInfinite(0)));
    },
    $signature: 13
  };
  A.TextInput__handleTextInputInvocation_closure1.prototype = {
    call$1(elementIdentifier) {
      var bounds, t1;
      C._asString(elementIdentifier);
      bounds = J.$index$asx(this.$this._scribbleClients, elementIdentifier).get$bounds();
      t1 = [elementIdentifier];
      F.JSArray_methods.addAll$1(t1, [bounds.left, bounds.top, bounds.get$width(), bounds.get$height()]);
      return t1;
    },
    $signature: 82
  };
  A.Actions_maybeInvoke_closure.prototype = {
    call$1(element) {
      var t1, result, t2, _this = this;
      type$.InheritedElement._as(element);
      t1 = _this.intent;
      result = D.Actions__castAction(type$._ActionsScope._as(element.get$widget()), t1, _this.T);
      t2 = result != null;
      if (t2 && C.boolConversionCheck(result._isEnabled$2(t1, _this.context)))
        _this._box_0.returnValue = D.Actions__findDispatcher(element).invokeAction$3(result, t1, _this.context);
      return t2;
    },
    $signature: typesOffset + 45
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3(type$.Map_String_String._as(parameters));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["data", A._debugCollectRenderTrees()], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 20
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(type$.Map_String_String._as(parameters));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["data", A._debugCollectSemanticsTrees(E.DebugSemanticsDumpOrder_1)], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 20
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(type$.Map_String_String._as(parameters));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["data", A._debugCollectSemanticsTrees(E.DebugSemanticsDumpOrder_0)], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 20
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfilePaintsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(C._asBool(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!C.boolConversionCheck(J.$eq$($.debugProfilePaintsEnabled, value)))
                $.debugProfilePaintsEnabled = value;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 19
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfileLayoutsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(C._asBool(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!C.boolConversionCheck(J.$eq$($.debugProfileLayoutsEnabled, value)))
                $.debugProfileLayoutsEnabled = value;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 19
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure.prototype = {
    call$1(timings) {
      J.forEach$1$ax(type$.List_FrameTiming._as(timings), this.$this.get$_profileFramePostEvent());
    },
    $signature: typesOffset + 6
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.double),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.timeDilation();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 85
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(C._asDouble(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.timeDilation0(value);
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 86
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure.prototype = {
    call$1(message) {
      var t1 = message == null ? type$.Object._as(message) : message;
      return this.$this.handleSystemMessage$1(t1);
    },
    $signature: 26
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure0.prototype = {
    call$1(message) {
      var t1 = message == null ? type$.Object._as(message) : message;
      return this.$this._handleAccessibilityMessage$1(t1);
    },
    $signature: 26
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfilePlatformChannels;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure0.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure(C._asBool(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.debugProfilePlatformChannels = value;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 19
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4(type$.Map_String_String._as(parameters));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["data", A._debugDumpAppString()], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 20
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(type$.Map_String_String._as(parameters));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(parameters) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue, $async$self = this;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["data", $async$self.$this.get$focusManager().toStringDeep$0()], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 20
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1.prototype = {
    call$1(_) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(type$.Map_String_String._as(_));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(_) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["enabled", C.boolConversionCheck($async$self.$this.WidgetsBinding__needToReportFirstFrame) ? "false" : "true"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2.prototype = {
    call$1(_) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(type$.Map_String_String._as(_));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(_) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this;
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.LinkedHashMap_LinkedHashMap$_literal(["enabled", C.boolConversionCheck($async$self.$this.get$firstFrameRasterized()) ? "true" : "false"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfileBuildsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(C._asBool(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.debugProfileBuildsEnabled = value;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 19
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfileBuildsEnabledUserWidgets;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 11
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure6.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(C._asBool(value));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.debugProfileBuildsEnabledUserWidgets = value;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 19
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure.prototype = {
    call$1(timings) {
      var t1, t2, t3;
      type$.List_FrameTiming._as(timings);
      A.UserTag_defaultTag().makeCurrent$0();
      A.Timeline_instantSync("Rasterized first useful frame", null);
      D.postEvent("Flutter.FirstFrame", C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
      t1 = D.SchedulerBinding_instance();
      t2 = this._box_0;
      t3 = t2.firstFrameCallback;
      t3.toString;
      t1.removeTimingsCallback$1(t3);
      t2.firstFrameCallback = null;
      this.$this.WidgetsBinding__firstFrameCompleter.complete$0();
    },
    $signature: typesOffset + 6
  };
  A.WidgetsBinding_scheduleAttachRootWidget_closure.prototype = {
    call$0() {
      this.$this.attachRootWidget$1(this.rootWidget);
    },
    $signature: 0
  };
  A.RootWidget_attach_closure.prototype = {
    call$0() {
      var element = this.$this.createElement$0();
      this._box_0.element = element;
      element.assignOwner$1(this.owner);
    },
    $signature: 0
  };
  A.RootWidget_attach_closure0.prototype = {
    call$0() {
      this._box_0.element.mount$2(null, null);
    },
    $signature: 0
  };
  A._InactiveElements__unmount_closure.prototype = {
    call$1(child) {
      this.$this._unmount$1(type$.Element._as(child));
    },
    $signature: typesOffset + 4
  };
  A.BuildScope__tryRebuild_closure.prototype = {
    call$0() {
      var t1 = C._setArrayType([], type$.JSArray_DiagnosticsNode),
        t2 = this.element;
      J.add$1$ax(t1, D.DiagnosticsDebugCreator$(D.DebugCreator$(t2)));
      J.add$1$ax(t1, t2.describeElement$1("The element being rebuilt at the time was"));
      return t1;
    },
    $signature: typesOffset + 2
  };
  A._MediaQueryFromViewState__updateData_closure.prototype = {
    call$0() {
      this.$this.set$_media_query$_data(this.newData);
    },
    $signature: 0
  };
  A.RawView_build_closure.prototype = {
    call$2(context, owner) {
      var t1, t2;
      type$.BuildContext._as(context);
      type$.PipelineOwner._as(owner);
      t1 = this.$this;
      t2 = t1.view;
      return A._ViewScope$(A._PipelineOwnerScope$(t1.child, owner), t2);
    },
    $signature: typesOffset + 50
  };
  A._RawViewElement__updateChild_closure.prototype = {
    call$0() {
      return C._setArrayType([D.DiagnosticsDebugCreator$(D.DebugCreator$(this.$this))], type$.JSArray_DiagnosticsNode);
    },
    $signature: typesOffset + 2
  };
  A._FlutterEmbedViewState_initState_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t3, t4, t1, t2, $async$temp1;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.findChildDomElement$1(type$.Element_2._as(t1.get$context()));
              t2.toString;
              t3 = type$.JSObject;
              t4 = C.getProperty(t2, "children", t3);
              t3 = C.getProperty(C.getProperty(t2, "children", t3), "length", type$.int);
              if (typeof t3 !== "number") {
                $async$returnValue = t3.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = C._callMethodUnchecked1(t4, "item", t3 - 1, type$.nullable_JSObject);
              t3.toString;
              $async$temp1 = t1;
              $async$goto = 3;
              return C._asyncAwait(A.addView(t3, t1.get$component().constraints, A.StatefulBuilder$(new A._FlutterEmbedViewState_initState__closure(t1))), $async$call$0);
            case 3:
              // returning from await.
              $async$temp1.set$viewId($async$result);
            case 1:
              // return
              return C._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 8
  };
  A._FlutterEmbedViewState_initState__closure.prototype = {
    call$2(context, setState) {
      var t1 = this.$this;
      t1.set$rebuildFlutterApp(new A._FlutterEmbedViewState_initState___closure(type$.BuildContext._as(context), type$.void_Function_void_Function._as(setState)));
      t1.waitOnWarmupFrames$0();
      t1 = t1.get$component().widget;
      return t1 == null ? A.SizedBox$shrink() : t1;
    },
    $signature: typesOffset + 52
  };
  A._FlutterEmbedViewState_initState___closure.prototype = {
    call$0() {
      if (!C.boolConversionCheck(this.context.get$mounted()))
        return;
      this.setState.call$1(new A._FlutterEmbedViewState_initState____closure());
    },
    $signature: 0
  };
  A._FlutterEmbedViewState_initState____closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._FlutterEmbedViewState_waitOnWarmupFrames_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._FlutterEmbedViewState_waitOnWarmupFrames_closure0.prototype = {
    call$1(_) {
      var t1, t2;
      type$.Duration._as(_);
      t1 = this.$this;
      t2 = t1._frame;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.set$_frame(t2 + 1);
      t1.waitOnWarmupFrames$0();
    },
    $signature: 3
  };
  A._FlutterEmbedViewState_findChildDomElement_closure.prototype = {
    call$1(child) {
      var t1, node;
      type$.Element_2._as(child);
      t1 = this._box_0;
      if (t1.node != null)
        return;
      if (type$.RenderObjectElement._is(child)) {
        node = type$.DomRenderObject._as(child.get$renderObject()).node;
        t1.node = node == null ? type$.JSObject._as(node) : node;
        return;
      } else
        t1.node = this.$this.findChildDomElement$1(child);
    },
    $signature: 18
  };
  A._MultiViewAppState__updateViews_closure.prototype = {
    call$0() {
      this.$this.set$_views(this.newViews);
    },
    $signature: 0
  };
  A._flutterApp_closure.prototype = {
    call$0() {
      var completer = C.Completer_Completer(type$.JSObject),
        t1 = type$.nullable_JSObject,
        t2 = C.getProperty(C.staticInteropGlobalContext(), "_flutter", t1);
      t2.toString;
      t1 = C.getProperty(t2, "loader", t1);
      t1.toString;
      C._setPropertyUnchecked(t1, "didCreateEngineInitializer", C._functionToJS1(new A._flutterApp__closure(completer)), type$.JavaScriptFunction);
      A.bootstrapEngine(new A._flutterApp__closure0());
      return completer.get$future();
    },
    $signature: 89
  };
  A._flutterApp__closure.prototype = {
    call$1(engineInitializer) {
      var t1 = type$.Null;
      return A.FutureOfJSAnyToJSPromise_get_toJS(D.Future_Future(new A._flutterApp___closure0(type$.JSObject._as(engineInitializer), this.completer), t1), t1);
    },
    $signature: 90
  };
  A._flutterApp___closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$temp1 = $async$self.completer;
              $async$temp2 = D;
              $async$temp3 = C;
              $async$goto = 3;
              return C._asyncAwait(D.JSPromiseToFuture_get_toDart(C._callMethodUnchecked1($async$self.engineInitializer, "initializeEngine", {multiViewEnabled: true, renderer: "canvaskit"}, t1), t1), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 2;
              return C._asyncAwait($async$temp2.JSPromiseToFuture_get_toDart($async$temp3._callMethodUnchecked0($async$result, "runApp", t1), t1), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.complete$1($async$result);
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 27
  };
  A._flutterApp__closure0.prototype = {
    call$0() {
      A.runWidget(A.MultiViewApp$(new A._flutterApp___closure()));
    },
    $signature: 0
  };
  A._flutterApp___closure.prototype = {
    call$1(viewId) {
      C._asInt(viewId);
      return J.$index$asx($._viewWidgets, viewId);
    },
    $signature: 91
  };
  (function aliases() {
    var _ = A.BindingBase.prototype;
    _.super$BindingBase$initInstances = _.initInstances$0;
    _.super$BindingBase$initServiceExtensions = _.initServiceExtensions$0;
    _.super$BindingBase$unlocked = _.unlocked$0;
    _ = A.GestureBinding.prototype;
    _.super$GestureBinding$hitTestInView = _.hitTestInView$3;
    _.super$GestureBinding$dispatchEvent = _.dispatchEvent$2;
    _ = A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription.prototype;
    _.super$_PointerScrollEvent_PointerSignalEvent__PointerEventDescription$debugFillProperties = _.debugFillProperties$1;
    _ = A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription.prototype;
    _.super$__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription$debugFillProperties = _.debugFillProperties$1;
    _ = A.RendererBinding.prototype;
    _.super$RendererBinding$handleMetricsChanged = _.handleMetricsChanged$0;
    _.super$RendererBinding$handleTextScaleFactorChanged = _.handleTextScaleFactorChanged$0;
    _.super$RendererBinding$handlePlatformBrightnessChanged = _.handlePlatformBrightnessChanged$0;
    _.super$RendererBinding$drawFrame = _.drawFrame$0;
    _ = A.SchedulerBinding.prototype;
    _.super$SchedulerBinding$handleAppLifecycleStateChanged = _.handleAppLifecycleStateChanged$1;
    _ = A.SemanticsBinding.prototype;
    _.super$SemanticsBinding$handleAccessibilityFeaturesChanged = _.handleAccessibilityFeaturesChanged$0;
    _ = A.ServicesBinding.prototype;
    _.super$ServicesBinding$handleMemoryPressure = _.handleMemoryPressure$0;
    _.super$ServicesBinding$handleSystemMessage = _.handleSystemMessage$1;
    _.super$ServicesBinding$handleViewFocusChanged = _.handleViewFocusChanged$1;
    _ = A._RootElement_Element_RootElementMixin.prototype;
    _.super$_RootElement_Element_RootElementMixin$mount = _.mount$2;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked = _.unlocked$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$handleMemoryPressure = _.handleMemoryPressure$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding$initInstances = _.initInstances$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions = _.initServiceExtensions$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _static_2 = hunkHelpers._static_2,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(A, "_engine___noopCallback$closure", "_noopCallback", 54);
    _instance_1_u(A.KeyboardBinding.prototype, "get$_onKeyData", "_onKeyData$1", 9);
    _instance_1_u(A.MultiEntriesBrowserHistory.prototype, "get$onPopState", "onPopState$1", 5);
    _instance_1_u(A.SingleEntryBrowserHistory.prototype, "get$onPopState", "onPopState$1", 5);
    _instance_0_u(A.EngineFlutterWindow.prototype, "get$dispose", "dispose$0", 0);
    _instance_1_i(A._StreamController.prototype, "get$add", "add$1", 5);
    var _;
    _instance_1_u(_ = A.GestureBinding.prototype, "get$_handlePointerDataPacket", "_handlePointerDataPacket$1", 37);
    _instance_1_u(_, "get$_devicePixelRatioForView", "_devicePixelRatioForView$1", 34);
    _instance_1_u(_, "get$cancelPointer", "cancelPointer$1", 33);
    _instance_0_u(_, "get$_flushPointerEventQueue", "_flushPointerEventQueue$0", 0);
    _instance_1_u(_, "get$_handlePointerEventImmediately", "_handlePointerEventImmediately$1", 18);
    _instance_0_u(_, "get$_handleSampleTimeChanged", "_handleSampleTimeChanged$0", 0);
    _instance(A.PointerScrollEvent.prototype, "get$respond", 0, 0, null, ["call$1$allowPlatformDefault"], ["respond$1$allowPlatformDefault"], 19, 0, 0);
    _instance(A._TransformedPointerScrollEvent.prototype, "get$respond", 0, 0, null, ["call$1$allowPlatformDefault"], ["respond$1$allowPlatformDefault"], 19, 0, 0);
    _static_1(A, "binding1__DefaultRootPipelineOwner__onSemanticsUpdate$closure", "_DefaultRootPipelineOwner__onSemanticsUpdate", 14);
    _instance_1_u(_ = A.RendererBinding.prototype, "get$_handleWebFirstFrame", "_handleWebFirstFrame$1", 10);
    _instance_1_u(_, "get$_handlePersistentFrameCallback", "_handlePersistentFrameCallback$1", 10);
    _instance_0_u(A.PipelineOwner.prototype, "get$_updateSemanticsOwner", "_updateSemanticsOwner$0", 0);
    _static_2(A, "binding3_SchedulerBinding__taskSorter$closure", "SchedulerBinding__taskSorter", 55);
    _static(A, "binding3__defaultSchedulingStrategy$closure", 0, null, ["call$2$priority$scheduler"], ["defaultSchedulingStrategy"], 56, 0);
    _instance_1_u(_ = A.SchedulerBinding.prototype, "get$_executeTimingsCallbacks", "_executeTimingsCallbacks$1", 6);
    _instance_0_u(_, "get$_runTasks", "_runTasks$0", 0);
    _instance_1_u(_, "get$_handleBeginFrame", "_handleBeginFrame$1", 10);
    _instance_0_u(_, "get$_handleDrawFrame", "_handleDrawFrame$0", 0);
    _instance_0_u(_, "get$_disposePerformanceModeRequest", "_disposePerformanceModeRequest$0", 0);
    _instance_1_u(_, "get$_profileFramePostEvent", "_profileFramePostEvent$1", 30);
    _instance_0_u(_ = A.SemanticsBinding.prototype, "get$_didDisposeSemanticsHandle", "_didDisposeSemanticsHandle$0", 0);
    _instance_0_u(_, "get$_handleSemanticsEnabledChanged", "_handleSemanticsEnabledChanged$0", 0);
    _instance_1_u(_, "get$_handleSemanticsActionEvent", "_handleSemanticsActionEvent$1", 32);
    _static_1(A, "binding4_ServicesBinding__parseLicenses$closure", "ServicesBinding__parseLicenses", 57);
    _instance_0_u(_ = A.ServicesBinding.prototype, "get$_addLicenses", "_addLicenses$0", 35);
    _instance_1_u(_, "get$_handleLifecycleMessage", "_handleLifecycleMessage$1", 36);
    _instance_1_u(_, "get$_handlePlatformMessage", "_handlePlatformMessage$1", 7);
    _instance_1_u(_ = A.KeyEventManager.prototype, "get$handleKeyData", "handleKeyData$1", 9);
    _instance_1_u(_, "get$handleRawKeyMessage", "handleRawKeyMessage$1", 38);
    _instance_1_u(_, "get$_convertRawEventAndStore", "_convertRawEventAndStore$1", 49);
    _instance_1_u(A.RestorationManager.prototype, "get$_methodHandler", "_methodHandler$1", 16);
    _instance_1_u(_ = A.RestorationBucket.prototype, "get$_restoration$_dropChild", "_restoration$_dropChild$1", 15);
    _instance_1_u(_, "get$_recursivelyUpdateManager", "_recursivelyUpdateManager$1", 15);
    _instance_1_u(A.TextInput.prototype, "get$_loudlyHandleTextInputInvocation", "_loudlyHandleTextInputInvocation$1", 7);
    _instance_0_u(_ = A.WidgetsBinding.prototype, "get$handleLocaleChanged", "handleLocaleChanged$0", 0);
    _instance_1_u(_, "get$_handleNavigationInvocation", "_handleNavigationInvocation$1", 46);
    _instance_1_u(_, "get$_handleBackGestureInvocation", "_handleBackGestureInvocation$1", 7);
    _instance_0_u(_, "get$_handleBuildScheduled", "_handleBuildScheduled$0", 0);
    _instance_0_u(_ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype, "get$handleMetricsChanged", "handleMetricsChanged$0", 0);
    _instance_0_u(_, "get$handleTextScaleFactorChanged", "handleTextScaleFactorChanged$0", 0);
    _instance_0_u(_, "get$handlePlatformBrightnessChanged", "handlePlatformBrightnessChanged$0", 0);
    _instance_0_u(_, "get$handleAccessibilityFeaturesChanged", "handleAccessibilityFeaturesChanged$0", 0);
    _instance_1_u(_, "get$handleAppLifecycleStateChanged", "handleAppLifecycleStateChanged$1", 13);
    _instance_1_u(_, "get$handleViewFocusChanged", "handleViewFocusChanged$1", 53);
    _instance_1_u(_ = A.FocusManager.prototype, "get$_appLifecycleChange", "_appLifecycleChange$1", 13);
    _instance_0_u(_, "get$applyFocusChangesIfNeeded", "applyFocusChangesIfNeeded$0", 0);
    _instance_1_u(_ = A._HighlightModeManager.prototype, "get$handlePointerEvent", "handlePointerEvent$1", 18);
    _instance_1_u(_, "get$handleKeyMessage", "handleKeyMessage$1", 48);
    _static_1(A, "framework0__InactiveElements__deactivateRecursively$closure", "_InactiveElements__deactivateRecursively", 4);
    _static_2(A, "framework0_Element__sort$closure", "Element__sort0", 58);
    _instance_1_u(_ = A._InactiveElements.prototype, "get$_unmount", "_unmount$1", 4);
    _instance_0_u(_, "get$_unmountAll", "_unmountAll$0", 0);
    _instance_1_u(A.DefaultPlatformMenuDelegate.prototype, "get$_methodCallHandler", "_methodCallHandler$1", 16);
    _instance_0_u(_ = A._RawViewElement.prototype, "get$_handleSemanticsOwnerCreated", "_handleSemanticsOwnerCreated$0", 0);
    _instance_0_u(_, "get$_handleSemanticsOwnerDisposed", "_handleSemanticsOwnerDisposed$0", 0);
    _instance_1_u(_, "get$_handleSemanticsUpdate", "_handleSemanticsUpdate$1", 14);
    _static_2(A, "utils__defaultCompare$closure", "defaultCompare", 39);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(C.Object, [A.AppBootstrap, A.FontAsset, A.FontFamily, A.FontManifest, A.ResourceManager, A.KeyboardBinding, A.FlutterHtmlKeyboardEvent, A.KeyboardConverter, A.BrowserHistory, A.RawKeyboard, A.SemanticsUpdate, A.SemanticsNodeUpdate, A.TestHistoryEntry, A.TestUrlStrategy, A._StringStream, A.LocaleKeymap, A.EmbeddedTestFont, A._StreamController, A._AsyncStreamControllerDispatch, A._SimpleCallbackSink, A._FakeUserTag, A.ServiceExtensionResponse, A.KeyData, A.SemanticsUpdateBuilder, A.AssetManager, A.BrowserPlatformLocation, A.HashUrlStrategy, A.HeapPriorityQueue, A.BindingBase, A.LicenseEntry, A.GestureArenaEntry, A._GestureArena, A.GestureArenaManager, A.SamplingClock, A._Resampler, A.GestureBinding, A._PointerEvent_Object_Diagnosticable, A._PointerEventDescription, A._AbstractPointerEvent, A._CopyPointerAddedEvent, A._CopyPointerRemovedEvent, A._CopyPointerHoverEvent, A._CopyPointerEnterEvent, A._CopyPointerExitEvent, A._CopyPointerDownEvent, A._CopyPointerMoveEvent, A._CopyPointerUpEvent, A._RespondablePointerEvent, A._CopyPointerScrollEvent, A._CopyPointerScrollInertiaCancelEvent, A._CopyPointerScaleEvent, A._CopyPointerPanZoomStartEvent, A._CopyPointerPanZoomUpdateEvent, A._CopyPointerPanZoomEndEvent, A._CopyPointerCancelEvent, A.DeviceGestureSettings, A._TransformPart, A.HitTestResult, A.PointerRouter, A.PointerSignalResolver, A.PointerEventResampler, A.PaintingBinding, A.ImageCache, A.RendererBinding, A._PipelineOwner_Object_DiagnosticableTreeMixin, A._MouseState, A.__MouseTrackerUpdateDetails_Object_Diagnosticable, A.ViewConfiguration, A._FrameCallbackEntry, A.PerformanceModeRequestHandle, A.SchedulerBinding, A.Priority, A.SemanticsBinding, A.SemanticsHandle, A.BinaryMessenger, A.ServicesBinding, A._KeyEvent_Object_Diagnosticable, A.HardwareKeyboard, A.KeyMessage, A.KeyEventManager, A.KeyboardInsertedContent, A.MouseCursorManager, A.PredictiveBackEvent, A._RawKeyEventData_Object_Diagnosticable, A._RawKeyEvent_Object_Diagnosticable, A.RawKeyboard0, A._ModifierSidePair, A.RestorationBucket, A.SystemUiOverlayStyle, A._TextEditingDelta_Object_Diagnosticable, A.TextInputType, A.RawFloatingCursorPoint, A.TextEditingValue, A.TextInput, A.TextInputControl, A.__PlatformTextInputControl_Object_TextInputControl, A.WidgetsBinding, A._FocusManager_Object_DiagnosticableTreeMixin, A._HighlightModeManager, A._InactiveElements, A.BuildScope, A.BuildOwner, A.RootElementMixin, A.MediaQueryData, A._UnspecifiedTextScaler, A.PlatformMenuDelegate, A.Key0]);
    _inheritMany(C.Closure0Args, [A.AppBootstrap_prepareEngineInitializer_closure, A.initializeEngineServices_closure0, A.initializeEngineServices_initializeRendererCallback, A.FlutterEngineInitializer__staticInteropFactoryStub_closure0, A._cached_closure, A.KeyboardConverter__scheduleAsyncEvent_closure0, A.KeyboardConverter__startGuardingKey_closure, A.KeyboardConverter__startGuardingKey_closure0, A.KeyboardConverter__handleEvent_closure, A.KeyboardConverter__handleEvent_closure0, A.KeyboardConverter__handleEvent_closure1, A.RawKeyboard$__closure, A.RawKeyboard_handleHtmlEvent_closure, A.TestUrlStrategy_go_closure, A.TestUrlStrategy_addPopStateListener_closure, A.TestUrlStrategy_addPopStateListener__closure, A.EngineFlutterWindow_handleNavigationMessage_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A.KeyData__logicalToString_closure, A.bootstrapEngine_closure0, A.BrowserPlatformLocation_getOrCreateDomEventListener_closure, A.HashUrlStrategy_addPopStateListener_closure, A.BindingBase_initServiceExtensions_closure, A.BindingBase_initServiceExtensions_closure1, A.BindingBase_lockEvents_closure, A.BindingBase_registerServiceExtension__closure, A.GestureArenaManager_add_closure, A.GestureArenaManager__tryToResolveArena_closure, A._Resampler_addOrDispatch_closure, A.GestureBinding_dispatchEvent_closure, A.GestureBinding_dispatchEvent_closure0, A.PointerRouter_addRoute_closure, A.MouseTracker_updateWithEvent_closure, A.MouseTracker_updateWithEvent__closure, A.MouseTracker_updateAllDevices_closure, A.SchedulerBinding_handleEventLoopCallback_closure, A.SchedulerBinding_scheduleWarmUpFrame_closure, A.SchedulerBinding_scheduleWarmUpFrame_closure0, A.SchedulerBinding_scheduleWarmUpFrame_closure1, A.SchedulerBinding__invokeFrameCallback_closure, A.ServicesBinding__addLicenses_closure, A.RawKeyEvent_RawKeyEvent$fromMessage_dataFromWeb, A.RestorationBucket__rawChildren_closure, A.RestorationBucket__rawValues_closure, A.RestorationBucket__addChildData_closure, A.SystemChrome_setSystemUIOverlayStyle_closure, A.TextInput__loudlyHandleTextInputInvocation_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure5, A.WidgetsBinding_scheduleAttachRootWidget_closure, A.RootWidget_attach_closure, A.RootWidget_attach_closure0, A.BuildScope__tryRebuild_closure, A._MediaQueryFromViewState__updateData_closure, A._RawViewElement__updateChild_closure, A._FlutterEmbedViewState_initState_closure, A._FlutterEmbedViewState_initState___closure, A._FlutterEmbedViewState_initState____closure, A._FlutterEmbedViewState_waitOnWarmupFrames_closure, A._MultiViewAppState__updateViews_closure, A._flutterApp_closure, A._flutterApp___closure0, A._flutterApp__closure0]);
    _inheritMany(C.Closure, [A.AppBootstrap_prepareEngineInitializer_closure0, A.AppBootstrap__prepareAppRunner_closure, A.AppBootstrap__prepareFlutterApp_closure, A.AppBootstrap__prepareFlutterApp_closure0, A.fetchFontManifest_closure, A.fetchFontManifest_closure0, A.fetchFontManifest_closure1, A.fetchFontManifest__closure, A.initializeEngineServices__closure, A.FlutterApp__staticInteropFactoryStub_closure, A.FlutterEngineInitializer__staticInteropFactoryStub_closure, A.FlutterAppRunner__staticInteropFactoryStub_closure, A.futureToPromise__closure, A.futureToPromise__closure0, A._kLogicalKeyToModifierGetter_closure, A._kLogicalKeyToModifierGetter_closure0, A._kLogicalKeyToModifierGetter_closure1, A._kLogicalKeyToModifierGetter_closure2, A._kLogicalKeyToModifierGetter_closure3, A._kLogicalKeyToModifierGetter_closure4, A._kLogicalKeyToModifierGetter_closure5, A._kLogicalKeyToModifierGetter_closure6, A.KeyboardBinding$__closure, A.KeyboardBinding$__closure0, A.KeyboardBinding__addEventListener_loggedHandler, A.KeyboardBinding__onKeyData_closure, A.KeyboardConverter__scheduleAsyncEvent_closure, A.KeyboardConverter_handleEvent_closure, A.MultiEntriesBrowserHistory_onPopState_closure, A.SingleEntryBrowserHistory_onPopState_closure, A.SingleEntryBrowserHistory_onPopState_closure0, A.RawKeyboard_handleHtmlEvent_closure0, A.TestUrlStrategy__nextEventLoop_closure, A._StringStream__goalToEventCode_closure, A.FutureOfJSAnyToJSPromise_get_toJS__closure, A.KeyData__quotedCharCode_closure, A.bootstrapEngine_closure, A.HashUrlStrategy_addPopStateListener_wrappedFn, A.HashUrlStrategy__waitForPopState_closure, A.BindingBase_initServiceExtensions_closure0, A.BindingBase_initServiceExtensions_closure2, A.BindingBase_registerBoolServiceExtension_closure, A.BindingBase_registerNumericServiceExtension_closure, A.BindingBase_registerStringServiceExtension_closure, A._GestureArena_toString_closure, A._Resampler_sample_closure, A._Resampler_sample_closure1, A._Resampler_sample__closure, A.PointerEventConverter_expand_closure, A.PointerEventConverter_expand_closure0, A.RendererBinding__scheduleMouseTrackerUpdate_closure, A.MouseTracker__handleDeviceUpdate_closure, A.MouseTracker__handleDeviceUpdateMouseEvents_closure0, A.SchedulerBinding_endOfFrame_closure, A.SchedulerBinding__handleDrawFrame_closure, A.SemanticsOwner_sendSemanticsUpdate_closure, A.SemanticsOwner__getSemanticsActionHandlerForId_closure, A.SemanticsOwner__getSemanticsActionHandlerForPosition_closure, A.ServicesBinding__initKeyboard_closure, A._DefaultBinaryMessenger_send_closure, A.RestorationManager_handleRestorationUpdateFromEngine_closure, A.RestorationManager_scheduleSerializationFor_closure, A.RestorationBucket__visitChildren_closure, A.TextInput__handleTextInputInvocation_closure, A.TextInput__handleTextInputInvocation_closure0, A.TextInput__handleTextInputInvocation_closure1, A.Actions_maybeInvoke_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure6, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure, A._InactiveElements__unmount_closure, A._FlutterEmbedViewState_waitOnWarmupFrames_closure0, A._FlutterEmbedViewState_findChildDomElement_closure, A._flutterApp__closure, A._flutterApp___closure]);
    _inheritMany(C._Enum, [A.DebugEngineInitializationState, A.KeyEventType, A.KeyEventDeviceType, A.FoundationServiceExtensions, A.RenderingServiceExtensions, A.SchedulerServiceExtensions, A.KeyDataTransitMode, A.SwipeEdge, A.KeyboardSide, A.ModifierKey, A.ServicesServiceExtensions, A.TextInputAction, A.FloatingCursorDragState, A.FocusHighlightStrategy, A.Orientation, A.WidgetsServiceExtensions]);
    _inheritMany(C.Closure2Args, [A.initializeEngineServices_closure, A.futureToPromise_closure, A.KeyboardConverter__handleEvent_closure2, A.KeyboardConverter__handleEvent__closure, A.FutureOfJSAnyToJSPromise_get_toJS_closure, A.FutureOfJSAnyToJSPromise_get_toJS__closure0, A.BindingBase_registerServiceExtension_closure, A._Resampler_sample_closure0, A.PointerRouter__dispatchEventToRoutes_closure, A.RendererBinding_initMouseTracker_closure, A.MouseTracker__handleDeviceUpdateMouseEvents_closure, A.PipelineOwner_flushLayout_closure, A.PipelineOwner_flushCompositingBits_closure, A.PipelineOwner_flushPaint_closure, A.PipelineOwner_flushSemantics_closure, A.SchedulerBinding_handleBeginFrame_closure, A.SemanticsOwner_sendSemanticsUpdate_closure0, A.SemanticsOwner_sendSemanticsUpdate_closure1, A._DefaultBinaryMessenger_setMessageHandler_closure, A.RawView_build_closure, A._FlutterEmbedViewState_initState__closure]);
    _inheritMany(A.BrowserHistory, [A.MultiEntriesBrowserHistory, A.SingleEntryBrowserHistory]);
    _inherit(A.EngineFlutterWindow, D.EngineFlutterView);
    _inherit(A._AsyncStreamController, A._StreamController);
    _inherit(A.LicenseEntryWithLineBreaks, A.LicenseEntry);
    _inherit(A.HashedObserverList, C.Iterable);
    _inherit(A.FlutterErrorDetailsForPointerEventDispatcher, D.FlutterErrorDetails);
    _inherit(A.PointerEvent, A._PointerEvent_Object_Diagnosticable);
    _inherit(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable, A._AbstractPointerEvent);
    _inherit(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription, A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable);
    _inherit(A._TransformedPointerEvent, A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription);
    _inheritMany(A.PointerEvent, [A._PointerAddedEvent_PointerEvent__PointerEventDescription, A._PointerRemovedEvent_PointerEvent__PointerEventDescription, A._PointerHoverEvent_PointerEvent__PointerEventDescription, A._PointerEnterEvent_PointerEvent__PointerEventDescription, A._PointerExitEvent_PointerEvent__PointerEventDescription, A._PointerDownEvent_PointerEvent__PointerEventDescription, A._PointerMoveEvent_PointerEvent__PointerEventDescription, A._PointerUpEvent_PointerEvent__PointerEventDescription, A._PointerSignalEvent_PointerEvent__RespondablePointerEvent, A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription, A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription, A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription, A._PointerCancelEvent_PointerEvent__PointerEventDescription]);
    _inherit(A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent, A._PointerAddedEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerAddedEvent, A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent);
    _inheritMany(A._TransformedPointerEvent, [A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent, A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent, A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent, A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent, A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent, A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent, A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent, A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent, A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent, A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent, A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent, A.__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent, A.__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent, A.__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent, A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent]);
    _inherit(A._TransformedPointerAddedEvent, A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent);
    _inherit(A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent, A._PointerRemovedEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerRemovedEvent, A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent);
    _inherit(A._TransformedPointerRemovedEvent, A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent);
    _inherit(A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent, A._PointerHoverEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerHoverEvent, A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent);
    _inherit(A._TransformedPointerHoverEvent, A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent);
    _inherit(A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent, A._PointerEnterEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerEnterEvent, A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent);
    _inherit(A._TransformedPointerEnterEvent, A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent);
    _inherit(A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent, A._PointerExitEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerExitEvent, A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent);
    _inherit(A._TransformedPointerExitEvent, A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent);
    _inherit(A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent, A._PointerDownEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerDownEvent, A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent);
    _inherit(A._TransformedPointerDownEvent, A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent);
    _inherit(A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent, A._PointerMoveEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerMoveEvent, A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent);
    _inherit(A._TransformedPointerMoveEvent, A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent);
    _inherit(A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent, A._PointerUpEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerUpEvent, A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent);
    _inherit(A._TransformedPointerUpEvent, A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent);
    _inherit(A.PointerSignalEvent, A._PointerSignalEvent_PointerEvent__RespondablePointerEvent);
    _inheritMany(A.PointerSignalEvent, [A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription, A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription, A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription]);
    _inherit(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent, A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription);
    _inherit(A.PointerScrollEvent, A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent);
    _inherit(A._TransformedPointerScrollEvent, A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent);
    _inherit(A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent, A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription);
    _inherit(A.PointerScrollInertiaCancelEvent, A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent);
    _inherit(A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent, A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent);
    _inherit(A._TransformedPointerScrollInertiaCancelEvent, A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent);
    _inherit(A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent, A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription);
    _inherit(A.PointerScaleEvent, A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent);
    _inherit(A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent, A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent);
    _inherit(A._TransformedPointerScaleEvent, A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent);
    _inherit(A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent, A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerPanZoomStartEvent, A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent);
    _inherit(A._TransformedPointerPanZoomStartEvent, A.__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent);
    _inherit(A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent, A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerPanZoomUpdateEvent, A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent);
    _inherit(A._TransformedPointerPanZoomUpdateEvent, A.__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent);
    _inherit(A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent, A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerPanZoomEndEvent, A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent);
    _inherit(A._TransformedPointerPanZoomEndEvent, A.__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent);
    _inherit(A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent, A._PointerCancelEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerCancelEvent, A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent);
    _inherit(A._TransformedPointerCancelEvent, A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent);
    _inheritMany(A._TransformPart, [A._MatrixTransformPart, A._OffsetTransformPart]);
    _inherit(A._SystemFontsNotifier, D.Listenable);
    _inheritMany(D.ChangeNotifier, [A._BindingPipelineManifold, A.MouseTracker, A.SemanticsOwner, A.RestorationManager]);
    _inherit(A.PipelineOwner, A._PipelineOwner_Object_DiagnosticableTreeMixin);
    _inherit(A._DefaultRootPipelineOwner, A.PipelineOwner);
    _inherit(A.BoxHitTestResult, A.HitTestResult);
    _inherit(A._MouseTrackerUpdateDetails, A.__MouseTrackerUpdateDetails_Object_Diagnosticable);
    _inherit(A._RenderView_RenderObject_RenderObjectWithChildMixin, D.RenderObject);
    _inherit(A.RenderView, A._RenderView_RenderObject_RenderObjectWithChildMixin);
    _inherit(A._DefaultBinaryMessenger, A.BinaryMessenger);
    _inherit(A.KeyEvent, A._KeyEvent_Object_Diagnosticable);
    _inheritMany(A.KeyEvent, [A.KeyDownEvent, A.KeyUpEvent, A.KeyRepeatEvent]);
    _inherit(A.PhysicalKeyboardKey, D.KeyboardKey);
    _inherit(A.RawKeyEventData, A._RawKeyEventData_Object_Diagnosticable);
    _inherit(A.RawKeyEvent, A._RawKeyEvent_Object_Diagnosticable);
    _inheritMany(A.RawKeyEvent, [A.RawKeyDownEvent, A.RawKeyUpEvent]);
    _inherit(A.RawKeyEventDataWeb, A.RawKeyEventData);
    _inherit(A.TextEditingDelta, A._TextEditingDelta_Object_Diagnosticable);
    _inheritMany(A.TextEditingDelta, [A.TextEditingDeltaInsertion, A.TextEditingDeltaDeletion, A.TextEditingDeltaReplacement, A.TextEditingDeltaNonTextUpdate]);
    _inherit(A._PlatformTextInputControl, A.__PlatformTextInputControl_Object_TextInputControl);
    _inheritMany(D.StatefulWidget, [A.StatefulBuilder, A._MediaQueryFromView, A.View, A.MultiViewApp]);
    _inheritMany(D.State0, [A._StatefulBuilderState, A.__MediaQueryFromViewState_State_WidgetsBindingObserver, A.__ViewState_State_WidgetsBindingObserver, A.__MultiViewAppState_State_WidgetsBindingObserver]);
    _inheritMany(D.Widget, [A.RootWidget, A._MultiChildComponentWidget]);
    _inheritMany(D.Element0, [A._RootElement_Element_RootElementMixin, A._MultiChildComponentElement]);
    _inherit(A.RootElement, A._RootElement_Element_RootElementMixin);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding, A.BindingBase);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding);
    _inherit(A.WidgetsFlutterBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding);
    _inherit(A._AppLifecycleListener, D.WidgetsBindingObserver);
    _inherit(A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier, A._FocusManager_Object_DiagnosticableTreeMixin);
    _inherit(A.FocusManager, A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier);
    _inherit(A.RenderTreeRootElement, D.RenderObjectElement);
    _inherit(A._MediaQueryFromViewState, A.__MediaQueryFromViewState_State_WidgetsBindingObserver);
    _inherit(A.DefaultPlatformMenuDelegate, A.PlatformMenuDelegate);
    _inherit(A._ViewState, A.__ViewState_State_WidgetsBindingObserver);
    _inherit(A.RawView, D.StatelessWidget);
    _inherit(A._RawViewInternal, D.RenderObjectWidget);
    _inherit(A._RawViewElement, A.RenderTreeRootElement);
    _inheritMany(D.InheritedWidget, [A._ViewScope, A._PipelineOwnerScope]);
    _inherit(A.ViewCollection, A._MultiChildComponentWidget);
    _inherit(A._DeprecatedRawViewKey, D.GlobalKey);
    _inherit(A.LocalKey0, A.Key0);
    _inherit(A.UniqueKey0, A.LocalKey0);
    _inherit(A.FlutterEmbedView, C.StatefulComponent);
    _inherit(A._FlutterEmbedViewState, C.State);
    _inherit(A._MultiViewAppState, A.__MultiViewAppState_State_WidgetsBindingObserver);
    _mixinHard(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixinHard(A._PointerAddedEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent, A._CopyPointerAddedEvent);
    _mixinHard(A._PointerCancelEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent, A._CopyPointerCancelEvent);
    _mixinHard(A._PointerDownEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent, A._CopyPointerDownEvent);
    _mixinHard(A._PointerEnterEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent, A._CopyPointerEnterEvent);
    _mixinHard(A._PointerEvent_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A._PointerExitEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent, A._CopyPointerExitEvent);
    _mixinHard(A._PointerHoverEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent, A._CopyPointerHoverEvent);
    _mixinHard(A._PointerMoveEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent, A._CopyPointerMoveEvent);
    _mixinHard(A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent, A._CopyPointerPanZoomEndEvent);
    _mixinHard(A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent, A._CopyPointerPanZoomStartEvent);
    _mixinHard(A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent, A._CopyPointerPanZoomUpdateEvent);
    _mixinHard(A._PointerRemovedEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent, A._CopyPointerRemovedEvent);
    _mixinHard(A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent, A._CopyPointerScaleEvent);
    _mixinHard(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent, A._CopyPointerScrollEvent);
    _mixinHard(A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent, A._CopyPointerScrollInertiaCancelEvent);
    _mixinHard(A._PointerSignalEvent_PointerEvent__RespondablePointerEvent, A._RespondablePointerEvent);
    _mixinHard(A._PointerUpEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent, A._CopyPointerUpEvent);
    _mixinHard(A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent, A._CopyPointerAddedEvent);
    _mixinHard(A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent, A._CopyPointerCancelEvent);
    _mixinHard(A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent, A._CopyPointerDownEvent);
    _mixinHard(A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent, A._CopyPointerEnterEvent);
    _mixin(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable, D.Diagnosticable);
    _mixinHard(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription, A._PointerEventDescription);
    _mixinHard(A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent, A._CopyPointerExitEvent);
    _mixinHard(A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent, A._CopyPointerHoverEvent);
    _mixinHard(A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent, A._CopyPointerMoveEvent);
    _mixinHard(A.__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent, A._CopyPointerPanZoomEndEvent);
    _mixinHard(A.__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent, A._CopyPointerPanZoomStartEvent);
    _mixinHard(A.__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent, A._CopyPointerPanZoomUpdateEvent);
    _mixinHard(A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent, A._CopyPointerRemovedEvent);
    _mixinHard(A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent, A._CopyPointerScaleEvent);
    _mixinHard(A.__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent, A._RespondablePointerEvent);
    _mixinHard(A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent, A._CopyPointerScrollEvent);
    _mixinHard(A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent, A._CopyPointerScrollInertiaCancelEvent);
    _mixinHard(A.__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent, A._RespondablePointerEvent);
    _mixinHard(A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent, A._CopyPointerUpEvent);
    _mixinHard(A.__MouseTrackerUpdateDetails_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A._PipelineOwner_Object_DiagnosticableTreeMixin, D.DiagnosticableTreeMixin);
    _mixinHard(A._RenderView_RenderObject_RenderObjectWithChildMixin, D.RenderObjectWithChildMixin);
    _mixinHard(A._KeyEvent_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A._RawKeyEvent_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A._RawKeyEventData_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A._TextEditingDelta_Object_Diagnosticable, D.Diagnosticable);
    _mixinHard(A.__PlatformTextInputControl_Object_TextInputControl, A.TextInputControl);
    _mixinHard(A._RootElement_Element_RootElementMixin, A.RootElementMixin);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding, A.GestureBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding, A.SchedulerBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding, A.ServicesBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding, A.PaintingBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding, A.SemanticsBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding, A.RendererBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, A.WidgetsBinding);
    _mixinHard(A._FocusManager_Object_DiagnosticableTreeMixin, D.DiagnosticableTreeMixin);
    _mixinHard(A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier, D.ChangeNotifier);
    _mixinHard(A.__MediaQueryFromViewState_State_WidgetsBindingObserver, D.WidgetsBindingObserver);
    _mixinHard(A.__ViewState_State_WidgetsBindingObserver, D.WidgetsBindingObserver);
    _mixinHard(A.__MultiViewAppState_State_WidgetsBindingObserver, D.WidgetsBindingObserver);
  })();
  C._Universe_addRules(init.typeUniverse, JSON.parse('{"DebugEngineInitializationState":{"_Enum":[],"Enum":[]},"MultiEntriesBrowserHistory":{"BrowserHistory":[]},"SingleEntryBrowserHistory":{"BrowserHistory":[]},"TestUrlStrategy":{"UrlStrategy":[]},"SemanticsUpdate":{"SemanticsUpdate0":[]},"EngineFlutterWindow":{"EngineFlutterView":[],"SingletonFlutterWindow":[],"FlutterView":[]},"_StreamController":{"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_SimpleCallbackSink":{"ChunkedConversionSink":["1"],"Sink":["1"]},"_FakeUserTag":{"UserTag":[]},"KeyEventType":{"_Enum":[],"Enum":[]},"KeyEventDeviceType":{"_Enum":[],"Enum":[]},"BrowserPlatformLocation":{"PlatformLocation":[]},"HashUrlStrategy":{"UrlStrategy":[]},"HeapPriorityQueue":{"PriorityQueue":["1"]},"LicenseEntryWithLineBreaks":{"LicenseEntry":[]},"HashedObserverList":{"Iterable":["1"],"Iterable.E":"1"},"FoundationServiceExtensions":{"_Enum":[],"Enum":[]},"FlutterErrorDetailsForPointerEventDispatcher":{"FlutterErrorDetails":[],"_FlutterErrorDetails_Object_Diagnosticable":[],"Diagnosticable":[]},"GestureBinding":{"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_PointerEventDescription":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_AbstractPointerEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerEvent":{"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerAddedEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerAddedEvent":{"_PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent":[],"_PointerAddedEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerAddedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerAddedEvent":{"__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent":[],"_TransformedPointerEvent":[],"PointerAddedEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerAddedEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerAddedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerRemovedEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerRemovedEvent":{"_PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent":[],"_PointerRemovedEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerRemovedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerRemovedEvent":{"__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent":[],"_TransformedPointerEvent":[],"PointerRemovedEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerRemovedEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerRemovedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerHoverEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerHoverEvent":{"__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent":[],"_TransformedPointerEvent":[],"PointerHoverEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerHoverEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerHoverEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerEnterEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerEnterEvent":{"__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent":[],"_TransformedPointerEvent":[],"PointerEnterEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerEnterEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerEnterEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerExitEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerExitEvent":{"__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent":[],"_TransformedPointerEvent":[],"PointerExitEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerExitEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerExitEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerDownEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerDownEvent":{"__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent":[],"_TransformedPointerEvent":[],"PointerDownEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerDownEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerDownEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerMoveEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerMoveEvent":{"__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent":[],"_TransformedPointerEvent":[],"PointerMoveEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerMoveEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerMoveEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerUpEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerUpEvent":{"__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent":[],"_TransformedPointerEvent":[],"PointerUpEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerUpEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerUpEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_RespondablePointerEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerScrollEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerScrollEvent":{"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent":[],"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerScrollEvent":{"PointerScrollEvent":[],"__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent":[],"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent":[],"_TransformedPointerEvent":[],"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"PointerSignalEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerScrollInertiaCancelEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerScrollInertiaCancelEvent":{"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent":[],"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollInertiaCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerScrollInertiaCancelEvent":{"__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent":[],"PointerScrollInertiaCancelEvent":[],"__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent":[],"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent":[],"_TransformedPointerEvent":[],"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"PointerSignalEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollInertiaCancelEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerScaleEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerScaleEvent":{"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent":[],"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScaleEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerScaleEvent":{"__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent":[],"PointerScaleEvent":[],"__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent":[],"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent":[],"_TransformedPointerEvent":[],"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"PointerSignalEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScaleEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerPanZoomStartEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerPanZoomStartEvent":{"__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent":[],"_TransformedPointerEvent":[],"PointerPanZoomStartEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomStartEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerPanZoomUpdateEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerPanZoomUpdateEvent":{"__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent":[],"_TransformedPointerEvent":[],"PointerPanZoomUpdateEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomUpdateEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerPanZoomEndEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerPanZoomEndEvent":{"__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent":[],"_TransformedPointerEvent":[],"PointerPanZoomEndEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomEndEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_CopyPointerCancelEvent":{"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_TransformedPointerCancelEvent":{"__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent":[],"_TransformedPointerEvent":[],"PointerCancelEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"_PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_PointerCancelEvent_PointerEvent__PointerEventDescription":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerAddedEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent":{"_PointerAddedEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerAddedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerCancelEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent":{"_PointerCancelEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerDownEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent":{"_PointerDownEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerDownEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerEnterEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent":{"_PointerEnterEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerEnterEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerEvent_Object_Diagnosticable":{"Diagnosticable":[]},"_PointerExitEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent":{"_PointerExitEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerExitEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerHoverEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent":{"_PointerHoverEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerHoverEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerMoveEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent":{"_PointerMoveEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerMoveEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent":{"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomEndEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent":{"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomStartEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent":{"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomUpdateEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerRemovedEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent":{"_PointerRemovedEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerRemovedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription":{"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScaleEvent":{"_PointerScaleEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScaleEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription":{"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent":{"_PointerScrollEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription":{"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollInertiaCancelEvent":{"_PointerScrollInertiaCancelEvent_PointerSignalEvent__PointerEventDescription":[],"PointerSignalEvent":[],"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollInertiaCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":{"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerUpEvent_PointerEvent__PointerEventDescription":{"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent":{"_PointerUpEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerUpEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerAddedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerDownEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerEnterEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":{"_AbstractPointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":{"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerExitEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerHoverEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerMoveEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerPanZoomEndEvent__TransformedPointerEvent__CopyPointerPanZoomEndEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomEndEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerPanZoomStartEvent__TransformedPointerEvent__CopyPointerPanZoomStartEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomStartEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerPanZoomUpdateEvent__TransformedPointerEvent__CopyPointerPanZoomUpdateEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerPanZoomUpdateEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerRemovedEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScaleEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent__RespondablePointerEvent":{"__TransformedPointerScaleEvent__TransformedPointerEvent__CopyPointerScaleEvent":[],"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScaleEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollInertiaCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent__RespondablePointerEvent":{"__TransformedPointerScrollInertiaCancelEvent__TransformedPointerEvent__CopyPointerScrollInertiaCancelEvent":[],"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerScrollInertiaCancelEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent":{"_TransformedPointerEvent":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription":[],"__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable":[],"_AbstractPointerEvent":[],"_PointerEventDescription":[],"_CopyPointerUpEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerEvent":{"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerHoverEvent":{"_PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent":[],"_PointerHoverEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerHoverEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerEnterEvent":{"_PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent":[],"_PointerEnterEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerEnterEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerExitEvent":{"_PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent":[],"_PointerExitEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerExitEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerDownEvent":{"_PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent":[],"_PointerDownEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerDownEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerMoveEvent":{"_PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent":[],"_PointerMoveEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerMoveEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerUpEvent":{"_PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent":[],"_PointerUpEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerUpEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerSignalEvent":{"_PointerSignalEvent_PointerEvent__RespondablePointerEvent":[],"_RespondablePointerEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerPanZoomStartEvent":{"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomStartEvent":[],"_PointerPanZoomStartEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomStartEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerPanZoomUpdateEvent":{"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomUpdateEvent":[],"_PointerPanZoomUpdateEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomUpdateEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerPanZoomEndEvent":{"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription__CopyPointerPanZoomEndEvent":[],"_PointerPanZoomEndEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerPanZoomEndEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PointerCancelEvent":{"_PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent":[],"_PointerCancelEvent_PointerEvent__PointerEventDescription":[],"_PointerEventDescription":[],"_CopyPointerCancelEvent":[],"PointerEvent":[],"_PointerEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_MatrixTransformPart":{"_TransformPart":[]},"_OffsetTransformPart":{"_TransformPart":[]},"_SystemFontsNotifier":{"Listenable":[]},"PaintingBinding":{"ServicesBinding":[],"SchedulerBinding":[],"BindingBase":[]},"_CachedImage":{"_CachedImageBase":[]},"_LiveImage":{"_CachedImageBase":[]},"_BindingPipelineManifold":{"ChangeNotifier":[],"PipelineManifold":[],"Listenable":[]},"_DefaultRootPipelineOwner":{"PipelineOwner":[],"_PipelineOwner_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"RendererBinding":{"ServicesBinding":[],"SemanticsBinding":[],"GestureBinding":[],"SchedulerBinding":[],"HitTestable":[],"BindingBase":[],"HitTestDispatcher":[],"HitTestTarget":[]},"BoxHitTestResult":{"HitTestResult":[]},"_MouseTrackerUpdateDetails":{"__MouseTrackerUpdateDetails_Object_Diagnosticable":[],"Diagnosticable":[]},"MouseTracker":{"ChangeNotifier":[],"Listenable":[]},"__MouseTrackerUpdateDetails_Object_Diagnosticable":{"Diagnosticable":[]},"PipelineManifold":{"Listenable":[]},"_PipelineOwner_Object_DiagnosticableTreeMixin":{"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"PipelineOwner":{"_PipelineOwner_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"RenderingServiceExtensions":{"_Enum":[],"Enum":[]},"RenderView":{"_RenderView_RenderObject_RenderObjectWithChildMixin":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"_RenderObject_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"_RenderView_RenderObject_RenderObjectWithChildMixin":{"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"_RenderObject_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"HitTestTarget":[]},"SchedulerBinding":{"BindingBase":[]},"SchedulerServiceExtensions":{"_Enum":[],"Enum":[]},"SemanticsBinding":{"BindingBase":[]},"SemanticsOwner":{"ChangeNotifier":[],"Listenable":[]},"_DefaultBinaryMessenger":{"BinaryMessenger":[]},"ServicesBinding":{"SchedulerBinding":[],"BindingBase":[]},"KeyUpEvent":{"KeyEvent":[],"_KeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"KeyDataTransitMode":{"_Enum":[],"Enum":[]},"_KeyEvent_Object_Diagnosticable":{"Diagnosticable":[]},"KeyEvent":{"_KeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"KeyDownEvent":{"KeyEvent":[],"_KeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"KeyRepeatEvent":{"KeyEvent":[],"_KeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"PhysicalKeyboardKey":{"KeyboardKey":[],"_KeyboardKey_Object_Diagnosticable":[],"Diagnosticable":[]},"SwipeEdge":{"_Enum":[],"Enum":[]},"KeyboardSide":{"_Enum":[],"Enum":[]},"ModifierKey":{"_Enum":[],"Enum":[]},"RawKeyEventData":{"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyDownEvent":{"RawKeyEvent":[],"_RawKeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyUpEvent":{"RawKeyEvent":[],"_RawKeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"_RawKeyEvent_Object_Diagnosticable":{"Diagnosticable":[]},"_RawKeyEventData_Object_Diagnosticable":{"Diagnosticable":[]},"RawKeyEvent":{"_RawKeyEvent_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyEventDataWeb":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RestorationManager":{"ChangeNotifier":[],"Listenable":[]},"ServicesServiceExtensions":{"_Enum":[],"Enum":[]},"TextEditingDelta":{"_TextEditingDelta_Object_Diagnosticable":[],"Diagnosticable":[]},"TextEditingDeltaInsertion":{"TextEditingDelta":[],"_TextEditingDelta_Object_Diagnosticable":[],"Diagnosticable":[]},"TextEditingDeltaDeletion":{"TextEditingDelta":[],"_TextEditingDelta_Object_Diagnosticable":[],"Diagnosticable":[]},"TextEditingDeltaReplacement":{"TextEditingDelta":[],"_TextEditingDelta_Object_Diagnosticable":[],"Diagnosticable":[]},"TextEditingDeltaNonTextUpdate":{"TextEditingDelta":[],"_TextEditingDelta_Object_Diagnosticable":[],"Diagnosticable":[]},"_TextEditingDelta_Object_Diagnosticable":{"Diagnosticable":[]},"TextInputAction":{"_Enum":[],"Enum":[]},"FloatingCursorDragState":{"_Enum":[],"Enum":[]},"DeltaTextInputClient":{"TextInputClient":[]},"_PlatformTextInputControl":{"__PlatformTextInputControl_Object_TextInputControl":[],"TextInputControl":[]},"__PlatformTextInputControl_Object_TextInputControl":{"TextInputControl":[]},"StatefulBuilder":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_StatefulBuilderState":{"State0":["StatefulBuilder"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"State0.T":"StatefulBuilder"},"RootWidget":{"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"RootElement":{"_RootElement_Element_RootElementMixin":[],"RootElementMixin":[],"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"WidgetsFlutterBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":[],"WidgetsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"PaintingBinding":[],"RendererBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"SemanticsBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_RootElement_Element_RootElementMixin":{"RootElementMixin":[],"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding":{"GestureBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"GestureBinding":[],"SchedulerBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"SemanticsBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"PaintingBinding":[],"RendererBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"SemanticsBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding":{"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding":[],"WidgetsBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding":[],"PaintingBinding":[],"RendererBinding":[],"_WidgetsFlutterBinding_BindingBase_GestureBinding":[],"ServicesBinding":[],"GestureBinding":[],"SchedulerBinding":[],"SemanticsBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"WidgetsBinding":{"RendererBinding":[],"ServicesBinding":[],"SemanticsBinding":[],"GestureBinding":[],"SchedulerBinding":[],"BindingBase":[],"HitTestable":[],"HitTestDispatcher":[],"HitTestTarget":[]},"FocusHighlightStrategy":{"_Enum":[],"Enum":[]},"_AppLifecycleListener":{"WidgetsBindingObserver":[]},"_FocusManager_Object_DiagnosticableTreeMixin":{"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier":{"_FocusManager_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"ChangeNotifier":[],"Diagnosticable":[],"Listenable":[]},"FocusManager":{"_FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier":[],"_FocusManager_Object_DiagnosticableTreeMixin":[],"DiagnosticableTreeMixin":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"ChangeNotifier":[],"Diagnosticable":[],"Listenable":[]},"RootElementMixin":{"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"RenderTreeRootElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"Orientation":{"_Enum":[],"Enum":[]},"_MediaQueryFromView":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_MediaQueryFromViewState":{"__MediaQueryFromViewState_State_WidgetsBindingObserver":[],"State0":["_MediaQueryFromView"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[],"State0.T":"_MediaQueryFromView"},"_UnspecifiedTextScaler":{"TextScaler":[]},"__MediaQueryFromViewState_State_WidgetsBindingObserver":{"State0":["_MediaQueryFromView"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[]},"DefaultPlatformMenuDelegate":{"PlatformMenuDelegate":[]},"PlatformMenuItem":{"_PlatformMenuItem_Object_Diagnosticable":[],"Diagnosticable":[]},"WidgetsServiceExtensions":{"_Enum":[],"Enum":[]},"View":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_ViewState":{"__ViewState_State_WidgetsBindingObserver":[],"State0":["View"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[],"State0.T":"View"},"RawView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_RawViewInternal":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_RawViewElement":{"RenderTreeRootElement":[],"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"_MultiChildComponentWidget":{"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"ViewCollection":{"_MultiChildComponentWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_MultiChildComponentElement":{"Element0":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[],"BuildContext":[]},"_DeprecatedRawViewKey":{"GlobalKey":["1"],"Key":[]},"__ViewState_State_WidgetsBindingObserver":{"State0":["View"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[]},"_ViewScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_PipelineOwnerScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"LocalKey0":{"Key0":[]},"UniqueKey0":{"LocalKey0":[],"Key0":[]},"FlutterEmbedView":{"StatefulComponent":[],"Component":[]},"_FlutterEmbedViewState":{"State":["FlutterEmbedView"],"State.T":"FlutterEmbedView"},"MultiViewApp":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[],"_DiagnosticableTree_Object_Diagnosticable":[],"Diagnosticable":[]},"_MultiViewAppState":{"__MultiViewAppState_State_WidgetsBindingObserver":[],"State0":["MultiViewApp"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[],"State0.T":"MultiViewApp"},"__MultiViewAppState_State_WidgetsBindingObserver":{"State0":["MultiViewApp"],"_State_Object_Diagnosticable":[],"Diagnosticable":[],"WidgetsBindingObserver":[]},"RawKeyEventDataAndroid":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyEventDataFuchsia":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyEventDataIos":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyEventDataLinux":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]},"RawKeyEventDataMacOs":{"RawKeyEventData":[],"_RawKeyEventData_Object_Diagnosticable":[],"Diagnosticable":[]}}'));
  var string$ = {
    _This_: "\nThis exception was thrown in the context of a scheduler callback. When the scheduler callback was _registered_ (as opposed to when the exception was thrown), this was the stack",
    No_ren: "No render tree root was added to the binding.",
    There_: "There was a problem trying to load FontManifest.json"
  };
  var type$ = (function rtii() {
    var findType = C.findType;
    return {
      AccessibilityFeatures: findType("AccessibilityFeatures"),
      AppExitResponse: findType("AppExitResponse"),
      AppLifecycleState: findType("AppLifecycleState"),
      BasicMessageChannel_nullable_Object: findType("BasicMessageChannel<Object?>"),
      BinaryMessenger: findType("BinaryMessenger"),
      BuildContext: findType("BuildContext"),
      BuildContext_2: findType("BuildContext0"),
      BuildOwner: findType("BuildOwner"),
      ByteData: findType("ByteData"),
      Comparable_nullable_Object: findType("Comparable<Object?>"),
      Component: findType("Component"),
      ContainerLayer: findType("ContainerLayer0"),
      DartPerformanceMode: findType("DartPerformanceMode"),
      DeltaTextInputClient: findType("DeltaTextInputClient"),
      DiagnosticPropertiesBuilder: findType("DiagnosticPropertiesBuilder"),
      DisplayFeature: findType("DisplayFeature"),
      DomRenderObject: findType("DomRenderObject"),
      Duration: findType("Duration"),
      Element: findType("Element0"),
      Element_2: findType("Element"),
      Float64List: findType("Float64List"),
      FlutterEmbedView: findType("FlutterEmbedView"),
      FlutterHtmlKeyboardEvent: findType("FlutterHtmlKeyboardEvent"),
      FlutterView: findType("FlutterView"),
      FocusNode: findType("FocusNode"),
      FontAsset: findType("FontAsset"),
      FontFamily: findType("FontFamily"),
      FontManifest: findType("FontManifest"),
      FrameTiming: findType("FrameTiming"),
      Function: findType("Function"),
      Future_Map_String_dynamic_Function_Map_String_String: findType("Future<Map<String,@>>(Map<String,String>)"),
      Future_ServiceExtensionResponse: findType("Future<ServiceExtensionResponse>"),
      Future_ServiceExtensionResponse_Function_2_String_and_Map_String_String: findType("Future<ServiceExtensionResponse>(String,Map<String,String>)"),
      Future_String_Function: findType("Future<String>()"),
      Future_bool_Function: findType("Future<bool>()"),
      Future_double_Function: findType("Future<double>()"),
      Future_void: findType("Future<~>"),
      Future_void_Function: findType("Future<~>()"),
      Future_void_Function_String: findType("Future<~>(String)"),
      Future_void_Function_bool: findType("Future<~>(bool)"),
      Future_void_Function_double: findType("Future<~>(double)"),
      GestureArenaMember: findType("GestureArenaMember"),
      GestureDisposition: findType("GestureDisposition"),
      GlobalKey_State_StatefulWidget: findType("GlobalKey<State0<StatefulWidget>>"),
      HardwareKeyboard: findType("HardwareKeyboard"),
      HitTestEntry_HitTestTarget: findType("HitTestEntry<HitTestTarget>"),
      HitTestResult: findType("HitTestResult"),
      HitTestTarget: findType("HitTestTarget"),
      HttpFetchResponse: findType("HttpFetchResponse"),
      ImageCache: findType("ImageCache"),
      InheritedElement: findType("InheritedElement"),
      Int32List: findType("Int32List"),
      Intent: findType("Intent"),
      Iterable_MouseCursor: findType("Iterable<MouseCursor0>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_AppLifecycleState: findType("JSArray<AppLifecycleState>"),
      JSArray_Component: findType("JSArray<Component>"),
      JSArray_DiagnosticsNode: findType("JSArray<DiagnosticsNode>"),
      JSArray_Element: findType("JSArray<Element0>"),
      JSArray_FocusNode: findType("JSArray<FocusNode>"),
      JSArray_FontFamily: findType("JSArray<FontFamily>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_GestureArenaMember: findType("JSArray<GestureArenaMember>"),
      JSArray_HitTestEntry_HitTestTarget: findType("JSArray<HitTestEntry<HitTestTarget>>"),
      JSArray_KeyEvent: findType("JSArray<KeyEvent>"),
      JSArray_KeyEventResult: findType("JSArray<KeyEventResult>"),
      JSArray_LicenseEntry: findType("JSArray<LicenseEntry>"),
      JSArray_Matrix4: findType("JSArray<Matrix40>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_RenderObject: findType("JSArray<RenderObject>"),
      JSArray_RestorationBucket: findType("JSArray<RestorationBucket>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      JSArray_SemanticsNodeUpdate: findType("JSArray<SemanticsNodeUpdate>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Styles: findType("JSArray<Styles>"),
      JSArray_TestHistoryEntry: findType("JSArray<TestHistoryEntry>"),
      JSArray_TextEditingDelta: findType("JSArray<TextEditingDelta>"),
      JSArray_WidgetsBindingObserver: findType("JSArray<WidgetsBindingObserver>"),
      JSArray__Autofocus: findType("JSArray<_Autofocus>"),
      JSArray__TransformPart: findType("JSArray<_TransformPart>"),
      JSArray_nullable_LogicalKeyboardKey: findType("JSArray<LogicalKeyboardKey?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSArray_of_Stream_LicenseEntry_Function: findType("JSArray<Stream<LicenseEntry>()>"),
      JSArray_of_bool_Function_KeyEvent: findType("JSArray<bool(KeyEvent)>"),
      JSArray_of_void_Function_Duration: findType("JSArray<~(Duration)>"),
      JSArray_of_void_Function_List_FrameTiming: findType("JSArray<~(List<FrameTiming>)>"),
      JSArray_of_void_Function_RawKeyEvent: findType("JSArray<~(RawKeyEvent)>"),
      JSArray_of_void_Function_nullable_Object: findType("JSArray<~(Object?)>"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptObject: findType("JavaScriptObject"),
      KeyData: findType("KeyData"),
      KeyData_Function: findType("KeyData()"),
      KeyEvent: findType("KeyEvent"),
      KeyEventManager: findType("KeyEventManager"),
      KeyEventResult_Function_KeyEvent: findType("KeyEventResult(KeyEvent)"),
      KeyEventType: findType("KeyEventType"),
      KeyMessage: findType("KeyMessage"),
      KeyboardLockMode: findType("KeyboardLockMode"),
      KeyboardSide: findType("KeyboardSide"),
      LicenseEntry: findType("LicenseEntry"),
      LinkedHashMap_MouseTrackerAnnotation_Matrix4: findType("LinkedHashMap<MouseTrackerAnnotation,Matrix40>"),
      List_Element: findType("List<Element0>"),
      List_FrameTiming: findType("List<FrameTiming>"),
      List_KeyEvent: findType("List<KeyEvent>"),
      List_LicenseEntry: findType("List<LicenseEntry>"),
      List_RenderObject: findType("List<RenderObject>"),
      List_RestorationBucket: findType("List<RestorationBucket>"),
      List_StringAttribute: findType("List<StringAttribute>"),
      List_dynamic: findType("List<@>"),
      List_nullable_Object: findType("List<Object?>"),
      List_of_bool_Function_KeyEvent: findType("List<bool(KeyEvent)>"),
      LogicalKeyboardKey: findType("LogicalKeyboardKey"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      MapEntry_int_String: findType("MapEntry<int,String>"),
      Map_MouseTrackerAnnotation_Matrix4: findType("Map<MouseTrackerAnnotation,Matrix40>"),
      Map_Object_Widget: findType("Map<Object,Widget>"),
      Map_String_Object: findType("Map<String,Object>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_String_int: findType("Map<String,int>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_int__FrameCallbackEntry: findType("Map<int,_FrameCallbackEntry>"),
      Map_of_Element_and_GlobalKey_State_StatefulWidget: findType("Map<Element0,GlobalKey<State0<StatefulWidget>>>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      Map_of_nullable_String_and_nullable_Object: findType("Map<String?,Object?>"),
      Map_of_void_Function_PointerEvent_and_nullable_Matrix4: findType("Map<~(PointerEvent),Matrix40?>"),
      Matrix4: findType("Matrix40"),
      MethodCall: findType("MethodCall"),
      MethodChannel: findType("MethodChannel"),
      ModifierKey: findType("ModifierKey"),
      MouseCursor: findType("MouseCursor0"),
      MouseCursorSession: findType("MouseCursorSession"),
      MouseTrackerAnnotation: findType("MouseTrackerAnnotation"),
      MultiViewApp: findType("MultiViewApp"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      Offset: findType("Offset"),
      PaintingContext: findType("PaintingContext"),
      PhysicalKeyboardKey: findType("PhysicalKeyboardKey"),
      PictureRecorder: findType("PictureRecorder"),
      PipelineManifold: findType("PipelineManifold"),
      PipelineOwner: findType("PipelineOwner"),
      PlatformMenuDelegate: findType("PlatformMenuDelegate"),
      PlatformMenuItem: findType("PlatformMenuItem"),
      PointerAddedEvent: findType("PointerAddedEvent"),
      PointerCancelEvent: findType("PointerCancelEvent"),
      PointerData: findType("PointerData"),
      PointerDataPacket: findType("PointerDataPacket"),
      PointerDeviceKind: findType("PointerDeviceKind"),
      PointerDownEvent: findType("PointerDownEvent"),
      PointerEvent: findType("PointerEvent"),
      PointerEventResampler: findType("PointerEventResampler"),
      PointerHoverEvent: findType("PointerHoverEvent"),
      PointerMoveEvent: findType("PointerMoveEvent"),
      PointerPanZoomEndEvent: findType("PointerPanZoomEndEvent"),
      PointerPanZoomStartEvent: findType("PointerPanZoomStartEvent"),
      PointerPanZoomUpdateEvent: findType("PointerPanZoomUpdateEvent"),
      PointerRemovedEvent: findType("PointerRemovedEvent"),
      PointerScrollEvent: findType("PointerScrollEvent"),
      PointerSignalEvent: findType("PointerSignalEvent"),
      PointerUpEvent: findType("PointerUpEvent"),
      RawKeyEvent: findType("RawKeyEvent"),
      Rect: findType("Rect"),
      RenderBox: findType("RenderBox"),
      RenderObject: findType("RenderObject"),
      RenderObjectElement: findType("RenderObjectElement0"),
      RenderView: findType("RenderView"),
      RestorationBucket: findType("RestorationBucket"),
      RestorationManager: findType("RestorationManager"),
      RootWidget: findType("RootWidget"),
      SamplingClock: findType("SamplingClock"),
      SchedulerBinding: findType("SchedulerBinding"),
      ScribbleClient: findType("ScribbleClient"),
      SemanticsAction: findType("SemanticsAction"),
      SemanticsActionEvent: findType("SemanticsActionEvent"),
      SemanticsNode: findType("SemanticsNode"),
      SemanticsUpdate: findType("SemanticsUpdate0"),
      ServiceExtensionResponse: findType("ServiceExtensionResponse"),
      Size: findType("Size"),
      StackTrace: findType("StackTrace"),
      State_StatefulWidget: findType("State0<StatefulWidget>"),
      Stopwatch: findType("Stopwatch"),
      StreamController_LicenseEntry: findType("StreamController<LicenseEntry>"),
      String: findType("String"),
      SystemContextMenuClient: findType("SystemContextMenuClient"),
      SystemUiOverlayStyle: findType("SystemUiOverlayStyle"),
      TestHistoryEntry: findType("TestHistoryEntry"),
      TextEditingValue: findType("TextEditingValue"),
      TextInputClient: findType("TextInputClient"),
      TextInputConfiguration: findType("TextInputConfiguration"),
      TextInputConnection: findType("TextInputConnection"),
      TextInputControl: findType("TextInputControl"),
      TextRange: findType("TextRange"),
      TextSelection: findType("TextSelection"),
      Timer: findType("Timer"),
      Uint8List: findType("Uint8List"),
      UrlStrategy: findType("UrlStrategy"),
      ValueNotifier_bool: findType("ValueNotifier<bool>"),
      ViewConfiguration: findType("ViewConfiguration"),
      ViewFocusEvent: findType("ViewFocusEvent"),
      Widget: findType("Widget"),
      WidgetsBindingObserver: findType("WidgetsBindingObserver"),
      _ActionsScope: findType("_ActionsScope"),
      _CachedImage: findType("_CachedImage"),
      _FrameCallbackEntry: findType("_FrameCallbackEntry"),
      _GestureArena: findType("_GestureArena"),
      _LiveImage: findType("_LiveImage"),
      _MediaQueryFromView: findType("_MediaQueryFromView"),
      _MouseState: findType("_MouseState"),
      _MouseTrackerUpdateDetails: findType("_MouseTrackerUpdateDetails"),
      _MultiChildComponentWidget: findType("_MultiChildComponentWidget"),
      _PendingImage: findType("_PendingImage"),
      _PipelineOwnerScope: findType("_PipelineOwnerScope"),
      _RawViewInternal: findType("_RawViewInternal"),
      _Resampler: findType("_Resampler"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _TaskEntry_dynamic: findType("_TaskEntry<@>"),
      _ViewScope: findType("_ViewScope"),
      bool: findType("bool"),
      bool_Function_BoxHitTestResult_Offset: findType("bool(BoxHitTestResult,Offset)"),
      bool_Function_FlutterHtmlKeyboardEvent: findType("bool(FlutterHtmlKeyboardEvent)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function_Object: findType("@(Object)"),
      int: findType("int"),
      nullable_AppLifecycleState: findType("AppLifecycleState?"),
      nullable_Brightness: findType("Brightness?"),
      nullable_BrowserHistory: findType("BrowserHistory?"),
      nullable_ByteData: findType("ByteData?"),
      nullable_Completer_nullable_RestorationBucket: findType("Completer<RestorationBucket?>?"),
      nullable_Completer_void: findType("Completer<~>?"),
      nullable_Duration: findType("Duration?"),
      nullable_EdgeInsets: findType("EdgeInsets?"),
      nullable_Element: findType("Element0?"),
      nullable_FocusNode: findType("FocusNode?"),
      nullable_Function: findType("Function?"),
      nullable_HitTestResult: findType("HitTestResult?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptObject: findType("JavaScriptObject?"),
      nullable_List_Locale: findType("List<Locale>?"),
      nullable_List_nullable_Object: findType("List<Object?>?"),
      nullable_List_of_bool_Function_KeyEvent: findType("List<bool(KeyEvent)>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_dynamic_dynamic: findType("Map<@,@>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Matrix4: findType("Matrix40?"),
      nullable_MediaQueryData: findType("MediaQueryData?"),
      nullable_Object: findType("Object?"),
      nullable_Offset: findType("Offset?"),
      nullable_PipelineOwner: findType("PipelineOwner?"),
      nullable_PointerAddedEvent: findType("PointerAddedEvent?"),
      nullable_PointerCancelEvent: findType("PointerCancelEvent?"),
      nullable_PointerDownEvent: findType("PointerDownEvent?"),
      nullable_PointerEnterEvent: findType("PointerEnterEvent?"),
      nullable_PointerEvent: findType("PointerEvent?"),
      nullable_PointerExitEvent: findType("PointerExitEvent?"),
      nullable_PointerHoverEvent: findType("PointerHoverEvent?"),
      nullable_PointerMoveEvent: findType("PointerMoveEvent?"),
      nullable_PointerPanZoomEndEvent: findType("PointerPanZoomEndEvent?"),
      nullable_PointerPanZoomStartEvent: findType("PointerPanZoomStartEvent?"),
      nullable_PointerPanZoomUpdateEvent: findType("PointerPanZoomUpdateEvent?"),
      nullable_PointerRemovedEvent: findType("PointerRemovedEvent?"),
      nullable_PointerScaleEvent: findType("PointerScaleEvent?"),
      nullable_PointerScrollEvent: findType("PointerScrollEvent?"),
      nullable_PointerScrollInertiaCancelEvent: findType("PointerScrollInertiaCancelEvent?"),
      nullable_PointerUpEvent: findType("PointerUpEvent?"),
      nullable_RawKeyEvent: findType("RawKeyEvent?"),
      nullable_RenderObject: findType("RenderObject?"),
      nullable_RenderView: findType("RenderView?"),
      nullable_RestorationBucket: findType("RestorationBucket?"),
      nullable_RestorationManager: findType("RestorationManager?"),
      nullable_RootElement: findType("RootElement?"),
      nullable_SemanticsHandle: findType("SemanticsHandle?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_TextDirection: findType("TextDirection?"),
      nullable_TextInputControl: findType("TextInputControl?"),
      nullable_Timer: findType("Timer?"),
      nullable_Uint8List: findType("Uint8List?"),
      nullable__Future_void: findType("_Future<~>?"),
      nullable_bool: findType("bool?"),
      nullable_bool_Function_KeyData: findType("bool(KeyData)?"),
      nullable_bool_Function_KeyMessage: findType("bool(KeyMessage)?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_nullable_Future_nullable_ByteData_Function_nullable_ByteData: findType("Future<ByteData?>?(ByteData?)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_PointerSignalEvent: findType("~(PointerSignalEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_Duration: findType("~(Duration)"),
      void_Function_Element: findType("~(Element0)"),
      void_Function_FocusHighlightMode: findType("~(FocusHighlightMode)"),
      void_Function_JavaScriptObject: findType("~(JavaScriptObject)"),
      void_Function_LicenseEntry: findType("~(LicenseEntry)"),
      void_Function_List_FrameTiming: findType("~(List<FrameTiming>)"),
      void_Function_PointerEvent: findType("~(PointerEvent)"),
      void_Function_RawKeyEvent: findType("~(RawKeyEvent)"),
      void_Function_RestorationBucket: findType("~(RestorationBucket)"),
      void_Function_nullable_ByteData: findType("~(ByteData?)"),
      void_Function_nullable_Object: findType("~(Object?)"),
      void_Function_void_Function: findType("~(~())")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.AppExitResponse_1 = new D.AppExitResponse(1, "cancel");
    B.BasicMessageChannel_EjH = new D.BasicMessageChannel("flutter/keyevent", E.C_JSONMessageCodec0, type$.BasicMessageChannel_nullable_Object);
    B.BasicMessageChannel_UCU = new D.BasicMessageChannel("flutter/system", E.C_JSONMessageCodec0, type$.BasicMessageChannel_nullable_Object);
    B.BasicMessageChannel_uMb = new D.BasicMessageChannel("flutter/lifecycle", E.C_StringCodec0, C.findType("BasicMessageChannel<String?>"));
    B.BoxConstraints_0_0_0_0 = new D.BoxConstraints(0, 0, 0, 0);
    B.C_BrowserPlatformLocation = new A.BrowserPlatformLocation();
    B.C_HashUrlStrategy = new A.HashUrlStrategy();
    B.C__DefaultBinaryMessenger = new A._DefaultBinaryMessenger();
    B.C__UnspecifiedTextScaler = new A._UnspecifiedTextScaler();
    B.DartPerformanceMode_0 = new D.DartPerformanceMode(0, "balanced");
    B.DebugEngineInitializationState_0 = new A.DebugEngineInitializationState(0, "uninitialized");
    B.DebugEngineInitializationState_1 = new A.DebugEngineInitializationState(1, "initializingServices");
    B.DebugEngineInitializationState_2 = new A.DebugEngineInitializationState(2, "initializedServices");
    B.DebugEngineInitializationState_3 = new A.DebugEngineInitializationState(3, "initializingUi");
    B.DebugEngineInitializationState_4 = new A.DebugEngineInitializationState(4, "initialized");
    B.DeviceGestureSettings_18 = new A.DeviceGestureSettings(18);
    B.Duration_16667 = new C.Duration(16667);
    B.Duration_m38000 = new C.Duration(-38000);
    B.FloatingCursorDragState_0 = new A.FloatingCursorDragState(0, "Start");
    B.FloatingCursorDragState_1 = new A.FloatingCursorDragState(1, "Update");
    B.FloatingCursorDragState_2 = new A.FloatingCursorDragState(2, "End");
    B.FocusHighlightStrategy_0 = new A.FocusHighlightStrategy(0, "automatic");
    B.FocusHighlightStrategy_1 = new A.FocusHighlightStrategy(1, "alwaysTouch");
    B.FocusHighlightStrategy_2 = new A.FocusHighlightStrategy(2, "alwaysTraditional");
    B.FoundationServiceExtensions_2 = new A.FoundationServiceExtensions(2, "connectedVmServiceUri");
    B.FoundationServiceExtensions_3 = new A.FoundationServiceExtensions(3, "activeDevToolsServerAddress");
    B.KeyDataTransitMode_0 = new A.KeyDataTransitMode(0, "rawKeyData");
    B.KeyDataTransitMode_1 = new A.KeyDataTransitMode(1, "keyDataThenRawKeyData");
    B.KeyEventType_0 = new A.KeyEventType(0, "down");
    B.KeyEventDeviceType_0 = new A.KeyEventDeviceType(0, "keyboard");
    B.KeyData_65R = new A.KeyData(F.Duration_0, B.KeyEventType_0, 0, 0, null, false);
    B.KeyEventType_1 = new A.KeyEventType(1, "up");
    B.KeyEventType_2 = new A.KeyEventType(2, "repeat");
    B.LogicalKeyboardKey_4294967564 = new D.LogicalKeyboardKey(4294967564);
    B.KeyboardLockMode_Y98 = new D.KeyboardLockMode(B.LogicalKeyboardKey_4294967564, 1, "scrollLock");
    B.LogicalKeyboardKey_4294967556 = new D.LogicalKeyboardKey(4294967556);
    B.KeyboardLockMode_kyW = new D.KeyboardLockMode(B.LogicalKeyboardKey_4294967556, 2, "capsLock");
    B.KeyboardSide_0 = new A.KeyboardSide(0, "any");
    B.KeyboardSide_3 = new A.KeyboardSide(3, "all");
    B.List_Gbn = C._setArrayType(makeConstList([E.AppLifecycleState_0, E.AppLifecycleState_1, E.AppLifecycleState_2, E.AppLifecycleState_3, E.AppLifecycleState_4]), type$.JSArray_AppLifecycleState);
    B.SwipeEdge_0 = new A.SwipeEdge(0, "left");
    B.SwipeEdge_1 = new A.SwipeEdge(1, "right");
    B.List_SwipeEdge_0_SwipeEdge_1 = C._setArrayType(makeConstList([B.SwipeEdge_0, B.SwipeEdge_1]), C.findType("JSArray<SwipeEdge>"));
    B.List_cRy = C._setArrayType(makeConstList(["text", "multiline", "number", "phone", "datetime", "emailAddress", "url", "visiblePassword", "name", "address", "none"]), type$.JSArray_String);
    B.List_empty5 = C._setArrayType(makeConstList([]), type$.JSArray_AppLifecycleState);
    B.ModifierKey_0 = new A.ModifierKey(0, "controlModifier");
    B.ModifierKey_1 = new A.ModifierKey(1, "shiftModifier");
    B.ModifierKey_2 = new A.ModifierKey(2, "altModifier");
    B.ModifierKey_3 = new A.ModifierKey(3, "metaModifier");
    B.ModifierKey_4 = new A.ModifierKey(4, "capsLockModifier");
    B.ModifierKey_5 = new A.ModifierKey(5, "numLockModifier");
    B.ModifierKey_6 = new A.ModifierKey(6, "scrollLockModifier");
    B.ModifierKey_7 = new A.ModifierKey(7, "functionModifier");
    B.ModifierKey_8 = new A.ModifierKey(8, "symbolModifier");
    B.List_jV0 = C._setArrayType(makeConstList([B.ModifierKey_0, B.ModifierKey_1, B.ModifierKey_2, B.ModifierKey_3, B.ModifierKey_4, B.ModifierKey_5, B.ModifierKey_6, B.ModifierKey_7, B.ModifierKey_8]), C.findType("JSArray<ModifierKey>"));
    B.LogicalKeyboardKey_4294967558 = new D.LogicalKeyboardKey(4294967558);
    B.LogicalKeyboardKey_42 = new D.LogicalKeyboardKey(42);
    B.LogicalKeyboardKey_8589935146 = new D.LogicalKeyboardKey(8589935146);
    B.List_G7x = C._setArrayType(makeConstList([B.LogicalKeyboardKey_42, null, null, B.LogicalKeyboardKey_8589935146]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_43 = new D.LogicalKeyboardKey(43);
    B.LogicalKeyboardKey_8589935147 = new D.LogicalKeyboardKey(8589935147);
    B.List_G7x0 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_43, null, null, B.LogicalKeyboardKey_8589935147]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_45 = new D.LogicalKeyboardKey(45);
    B.LogicalKeyboardKey_8589935149 = new D.LogicalKeyboardKey(8589935149);
    B.List_G7x1 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_45, null, null, B.LogicalKeyboardKey_8589935149]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_46 = new D.LogicalKeyboardKey(46);
    B.List_G7x2 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_46, null, null, E.LogicalKeyboardKey_8589935150]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_47 = new D.LogicalKeyboardKey(47);
    B.LogicalKeyboardKey_8589935151 = new D.LogicalKeyboardKey(8589935151);
    B.List_G7x3 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_47, null, null, B.LogicalKeyboardKey_8589935151]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_48 = new D.LogicalKeyboardKey(48);
    B.LogicalKeyboardKey_8589935152 = new D.LogicalKeyboardKey(8589935152);
    B.List_eAf = C._setArrayType(makeConstList([B.LogicalKeyboardKey_48, null, null, B.LogicalKeyboardKey_8589935152]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_49 = new D.LogicalKeyboardKey(49);
    B.List_eAf0 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_49, null, null, E.LogicalKeyboardKey_8589935153]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_50 = new D.LogicalKeyboardKey(50);
    B.List_eAf1 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_50, null, null, E.LogicalKeyboardKey_8589935154]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_51 = new D.LogicalKeyboardKey(51);
    B.List_eAf2 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_51, null, null, E.LogicalKeyboardKey_8589935155]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_52 = new D.LogicalKeyboardKey(52);
    B.List_eAf3 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_52, null, null, E.LogicalKeyboardKey_8589935156]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_53 = new D.LogicalKeyboardKey(53);
    B.LogicalKeyboardKey_8589935157 = new D.LogicalKeyboardKey(8589935157);
    B.List_eAf4 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_53, null, null, B.LogicalKeyboardKey_8589935157]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_54 = new D.LogicalKeyboardKey(54);
    B.List_eAf5 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_54, null, null, E.LogicalKeyboardKey_8589935158]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_55 = new D.LogicalKeyboardKey(55);
    B.List_eAf6 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_55, null, null, E.LogicalKeyboardKey_8589935159]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_56 = new D.LogicalKeyboardKey(56);
    B.List_Y2Z = C._setArrayType(makeConstList([B.LogicalKeyboardKey_56, null, null, E.LogicalKeyboardKey_8589935160]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_57 = new D.LogicalKeyboardKey(57);
    B.List_Y2Z0 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_57, null, null, E.LogicalKeyboardKey_8589935161]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_uXm = C._setArrayType(makeConstList([E.LogicalKeyboardKey_8589934852, E.LogicalKeyboardKey_8589934852, E.LogicalKeyboardKey_8589934853, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_4294967555 = new D.LogicalKeyboardKey(4294967555);
    B.List_e1W = C._setArrayType(makeConstList([B.LogicalKeyboardKey_4294967555, null, B.LogicalKeyboardKey_4294967555, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_699 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968065, null, null, E.LogicalKeyboardKey_8589935154]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6990 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968066, null, null, E.LogicalKeyboardKey_8589935156]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6991 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968067, null, null, E.LogicalKeyboardKey_8589935158]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_4YZ = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968068, null, null, E.LogicalKeyboardKey_8589935160]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_4294968321 = new D.LogicalKeyboardKey(4294968321);
    B.List_8Ws = C._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968321, null, null, B.LogicalKeyboardKey_8589935157]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_uXm0 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_8589934848, E.LogicalKeyboardKey_8589934848, E.LogicalKeyboardKey_8589934849, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_81A = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294967423, null, null, E.LogicalKeyboardKey_8589935150]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6992 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968069, null, null, E.LogicalKeyboardKey_8589935153]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_61T = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294967309, null, null, E.LogicalKeyboardKey_8589935117]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6993 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968070, null, null, E.LogicalKeyboardKey_8589935159]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_4294968327 = new D.LogicalKeyboardKey(4294968327);
    B.List_8Ws0 = C._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968327, null, null, B.LogicalKeyboardKey_8589935152]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_uXm1 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_8589934854, E.LogicalKeyboardKey_8589934854, E.LogicalKeyboardKey_8589934855, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6994 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968071, null, null, E.LogicalKeyboardKey_8589935155]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_3hg = C._setArrayType(makeConstList([E.LogicalKeyboardKey_4294968072, null, null, E.LogicalKeyboardKey_8589935161]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_uXm2 = C._setArrayType(makeConstList([E.LogicalKeyboardKey_8589934850, E.LogicalKeyboardKey_8589934850, E.LogicalKeyboardKey_8589934851, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.Map_08qt = new C.GeneralConstantMap(["*", B.List_G7x, "+", B.List_G7x0, "-", B.List_G7x1, ".", B.List_G7x2, "/", B.List_G7x3, "0", B.List_eAf, "1", B.List_eAf0, "2", B.List_eAf1, "3", B.List_eAf2, "4", B.List_eAf3, "5", B.List_eAf4, "6", B.List_eAf5, "7", B.List_eAf6, "8", B.List_Y2Z, "9", B.List_Y2Z0, "Alt", B.List_uXm, "AltGraph", B.List_e1W, "ArrowDown", B.List_699, "ArrowLeft", B.List_6990, "ArrowRight", B.List_6991, "ArrowUp", B.List_4YZ, "Clear", B.List_8Ws, "Control", B.List_uXm0, "Delete", B.List_81A, "End", B.List_6992, "Enter", B.List_61T, "Home", B.List_6993, "Insert", B.List_8Ws0, "Meta", B.List_uXm1, "PageDown", B.List_6994, "PageUp", B.List_3hg, "Shift", B.List_uXm2], C.findType("GeneralConstantMap<String,List<LogicalKeyboardKey?>>"));
    B.List_42_null_null_8589935146 = C._setArrayType(makeConstList([42, null, null, 8589935146]), type$.JSArray_nullable_int);
    B.List_43_null_null_8589935147 = C._setArrayType(makeConstList([43, null, null, 8589935147]), type$.JSArray_nullable_int);
    B.List_45_null_null_8589935149 = C._setArrayType(makeConstList([45, null, null, 8589935149]), type$.JSArray_nullable_int);
    B.List_46_null_null_8589935150 = C._setArrayType(makeConstList([46, null, null, 8589935150]), type$.JSArray_nullable_int);
    B.List_47_null_null_8589935151 = C._setArrayType(makeConstList([47, null, null, 8589935151]), type$.JSArray_nullable_int);
    B.List_48_null_null_8589935152 = C._setArrayType(makeConstList([48, null, null, 8589935152]), type$.JSArray_nullable_int);
    B.List_49_null_null_8589935153 = C._setArrayType(makeConstList([49, null, null, 8589935153]), type$.JSArray_nullable_int);
    B.List_50_null_null_8589935154 = C._setArrayType(makeConstList([50, null, null, 8589935154]), type$.JSArray_nullable_int);
    B.List_51_null_null_8589935155 = C._setArrayType(makeConstList([51, null, null, 8589935155]), type$.JSArray_nullable_int);
    B.List_52_null_null_8589935156 = C._setArrayType(makeConstList([52, null, null, 8589935156]), type$.JSArray_nullable_int);
    B.List_53_null_null_8589935157 = C._setArrayType(makeConstList([53, null, null, 8589935157]), type$.JSArray_nullable_int);
    B.List_54_null_null_8589935158 = C._setArrayType(makeConstList([54, null, null, 8589935158]), type$.JSArray_nullable_int);
    B.List_55_null_null_8589935159 = C._setArrayType(makeConstList([55, null, null, 8589935159]), type$.JSArray_nullable_int);
    B.List_56_null_null_8589935160 = C._setArrayType(makeConstList([56, null, null, 8589935160]), type$.JSArray_nullable_int);
    B.List_57_null_null_8589935161 = C._setArrayType(makeConstList([57, null, null, 8589935161]), type$.JSArray_nullable_int);
    B.List_OvN = C._setArrayType(makeConstList([8589934852, 8589934852, 8589934853, null]), type$.JSArray_nullable_int);
    B.List_4294967555_null_4294967555_null = C._setArrayType(makeConstList([4294967555, null, 4294967555, null]), type$.JSArray_nullable_int);
    B.List_4294968065_null_null_8589935154 = C._setArrayType(makeConstList([4294968065, null, null, 8589935154]), type$.JSArray_nullable_int);
    B.List_4294968066_null_null_8589935156 = C._setArrayType(makeConstList([4294968066, null, null, 8589935156]), type$.JSArray_nullable_int);
    B.List_4294968067_null_null_8589935158 = C._setArrayType(makeConstList([4294968067, null, null, 8589935158]), type$.JSArray_nullable_int);
    B.List_4294968068_null_null_8589935160 = C._setArrayType(makeConstList([4294968068, null, null, 8589935160]), type$.JSArray_nullable_int);
    B.List_4294968321_null_null_8589935157 = C._setArrayType(makeConstList([4294968321, null, null, 8589935157]), type$.JSArray_nullable_int);
    B.List_OvN0 = C._setArrayType(makeConstList([8589934848, 8589934848, 8589934849, null]), type$.JSArray_nullable_int);
    B.List_4294967423_null_null_8589935150 = C._setArrayType(makeConstList([4294967423, null, null, 8589935150]), type$.JSArray_nullable_int);
    B.List_4294968069_null_null_8589935153 = C._setArrayType(makeConstList([4294968069, null, null, 8589935153]), type$.JSArray_nullable_int);
    B.List_4294967309_null_null_8589935117 = C._setArrayType(makeConstList([4294967309, null, null, 8589935117]), type$.JSArray_nullable_int);
    B.List_4294968070_null_null_8589935159 = C._setArrayType(makeConstList([4294968070, null, null, 8589935159]), type$.JSArray_nullable_int);
    B.List_4294968327_null_null_8589935152 = C._setArrayType(makeConstList([4294968327, null, null, 8589935152]), type$.JSArray_nullable_int);
    B.List_OvN1 = C._setArrayType(makeConstList([8589934854, 8589934854, 8589934855, null]), type$.JSArray_nullable_int);
    B.List_4294968071_null_null_8589935155 = C._setArrayType(makeConstList([4294968071, null, null, 8589935155]), type$.JSArray_nullable_int);
    B.List_4294968072_null_null_8589935161 = C._setArrayType(makeConstList([4294968072, null, null, 8589935161]), type$.JSArray_nullable_int);
    B.List_OvN2 = C._setArrayType(makeConstList([8589934850, 8589934850, 8589934851, null]), type$.JSArray_nullable_int);
    B.Map_0GYb = new C.GeneralConstantMap(["*", B.List_42_null_null_8589935146, "+", B.List_43_null_null_8589935147, "-", B.List_45_null_null_8589935149, ".", B.List_46_null_null_8589935150, "/", B.List_47_null_null_8589935151, "0", B.List_48_null_null_8589935152, "1", B.List_49_null_null_8589935153, "2", B.List_50_null_null_8589935154, "3", B.List_51_null_null_8589935155, "4", B.List_52_null_null_8589935156, "5", B.List_53_null_null_8589935157, "6", B.List_54_null_null_8589935158, "7", B.List_55_null_null_8589935159, "8", B.List_56_null_null_8589935160, "9", B.List_57_null_null_8589935161, "Alt", B.List_OvN, "AltGraph", B.List_4294967555_null_4294967555_null, "ArrowDown", B.List_4294968065_null_null_8589935154, "ArrowLeft", B.List_4294968066_null_null_8589935156, "ArrowRight", B.List_4294968067_null_null_8589935158, "ArrowUp", B.List_4294968068_null_null_8589935160, "Clear", B.List_4294968321_null_null_8589935157, "Control", B.List_OvN0, "Delete", B.List_4294967423_null_null_8589935150, "End", B.List_4294968069_null_null_8589935153, "Enter", B.List_4294967309_null_null_8589935117, "Home", B.List_4294968070_null_null_8589935159, "Insert", B.List_4294968327_null_null_8589935152, "Meta", B.List_OvN1, "PageDown", B.List_4294968071_null_null_8589935155, "PageUp", B.List_4294968072_null_null_8589935161, "Shift", B.List_OvN2], C.findType("GeneralConstantMap<String,List<int?>>"));
    B.LogicalKeyboardKey_33 = new D.LogicalKeyboardKey(33);
    B.LogicalKeyboardKey_34 = new D.LogicalKeyboardKey(34);
    B.LogicalKeyboardKey_35 = new D.LogicalKeyboardKey(35);
    B.LogicalKeyboardKey_36 = new D.LogicalKeyboardKey(36);
    B.LogicalKeyboardKey_37 = new D.LogicalKeyboardKey(37);
    B.LogicalKeyboardKey_38 = new D.LogicalKeyboardKey(38);
    B.LogicalKeyboardKey_39 = new D.LogicalKeyboardKey(39);
    B.LogicalKeyboardKey_40 = new D.LogicalKeyboardKey(40);
    B.LogicalKeyboardKey_41 = new D.LogicalKeyboardKey(41);
    B.LogicalKeyboardKey_44 = new D.LogicalKeyboardKey(44);
    B.LogicalKeyboardKey_58 = new D.LogicalKeyboardKey(58);
    B.LogicalKeyboardKey_59 = new D.LogicalKeyboardKey(59);
    B.LogicalKeyboardKey_60 = new D.LogicalKeyboardKey(60);
    B.LogicalKeyboardKey_61 = new D.LogicalKeyboardKey(61);
    B.LogicalKeyboardKey_62 = new D.LogicalKeyboardKey(62);
    B.LogicalKeyboardKey_63 = new D.LogicalKeyboardKey(63);
    B.LogicalKeyboardKey_64 = new D.LogicalKeyboardKey(64);
    B.LogicalKeyboardKey_91 = new D.LogicalKeyboardKey(91);
    B.LogicalKeyboardKey_92 = new D.LogicalKeyboardKey(92);
    B.LogicalKeyboardKey_93 = new D.LogicalKeyboardKey(93);
    B.LogicalKeyboardKey_94 = new D.LogicalKeyboardKey(94);
    B.LogicalKeyboardKey_95 = new D.LogicalKeyboardKey(95);
    B.LogicalKeyboardKey_96 = new D.LogicalKeyboardKey(96);
    B.LogicalKeyboardKey_100 = new D.LogicalKeyboardKey(100);
    B.LogicalKeyboardKey_103 = new D.LogicalKeyboardKey(103);
    B.LogicalKeyboardKey_104 = new D.LogicalKeyboardKey(104);
    B.LogicalKeyboardKey_105 = new D.LogicalKeyboardKey(105);
    B.LogicalKeyboardKey_106 = new D.LogicalKeyboardKey(106);
    B.LogicalKeyboardKey_107 = new D.LogicalKeyboardKey(107);
    B.LogicalKeyboardKey_108 = new D.LogicalKeyboardKey(108);
    B.LogicalKeyboardKey_109 = new D.LogicalKeyboardKey(109);
    B.LogicalKeyboardKey_111 = new D.LogicalKeyboardKey(111);
    B.LogicalKeyboardKey_113 = new D.LogicalKeyboardKey(113);
    B.LogicalKeyboardKey_114 = new D.LogicalKeyboardKey(114);
    B.LogicalKeyboardKey_115 = new D.LogicalKeyboardKey(115);
    B.LogicalKeyboardKey_117 = new D.LogicalKeyboardKey(117);
    B.LogicalKeyboardKey_119 = new D.LogicalKeyboardKey(119);
    B.LogicalKeyboardKey_121 = new D.LogicalKeyboardKey(121);
    B.LogicalKeyboardKey_123 = new D.LogicalKeyboardKey(123);
    B.LogicalKeyboardKey_124 = new D.LogicalKeyboardKey(124);
    B.LogicalKeyboardKey_125 = new D.LogicalKeyboardKey(125);
    B.LogicalKeyboardKey_126 = new D.LogicalKeyboardKey(126);
    B.LogicalKeyboardKey_4294967297 = new D.LogicalKeyboardKey(4294967297);
    B.LogicalKeyboardKey_4294967553 = new D.LogicalKeyboardKey(4294967553);
    B.LogicalKeyboardKey_4294967559 = new D.LogicalKeyboardKey(4294967559);
    B.LogicalKeyboardKey_4294967560 = new D.LogicalKeyboardKey(4294967560);
    B.LogicalKeyboardKey_4294967566 = new D.LogicalKeyboardKey(4294967566);
    B.LogicalKeyboardKey_4294967567 = new D.LogicalKeyboardKey(4294967567);
    B.LogicalKeyboardKey_4294967568 = new D.LogicalKeyboardKey(4294967568);
    B.LogicalKeyboardKey_4294967569 = new D.LogicalKeyboardKey(4294967569);
    B.LogicalKeyboardKey_4294968322 = new D.LogicalKeyboardKey(4294968322);
    B.LogicalKeyboardKey_4294968323 = new D.LogicalKeyboardKey(4294968323);
    B.LogicalKeyboardKey_4294968324 = new D.LogicalKeyboardKey(4294968324);
    B.LogicalKeyboardKey_4294968325 = new D.LogicalKeyboardKey(4294968325);
    B.LogicalKeyboardKey_4294968326 = new D.LogicalKeyboardKey(4294968326);
    B.LogicalKeyboardKey_4294968328 = new D.LogicalKeyboardKey(4294968328);
    B.LogicalKeyboardKey_4294968329 = new D.LogicalKeyboardKey(4294968329);
    B.LogicalKeyboardKey_4294968330 = new D.LogicalKeyboardKey(4294968330);
    B.LogicalKeyboardKey_4294968577 = new D.LogicalKeyboardKey(4294968577);
    B.LogicalKeyboardKey_4294968578 = new D.LogicalKeyboardKey(4294968578);
    B.LogicalKeyboardKey_4294968579 = new D.LogicalKeyboardKey(4294968579);
    B.LogicalKeyboardKey_4294968580 = new D.LogicalKeyboardKey(4294968580);
    B.LogicalKeyboardKey_4294968581 = new D.LogicalKeyboardKey(4294968581);
    B.LogicalKeyboardKey_4294968582 = new D.LogicalKeyboardKey(4294968582);
    B.LogicalKeyboardKey_4294968583 = new D.LogicalKeyboardKey(4294968583);
    B.LogicalKeyboardKey_4294968584 = new D.LogicalKeyboardKey(4294968584);
    B.LogicalKeyboardKey_4294968585 = new D.LogicalKeyboardKey(4294968585);
    B.LogicalKeyboardKey_4294968586 = new D.LogicalKeyboardKey(4294968586);
    B.LogicalKeyboardKey_4294968587 = new D.LogicalKeyboardKey(4294968587);
    B.LogicalKeyboardKey_4294968589 = new D.LogicalKeyboardKey(4294968589);
    B.LogicalKeyboardKey_4294968590 = new D.LogicalKeyboardKey(4294968590);
    B.LogicalKeyboardKey_4294968833 = new D.LogicalKeyboardKey(4294968833);
    B.LogicalKeyboardKey_4294968834 = new D.LogicalKeyboardKey(4294968834);
    B.LogicalKeyboardKey_4294968835 = new D.LogicalKeyboardKey(4294968835);
    B.LogicalKeyboardKey_4294968836 = new D.LogicalKeyboardKey(4294968836);
    B.LogicalKeyboardKey_4294968837 = new D.LogicalKeyboardKey(4294968837);
    B.LogicalKeyboardKey_4294968838 = new D.LogicalKeyboardKey(4294968838);
    B.LogicalKeyboardKey_4294968839 = new D.LogicalKeyboardKey(4294968839);
    B.LogicalKeyboardKey_4294968840 = new D.LogicalKeyboardKey(4294968840);
    B.LogicalKeyboardKey_4294968841 = new D.LogicalKeyboardKey(4294968841);
    B.LogicalKeyboardKey_4294968842 = new D.LogicalKeyboardKey(4294968842);
    B.LogicalKeyboardKey_4294968843 = new D.LogicalKeyboardKey(4294968843);
    B.LogicalKeyboardKey_4294969089 = new D.LogicalKeyboardKey(4294969089);
    B.LogicalKeyboardKey_4294969090 = new D.LogicalKeyboardKey(4294969090);
    B.LogicalKeyboardKey_4294969091 = new D.LogicalKeyboardKey(4294969091);
    B.LogicalKeyboardKey_4294969092 = new D.LogicalKeyboardKey(4294969092);
    B.LogicalKeyboardKey_4294969093 = new D.LogicalKeyboardKey(4294969093);
    B.LogicalKeyboardKey_4294969094 = new D.LogicalKeyboardKey(4294969094);
    B.LogicalKeyboardKey_4294969095 = new D.LogicalKeyboardKey(4294969095);
    B.LogicalKeyboardKey_4294969096 = new D.LogicalKeyboardKey(4294969096);
    B.LogicalKeyboardKey_4294969097 = new D.LogicalKeyboardKey(4294969097);
    B.LogicalKeyboardKey_4294969098 = new D.LogicalKeyboardKey(4294969098);
    B.LogicalKeyboardKey_4294969099 = new D.LogicalKeyboardKey(4294969099);
    B.LogicalKeyboardKey_4294969100 = new D.LogicalKeyboardKey(4294969100);
    B.LogicalKeyboardKey_4294969101 = new D.LogicalKeyboardKey(4294969101);
    B.LogicalKeyboardKey_4294969102 = new D.LogicalKeyboardKey(4294969102);
    B.LogicalKeyboardKey_4294969103 = new D.LogicalKeyboardKey(4294969103);
    B.LogicalKeyboardKey_4294969104 = new D.LogicalKeyboardKey(4294969104);
    B.LogicalKeyboardKey_4294969105 = new D.LogicalKeyboardKey(4294969105);
    B.LogicalKeyboardKey_4294969106 = new D.LogicalKeyboardKey(4294969106);
    B.LogicalKeyboardKey_4294969107 = new D.LogicalKeyboardKey(4294969107);
    B.LogicalKeyboardKey_4294969108 = new D.LogicalKeyboardKey(4294969108);
    B.LogicalKeyboardKey_4294969109 = new D.LogicalKeyboardKey(4294969109);
    B.LogicalKeyboardKey_4294969110 = new D.LogicalKeyboardKey(4294969110);
    B.LogicalKeyboardKey_4294969111 = new D.LogicalKeyboardKey(4294969111);
    B.LogicalKeyboardKey_4294969112 = new D.LogicalKeyboardKey(4294969112);
    B.LogicalKeyboardKey_4294969113 = new D.LogicalKeyboardKey(4294969113);
    B.LogicalKeyboardKey_4294969114 = new D.LogicalKeyboardKey(4294969114);
    B.LogicalKeyboardKey_4294969115 = new D.LogicalKeyboardKey(4294969115);
    B.LogicalKeyboardKey_4294969116 = new D.LogicalKeyboardKey(4294969116);
    B.LogicalKeyboardKey_4294969117 = new D.LogicalKeyboardKey(4294969117);
    B.LogicalKeyboardKey_4294969345 = new D.LogicalKeyboardKey(4294969345);
    B.LogicalKeyboardKey_4294969346 = new D.LogicalKeyboardKey(4294969346);
    B.LogicalKeyboardKey_4294969347 = new D.LogicalKeyboardKey(4294969347);
    B.LogicalKeyboardKey_4294969348 = new D.LogicalKeyboardKey(4294969348);
    B.LogicalKeyboardKey_4294969349 = new D.LogicalKeyboardKey(4294969349);
    B.LogicalKeyboardKey_4294969350 = new D.LogicalKeyboardKey(4294969350);
    B.LogicalKeyboardKey_4294969351 = new D.LogicalKeyboardKey(4294969351);
    B.LogicalKeyboardKey_4294969352 = new D.LogicalKeyboardKey(4294969352);
    B.LogicalKeyboardKey_4294969353 = new D.LogicalKeyboardKey(4294969353);
    B.LogicalKeyboardKey_4294969354 = new D.LogicalKeyboardKey(4294969354);
    B.LogicalKeyboardKey_4294969355 = new D.LogicalKeyboardKey(4294969355);
    B.LogicalKeyboardKey_4294969356 = new D.LogicalKeyboardKey(4294969356);
    B.LogicalKeyboardKey_4294969357 = new D.LogicalKeyboardKey(4294969357);
    B.LogicalKeyboardKey_4294969358 = new D.LogicalKeyboardKey(4294969358);
    B.LogicalKeyboardKey_4294969359 = new D.LogicalKeyboardKey(4294969359);
    B.LogicalKeyboardKey_4294969360 = new D.LogicalKeyboardKey(4294969360);
    B.LogicalKeyboardKey_4294969361 = new D.LogicalKeyboardKey(4294969361);
    B.LogicalKeyboardKey_4294969362 = new D.LogicalKeyboardKey(4294969362);
    B.LogicalKeyboardKey_4294969363 = new D.LogicalKeyboardKey(4294969363);
    B.LogicalKeyboardKey_4294969364 = new D.LogicalKeyboardKey(4294969364);
    B.LogicalKeyboardKey_4294969365 = new D.LogicalKeyboardKey(4294969365);
    B.LogicalKeyboardKey_4294969366 = new D.LogicalKeyboardKey(4294969366);
    B.LogicalKeyboardKey_4294969367 = new D.LogicalKeyboardKey(4294969367);
    B.LogicalKeyboardKey_4294969368 = new D.LogicalKeyboardKey(4294969368);
    B.LogicalKeyboardKey_4294969601 = new D.LogicalKeyboardKey(4294969601);
    B.LogicalKeyboardKey_4294969602 = new D.LogicalKeyboardKey(4294969602);
    B.LogicalKeyboardKey_4294969603 = new D.LogicalKeyboardKey(4294969603);
    B.LogicalKeyboardKey_4294969604 = new D.LogicalKeyboardKey(4294969604);
    B.LogicalKeyboardKey_4294969605 = new D.LogicalKeyboardKey(4294969605);
    B.LogicalKeyboardKey_4294969606 = new D.LogicalKeyboardKey(4294969606);
    B.LogicalKeyboardKey_4294969607 = new D.LogicalKeyboardKey(4294969607);
    B.LogicalKeyboardKey_4294969608 = new D.LogicalKeyboardKey(4294969608);
    B.LogicalKeyboardKey_4294969857 = new D.LogicalKeyboardKey(4294969857);
    B.LogicalKeyboardKey_4294969858 = new D.LogicalKeyboardKey(4294969858);
    B.LogicalKeyboardKey_4294969859 = new D.LogicalKeyboardKey(4294969859);
    B.LogicalKeyboardKey_4294969860 = new D.LogicalKeyboardKey(4294969860);
    B.LogicalKeyboardKey_4294969861 = new D.LogicalKeyboardKey(4294969861);
    B.LogicalKeyboardKey_4294969863 = new D.LogicalKeyboardKey(4294969863);
    B.LogicalKeyboardKey_4294969864 = new D.LogicalKeyboardKey(4294969864);
    B.LogicalKeyboardKey_4294969865 = new D.LogicalKeyboardKey(4294969865);
    B.LogicalKeyboardKey_4294969866 = new D.LogicalKeyboardKey(4294969866);
    B.LogicalKeyboardKey_4294969867 = new D.LogicalKeyboardKey(4294969867);
    B.LogicalKeyboardKey_4294969868 = new D.LogicalKeyboardKey(4294969868);
    B.LogicalKeyboardKey_4294969869 = new D.LogicalKeyboardKey(4294969869);
    B.LogicalKeyboardKey_4294969870 = new D.LogicalKeyboardKey(4294969870);
    B.LogicalKeyboardKey_4294969871 = new D.LogicalKeyboardKey(4294969871);
    B.LogicalKeyboardKey_4294969872 = new D.LogicalKeyboardKey(4294969872);
    B.LogicalKeyboardKey_4294969873 = new D.LogicalKeyboardKey(4294969873);
    B.LogicalKeyboardKey_4294970113 = new D.LogicalKeyboardKey(4294970113);
    B.LogicalKeyboardKey_4294970114 = new D.LogicalKeyboardKey(4294970114);
    B.LogicalKeyboardKey_4294970115 = new D.LogicalKeyboardKey(4294970115);
    B.LogicalKeyboardKey_4294970116 = new D.LogicalKeyboardKey(4294970116);
    B.LogicalKeyboardKey_4294970117 = new D.LogicalKeyboardKey(4294970117);
    B.LogicalKeyboardKey_4294970118 = new D.LogicalKeyboardKey(4294970118);
    B.LogicalKeyboardKey_4294970119 = new D.LogicalKeyboardKey(4294970119);
    B.LogicalKeyboardKey_4294970120 = new D.LogicalKeyboardKey(4294970120);
    B.LogicalKeyboardKey_4294970121 = new D.LogicalKeyboardKey(4294970121);
    B.LogicalKeyboardKey_4294970122 = new D.LogicalKeyboardKey(4294970122);
    B.LogicalKeyboardKey_4294970123 = new D.LogicalKeyboardKey(4294970123);
    B.LogicalKeyboardKey_4294970124 = new D.LogicalKeyboardKey(4294970124);
    B.LogicalKeyboardKey_4294970125 = new D.LogicalKeyboardKey(4294970125);
    B.LogicalKeyboardKey_4294970126 = new D.LogicalKeyboardKey(4294970126);
    B.LogicalKeyboardKey_4294970127 = new D.LogicalKeyboardKey(4294970127);
    B.LogicalKeyboardKey_4294970369 = new D.LogicalKeyboardKey(4294970369);
    B.LogicalKeyboardKey_4294970370 = new D.LogicalKeyboardKey(4294970370);
    B.LogicalKeyboardKey_4294970371 = new D.LogicalKeyboardKey(4294970371);
    B.LogicalKeyboardKey_4294970372 = new D.LogicalKeyboardKey(4294970372);
    B.LogicalKeyboardKey_4294970373 = new D.LogicalKeyboardKey(4294970373);
    B.LogicalKeyboardKey_4294970374 = new D.LogicalKeyboardKey(4294970374);
    B.LogicalKeyboardKey_4294970375 = new D.LogicalKeyboardKey(4294970375);
    B.LogicalKeyboardKey_4294970625 = new D.LogicalKeyboardKey(4294970625);
    B.LogicalKeyboardKey_4294970626 = new D.LogicalKeyboardKey(4294970626);
    B.LogicalKeyboardKey_4294970627 = new D.LogicalKeyboardKey(4294970627);
    B.LogicalKeyboardKey_4294970628 = new D.LogicalKeyboardKey(4294970628);
    B.LogicalKeyboardKey_4294970629 = new D.LogicalKeyboardKey(4294970629);
    B.LogicalKeyboardKey_4294970630 = new D.LogicalKeyboardKey(4294970630);
    B.LogicalKeyboardKey_4294970631 = new D.LogicalKeyboardKey(4294970631);
    B.LogicalKeyboardKey_4294970632 = new D.LogicalKeyboardKey(4294970632);
    B.LogicalKeyboardKey_4294970633 = new D.LogicalKeyboardKey(4294970633);
    B.LogicalKeyboardKey_4294970634 = new D.LogicalKeyboardKey(4294970634);
    B.LogicalKeyboardKey_4294970635 = new D.LogicalKeyboardKey(4294970635);
    B.LogicalKeyboardKey_4294970636 = new D.LogicalKeyboardKey(4294970636);
    B.LogicalKeyboardKey_4294970637 = new D.LogicalKeyboardKey(4294970637);
    B.LogicalKeyboardKey_4294970638 = new D.LogicalKeyboardKey(4294970638);
    B.LogicalKeyboardKey_4294970639 = new D.LogicalKeyboardKey(4294970639);
    B.LogicalKeyboardKey_4294970640 = new D.LogicalKeyboardKey(4294970640);
    B.LogicalKeyboardKey_4294970641 = new D.LogicalKeyboardKey(4294970641);
    B.LogicalKeyboardKey_4294970642 = new D.LogicalKeyboardKey(4294970642);
    B.LogicalKeyboardKey_4294970643 = new D.LogicalKeyboardKey(4294970643);
    B.LogicalKeyboardKey_4294970644 = new D.LogicalKeyboardKey(4294970644);
    B.LogicalKeyboardKey_4294970645 = new D.LogicalKeyboardKey(4294970645);
    B.LogicalKeyboardKey_4294970646 = new D.LogicalKeyboardKey(4294970646);
    B.LogicalKeyboardKey_4294970647 = new D.LogicalKeyboardKey(4294970647);
    B.LogicalKeyboardKey_4294970648 = new D.LogicalKeyboardKey(4294970648);
    B.LogicalKeyboardKey_4294970649 = new D.LogicalKeyboardKey(4294970649);
    B.LogicalKeyboardKey_4294970650 = new D.LogicalKeyboardKey(4294970650);
    B.LogicalKeyboardKey_4294970651 = new D.LogicalKeyboardKey(4294970651);
    B.LogicalKeyboardKey_4294970652 = new D.LogicalKeyboardKey(4294970652);
    B.LogicalKeyboardKey_4294970653 = new D.LogicalKeyboardKey(4294970653);
    B.LogicalKeyboardKey_4294970654 = new D.LogicalKeyboardKey(4294970654);
    B.LogicalKeyboardKey_4294970655 = new D.LogicalKeyboardKey(4294970655);
    B.LogicalKeyboardKey_4294970656 = new D.LogicalKeyboardKey(4294970656);
    B.LogicalKeyboardKey_4294970657 = new D.LogicalKeyboardKey(4294970657);
    B.LogicalKeyboardKey_4294970658 = new D.LogicalKeyboardKey(4294970658);
    B.LogicalKeyboardKey_4294970659 = new D.LogicalKeyboardKey(4294970659);
    B.LogicalKeyboardKey_4294970660 = new D.LogicalKeyboardKey(4294970660);
    B.LogicalKeyboardKey_4294970661 = new D.LogicalKeyboardKey(4294970661);
    B.LogicalKeyboardKey_4294970662 = new D.LogicalKeyboardKey(4294970662);
    B.LogicalKeyboardKey_4294970663 = new D.LogicalKeyboardKey(4294970663);
    B.LogicalKeyboardKey_4294970664 = new D.LogicalKeyboardKey(4294970664);
    B.LogicalKeyboardKey_4294970665 = new D.LogicalKeyboardKey(4294970665);
    B.LogicalKeyboardKey_4294970666 = new D.LogicalKeyboardKey(4294970666);
    B.LogicalKeyboardKey_4294970667 = new D.LogicalKeyboardKey(4294970667);
    B.LogicalKeyboardKey_4294970668 = new D.LogicalKeyboardKey(4294970668);
    B.LogicalKeyboardKey_4294970669 = new D.LogicalKeyboardKey(4294970669);
    B.LogicalKeyboardKey_4294970670 = new D.LogicalKeyboardKey(4294970670);
    B.LogicalKeyboardKey_4294970671 = new D.LogicalKeyboardKey(4294970671);
    B.LogicalKeyboardKey_4294970672 = new D.LogicalKeyboardKey(4294970672);
    B.LogicalKeyboardKey_4294970673 = new D.LogicalKeyboardKey(4294970673);
    B.LogicalKeyboardKey_4294970674 = new D.LogicalKeyboardKey(4294970674);
    B.LogicalKeyboardKey_4294970675 = new D.LogicalKeyboardKey(4294970675);
    B.LogicalKeyboardKey_4294970676 = new D.LogicalKeyboardKey(4294970676);
    B.LogicalKeyboardKey_4294970677 = new D.LogicalKeyboardKey(4294970677);
    B.LogicalKeyboardKey_4294970678 = new D.LogicalKeyboardKey(4294970678);
    B.LogicalKeyboardKey_4294970679 = new D.LogicalKeyboardKey(4294970679);
    B.LogicalKeyboardKey_4294970680 = new D.LogicalKeyboardKey(4294970680);
    B.LogicalKeyboardKey_4294970681 = new D.LogicalKeyboardKey(4294970681);
    B.LogicalKeyboardKey_4294970682 = new D.LogicalKeyboardKey(4294970682);
    B.LogicalKeyboardKey_4294970683 = new D.LogicalKeyboardKey(4294970683);
    B.LogicalKeyboardKey_4294970684 = new D.LogicalKeyboardKey(4294970684);
    B.LogicalKeyboardKey_4294970685 = new D.LogicalKeyboardKey(4294970685);
    B.LogicalKeyboardKey_4294970686 = new D.LogicalKeyboardKey(4294970686);
    B.LogicalKeyboardKey_4294970687 = new D.LogicalKeyboardKey(4294970687);
    B.LogicalKeyboardKey_4294970688 = new D.LogicalKeyboardKey(4294970688);
    B.LogicalKeyboardKey_4294970689 = new D.LogicalKeyboardKey(4294970689);
    B.LogicalKeyboardKey_4294970690 = new D.LogicalKeyboardKey(4294970690);
    B.LogicalKeyboardKey_4294970691 = new D.LogicalKeyboardKey(4294970691);
    B.LogicalKeyboardKey_4294970692 = new D.LogicalKeyboardKey(4294970692);
    B.LogicalKeyboardKey_4294970693 = new D.LogicalKeyboardKey(4294970693);
    B.LogicalKeyboardKey_4294970694 = new D.LogicalKeyboardKey(4294970694);
    B.LogicalKeyboardKey_4294970695 = new D.LogicalKeyboardKey(4294970695);
    B.LogicalKeyboardKey_4294970696 = new D.LogicalKeyboardKey(4294970696);
    B.LogicalKeyboardKey_4294970697 = new D.LogicalKeyboardKey(4294970697);
    B.LogicalKeyboardKey_4294970698 = new D.LogicalKeyboardKey(4294970698);
    B.LogicalKeyboardKey_4294970699 = new D.LogicalKeyboardKey(4294970699);
    B.LogicalKeyboardKey_4294970700 = new D.LogicalKeyboardKey(4294970700);
    B.LogicalKeyboardKey_4294970701 = new D.LogicalKeyboardKey(4294970701);
    B.LogicalKeyboardKey_4294970702 = new D.LogicalKeyboardKey(4294970702);
    B.LogicalKeyboardKey_4294970703 = new D.LogicalKeyboardKey(4294970703);
    B.LogicalKeyboardKey_4294970704 = new D.LogicalKeyboardKey(4294970704);
    B.LogicalKeyboardKey_4294970705 = new D.LogicalKeyboardKey(4294970705);
    B.LogicalKeyboardKey_4294970706 = new D.LogicalKeyboardKey(4294970706);
    B.LogicalKeyboardKey_4294970707 = new D.LogicalKeyboardKey(4294970707);
    B.LogicalKeyboardKey_4294970708 = new D.LogicalKeyboardKey(4294970708);
    B.LogicalKeyboardKey_4294970709 = new D.LogicalKeyboardKey(4294970709);
    B.LogicalKeyboardKey_4294970710 = new D.LogicalKeyboardKey(4294970710);
    B.LogicalKeyboardKey_4294970711 = new D.LogicalKeyboardKey(4294970711);
    B.LogicalKeyboardKey_4294970712 = new D.LogicalKeyboardKey(4294970712);
    B.LogicalKeyboardKey_4294970713 = new D.LogicalKeyboardKey(4294970713);
    B.LogicalKeyboardKey_4294970714 = new D.LogicalKeyboardKey(4294970714);
    B.LogicalKeyboardKey_4294970715 = new D.LogicalKeyboardKey(4294970715);
    B.LogicalKeyboardKey_4294970882 = new D.LogicalKeyboardKey(4294970882);
    B.LogicalKeyboardKey_4294970884 = new D.LogicalKeyboardKey(4294970884);
    B.LogicalKeyboardKey_4294970885 = new D.LogicalKeyboardKey(4294970885);
    B.LogicalKeyboardKey_4294970886 = new D.LogicalKeyboardKey(4294970886);
    B.LogicalKeyboardKey_4294970887 = new D.LogicalKeyboardKey(4294970887);
    B.LogicalKeyboardKey_4294970888 = new D.LogicalKeyboardKey(4294970888);
    B.LogicalKeyboardKey_4294970889 = new D.LogicalKeyboardKey(4294970889);
    B.LogicalKeyboardKey_4294971137 = new D.LogicalKeyboardKey(4294971137);
    B.LogicalKeyboardKey_4294971138 = new D.LogicalKeyboardKey(4294971138);
    B.LogicalKeyboardKey_4294971393 = new D.LogicalKeyboardKey(4294971393);
    B.LogicalKeyboardKey_4294971394 = new D.LogicalKeyboardKey(4294971394);
    B.LogicalKeyboardKey_4294971395 = new D.LogicalKeyboardKey(4294971395);
    B.LogicalKeyboardKey_4294971396 = new D.LogicalKeyboardKey(4294971396);
    B.LogicalKeyboardKey_4294971397 = new D.LogicalKeyboardKey(4294971397);
    B.LogicalKeyboardKey_4294971398 = new D.LogicalKeyboardKey(4294971398);
    B.LogicalKeyboardKey_4294971399 = new D.LogicalKeyboardKey(4294971399);
    B.LogicalKeyboardKey_4294971400 = new D.LogicalKeyboardKey(4294971400);
    B.LogicalKeyboardKey_4294971401 = new D.LogicalKeyboardKey(4294971401);
    B.LogicalKeyboardKey_4294971402 = new D.LogicalKeyboardKey(4294971402);
    B.LogicalKeyboardKey_4294971403 = new D.LogicalKeyboardKey(4294971403);
    B.LogicalKeyboardKey_4294971649 = new D.LogicalKeyboardKey(4294971649);
    B.LogicalKeyboardKey_4294971650 = new D.LogicalKeyboardKey(4294971650);
    B.LogicalKeyboardKey_4294971651 = new D.LogicalKeyboardKey(4294971651);
    B.LogicalKeyboardKey_4294971652 = new D.LogicalKeyboardKey(4294971652);
    B.LogicalKeyboardKey_4294971653 = new D.LogicalKeyboardKey(4294971653);
    B.LogicalKeyboardKey_4294971654 = new D.LogicalKeyboardKey(4294971654);
    B.LogicalKeyboardKey_4294971655 = new D.LogicalKeyboardKey(4294971655);
    B.LogicalKeyboardKey_4294971656 = new D.LogicalKeyboardKey(4294971656);
    B.LogicalKeyboardKey_4294971657 = new D.LogicalKeyboardKey(4294971657);
    B.LogicalKeyboardKey_4294971658 = new D.LogicalKeyboardKey(4294971658);
    B.LogicalKeyboardKey_4294971659 = new D.LogicalKeyboardKey(4294971659);
    B.LogicalKeyboardKey_4294971660 = new D.LogicalKeyboardKey(4294971660);
    B.LogicalKeyboardKey_4294971661 = new D.LogicalKeyboardKey(4294971661);
    B.LogicalKeyboardKey_4294971662 = new D.LogicalKeyboardKey(4294971662);
    B.LogicalKeyboardKey_4294971663 = new D.LogicalKeyboardKey(4294971663);
    B.LogicalKeyboardKey_4294971664 = new D.LogicalKeyboardKey(4294971664);
    B.LogicalKeyboardKey_4294971665 = new D.LogicalKeyboardKey(4294971665);
    B.LogicalKeyboardKey_4294971666 = new D.LogicalKeyboardKey(4294971666);
    B.LogicalKeyboardKey_4294971667 = new D.LogicalKeyboardKey(4294971667);
    B.LogicalKeyboardKey_4294971668 = new D.LogicalKeyboardKey(4294971668);
    B.LogicalKeyboardKey_4294971669 = new D.LogicalKeyboardKey(4294971669);
    B.LogicalKeyboardKey_4294971670 = new D.LogicalKeyboardKey(4294971670);
    B.LogicalKeyboardKey_4294971671 = new D.LogicalKeyboardKey(4294971671);
    B.LogicalKeyboardKey_4294971672 = new D.LogicalKeyboardKey(4294971672);
    B.LogicalKeyboardKey_4294971673 = new D.LogicalKeyboardKey(4294971673);
    B.LogicalKeyboardKey_4294971674 = new D.LogicalKeyboardKey(4294971674);
    B.LogicalKeyboardKey_4294971675 = new D.LogicalKeyboardKey(4294971675);
    B.LogicalKeyboardKey_4294971905 = new D.LogicalKeyboardKey(4294971905);
    B.LogicalKeyboardKey_4294971906 = new D.LogicalKeyboardKey(4294971906);
    B.LogicalKeyboardKey_8589934592 = new D.LogicalKeyboardKey(8589934592);
    B.LogicalKeyboardKey_8589934593 = new D.LogicalKeyboardKey(8589934593);
    B.LogicalKeyboardKey_8589934594 = new D.LogicalKeyboardKey(8589934594);
    B.LogicalKeyboardKey_8589934595 = new D.LogicalKeyboardKey(8589934595);
    B.LogicalKeyboardKey_8589934608 = new D.LogicalKeyboardKey(8589934608);
    B.LogicalKeyboardKey_8589934609 = new D.LogicalKeyboardKey(8589934609);
    B.LogicalKeyboardKey_8589934610 = new D.LogicalKeyboardKey(8589934610);
    B.LogicalKeyboardKey_8589934611 = new D.LogicalKeyboardKey(8589934611);
    B.LogicalKeyboardKey_8589934612 = new D.LogicalKeyboardKey(8589934612);
    B.LogicalKeyboardKey_8589934624 = new D.LogicalKeyboardKey(8589934624);
    B.LogicalKeyboardKey_8589934625 = new D.LogicalKeyboardKey(8589934625);
    B.LogicalKeyboardKey_8589934626 = new D.LogicalKeyboardKey(8589934626);
    B.LogicalKeyboardKey_8589935144 = new D.LogicalKeyboardKey(8589935144);
    B.LogicalKeyboardKey_8589935145 = new D.LogicalKeyboardKey(8589935145);
    B.LogicalKeyboardKey_8589935148 = new D.LogicalKeyboardKey(8589935148);
    B.LogicalKeyboardKey_8589935165 = new D.LogicalKeyboardKey(8589935165);
    B.LogicalKeyboardKey_8589935361 = new D.LogicalKeyboardKey(8589935361);
    B.LogicalKeyboardKey_8589935362 = new D.LogicalKeyboardKey(8589935362);
    B.LogicalKeyboardKey_8589935363 = new D.LogicalKeyboardKey(8589935363);
    B.LogicalKeyboardKey_8589935364 = new D.LogicalKeyboardKey(8589935364);
    B.LogicalKeyboardKey_8589935365 = new D.LogicalKeyboardKey(8589935365);
    B.LogicalKeyboardKey_8589935366 = new D.LogicalKeyboardKey(8589935366);
    B.LogicalKeyboardKey_8589935367 = new D.LogicalKeyboardKey(8589935367);
    B.LogicalKeyboardKey_8589935368 = new D.LogicalKeyboardKey(8589935368);
    B.LogicalKeyboardKey_8589935369 = new D.LogicalKeyboardKey(8589935369);
    B.LogicalKeyboardKey_8589935370 = new D.LogicalKeyboardKey(8589935370);
    B.LogicalKeyboardKey_8589935371 = new D.LogicalKeyboardKey(8589935371);
    B.LogicalKeyboardKey_8589935372 = new D.LogicalKeyboardKey(8589935372);
    B.LogicalKeyboardKey_8589935373 = new D.LogicalKeyboardKey(8589935373);
    B.LogicalKeyboardKey_8589935374 = new D.LogicalKeyboardKey(8589935374);
    B.LogicalKeyboardKey_8589935375 = new D.LogicalKeyboardKey(8589935375);
    B.LogicalKeyboardKey_8589935376 = new D.LogicalKeyboardKey(8589935376);
    B.LogicalKeyboardKey_8589935378 = new D.LogicalKeyboardKey(8589935378);
    B.LogicalKeyboardKey_8589935379 = new D.LogicalKeyboardKey(8589935379);
    B.LogicalKeyboardKey_8589935380 = new D.LogicalKeyboardKey(8589935380);
    B.LogicalKeyboardKey_8589935381 = new D.LogicalKeyboardKey(8589935381);
    B.LogicalKeyboardKey_8589935382 = new D.LogicalKeyboardKey(8589935382);
    B.LogicalKeyboardKey_8589935383 = new D.LogicalKeyboardKey(8589935383);
    B.LogicalKeyboardKey_8589935384 = new D.LogicalKeyboardKey(8589935384);
    B.LogicalKeyboardKey_8589935385 = new D.LogicalKeyboardKey(8589935385);
    B.LogicalKeyboardKey_8589935386 = new D.LogicalKeyboardKey(8589935386);
    B.LogicalKeyboardKey_8589935387 = new D.LogicalKeyboardKey(8589935387);
    B.LogicalKeyboardKey_8589935388 = new D.LogicalKeyboardKey(8589935388);
    B.LogicalKeyboardKey_8589935389 = new D.LogicalKeyboardKey(8589935389);
    B.LogicalKeyboardKey_8589935390 = new D.LogicalKeyboardKey(8589935390);
    B.LogicalKeyboardKey_8589935391 = new D.LogicalKeyboardKey(8589935391);
    B.Map_2bMtF = new C.GeneralConstantMap([32, E.LogicalKeyboardKey_32, 33, B.LogicalKeyboardKey_33, 34, B.LogicalKeyboardKey_34, 35, B.LogicalKeyboardKey_35, 36, B.LogicalKeyboardKey_36, 37, B.LogicalKeyboardKey_37, 38, B.LogicalKeyboardKey_38, 39, B.LogicalKeyboardKey_39, 40, B.LogicalKeyboardKey_40, 41, B.LogicalKeyboardKey_41, 42, B.LogicalKeyboardKey_42, 43, B.LogicalKeyboardKey_43, 44, B.LogicalKeyboardKey_44, 45, B.LogicalKeyboardKey_45, 46, B.LogicalKeyboardKey_46, 47, B.LogicalKeyboardKey_47, 48, B.LogicalKeyboardKey_48, 49, B.LogicalKeyboardKey_49, 50, B.LogicalKeyboardKey_50, 51, B.LogicalKeyboardKey_51, 52, B.LogicalKeyboardKey_52, 53, B.LogicalKeyboardKey_53, 54, B.LogicalKeyboardKey_54, 55, B.LogicalKeyboardKey_55, 56, B.LogicalKeyboardKey_56, 57, B.LogicalKeyboardKey_57, 58, B.LogicalKeyboardKey_58, 59, B.LogicalKeyboardKey_59, 60, B.LogicalKeyboardKey_60, 61, B.LogicalKeyboardKey_61, 62, B.LogicalKeyboardKey_62, 63, B.LogicalKeyboardKey_63, 64, B.LogicalKeyboardKey_64, 91, B.LogicalKeyboardKey_91, 92, B.LogicalKeyboardKey_92, 93, B.LogicalKeyboardKey_93, 94, B.LogicalKeyboardKey_94, 95, B.LogicalKeyboardKey_95, 96, B.LogicalKeyboardKey_96, 97, E.LogicalKeyboardKey_97, 98, E.LogicalKeyboardKey_98, 99, E.LogicalKeyboardKey_99, 100, B.LogicalKeyboardKey_100, 101, E.LogicalKeyboardKey_101, 102, E.LogicalKeyboardKey_102, 103, B.LogicalKeyboardKey_103, 104, B.LogicalKeyboardKey_104, 105, B.LogicalKeyboardKey_105, 106, B.LogicalKeyboardKey_106, 107, B.LogicalKeyboardKey_107, 108, B.LogicalKeyboardKey_108, 109, B.LogicalKeyboardKey_109, 110, E.LogicalKeyboardKey_110, 111, B.LogicalKeyboardKey_111, 112, E.LogicalKeyboardKey_112, 113, B.LogicalKeyboardKey_113, 114, B.LogicalKeyboardKey_114, 115, B.LogicalKeyboardKey_115, 116, E.LogicalKeyboardKey_116, 117, B.LogicalKeyboardKey_117, 118, E.LogicalKeyboardKey_118, 119, B.LogicalKeyboardKey_119, 120, E.LogicalKeyboardKey_120, 121, B.LogicalKeyboardKey_121, 122, E.LogicalKeyboardKey_122, 123, B.LogicalKeyboardKey_123, 124, B.LogicalKeyboardKey_124, 125, B.LogicalKeyboardKey_125, 126, B.LogicalKeyboardKey_126, 4294967297, B.LogicalKeyboardKey_4294967297, 4294967304, E.LogicalKeyboardKey_4294967304, 4294967305, E.LogicalKeyboardKey_4294967305, 4294967309, E.LogicalKeyboardKey_4294967309, 4294967323, E.LogicalKeyboardKey_4294967323, 4294967423, E.LogicalKeyboardKey_4294967423, 4294967553, B.LogicalKeyboardKey_4294967553, 4294967555, B.LogicalKeyboardKey_4294967555, 4294967556, B.LogicalKeyboardKey_4294967556, 4294967558, B.LogicalKeyboardKey_4294967558, 4294967559, B.LogicalKeyboardKey_4294967559, 4294967560, B.LogicalKeyboardKey_4294967560, 4294967562, E.LogicalKeyboardKey_4294967562, 4294967564, B.LogicalKeyboardKey_4294967564, 4294967566, B.LogicalKeyboardKey_4294967566, 4294967567, B.LogicalKeyboardKey_4294967567, 4294967568, B.LogicalKeyboardKey_4294967568, 4294967569, B.LogicalKeyboardKey_4294967569, 4294968065, E.LogicalKeyboardKey_4294968065, 4294968066, E.LogicalKeyboardKey_4294968066, 4294968067, E.LogicalKeyboardKey_4294968067, 4294968068, E.LogicalKeyboardKey_4294968068, 4294968069, E.LogicalKeyboardKey_4294968069, 4294968070, E.LogicalKeyboardKey_4294968070, 4294968071, E.LogicalKeyboardKey_4294968071, 4294968072, E.LogicalKeyboardKey_4294968072, 4294968321, B.LogicalKeyboardKey_4294968321, 4294968322, B.LogicalKeyboardKey_4294968322, 4294968323, B.LogicalKeyboardKey_4294968323, 4294968324, B.LogicalKeyboardKey_4294968324, 4294968325, B.LogicalKeyboardKey_4294968325, 4294968326, B.LogicalKeyboardKey_4294968326, 4294968327, B.LogicalKeyboardKey_4294968327, 4294968328, B.LogicalKeyboardKey_4294968328, 4294968329, B.LogicalKeyboardKey_4294968329, 4294968330, B.LogicalKeyboardKey_4294968330, 4294968577, B.LogicalKeyboardKey_4294968577, 4294968578, B.LogicalKeyboardKey_4294968578, 4294968579, B.LogicalKeyboardKey_4294968579, 4294968580, B.LogicalKeyboardKey_4294968580, 4294968581, B.LogicalKeyboardKey_4294968581, 4294968582, B.LogicalKeyboardKey_4294968582, 4294968583, B.LogicalKeyboardKey_4294968583, 4294968584, B.LogicalKeyboardKey_4294968584, 4294968585, B.LogicalKeyboardKey_4294968585, 4294968586, B.LogicalKeyboardKey_4294968586, 4294968587, B.LogicalKeyboardKey_4294968587, 4294968588, E.LogicalKeyboardKey_4294968588, 4294968589, B.LogicalKeyboardKey_4294968589, 4294968590, B.LogicalKeyboardKey_4294968590, 4294968833, B.LogicalKeyboardKey_4294968833, 4294968834, B.LogicalKeyboardKey_4294968834, 4294968835, B.LogicalKeyboardKey_4294968835, 4294968836, B.LogicalKeyboardKey_4294968836, 4294968837, B.LogicalKeyboardKey_4294968837, 4294968838, B.LogicalKeyboardKey_4294968838, 4294968839, B.LogicalKeyboardKey_4294968839, 4294968840, B.LogicalKeyboardKey_4294968840, 4294968841, B.LogicalKeyboardKey_4294968841, 4294968842, B.LogicalKeyboardKey_4294968842, 4294968843, B.LogicalKeyboardKey_4294968843, 4294969089, B.LogicalKeyboardKey_4294969089, 4294969090, B.LogicalKeyboardKey_4294969090, 4294969091, B.LogicalKeyboardKey_4294969091, 4294969092, B.LogicalKeyboardKey_4294969092, 4294969093, B.LogicalKeyboardKey_4294969093, 4294969094, B.LogicalKeyboardKey_4294969094, 4294969095, B.LogicalKeyboardKey_4294969095, 4294969096, B.LogicalKeyboardKey_4294969096, 4294969097, B.LogicalKeyboardKey_4294969097, 4294969098, B.LogicalKeyboardKey_4294969098, 4294969099, B.LogicalKeyboardKey_4294969099, 4294969100, B.LogicalKeyboardKey_4294969100, 4294969101, B.LogicalKeyboardKey_4294969101, 4294969102, B.LogicalKeyboardKey_4294969102, 4294969103, B.LogicalKeyboardKey_4294969103, 4294969104, B.LogicalKeyboardKey_4294969104, 4294969105, B.LogicalKeyboardKey_4294969105, 4294969106, B.LogicalKeyboardKey_4294969106, 4294969107, B.LogicalKeyboardKey_4294969107, 4294969108, B.LogicalKeyboardKey_4294969108, 4294969109, B.LogicalKeyboardKey_4294969109, 4294969110, B.LogicalKeyboardKey_4294969110, 4294969111, B.LogicalKeyboardKey_4294969111, 4294969112, B.LogicalKeyboardKey_4294969112, 4294969113, B.LogicalKeyboardKey_4294969113, 4294969114, B.LogicalKeyboardKey_4294969114, 4294969115, B.LogicalKeyboardKey_4294969115, 4294969116, B.LogicalKeyboardKey_4294969116, 4294969117, B.LogicalKeyboardKey_4294969117, 4294969345, B.LogicalKeyboardKey_4294969345, 4294969346, B.LogicalKeyboardKey_4294969346, 4294969347, B.LogicalKeyboardKey_4294969347, 4294969348, B.LogicalKeyboardKey_4294969348, 4294969349, B.LogicalKeyboardKey_4294969349, 4294969350, B.LogicalKeyboardKey_4294969350, 4294969351, B.LogicalKeyboardKey_4294969351, 4294969352, B.LogicalKeyboardKey_4294969352, 4294969353, B.LogicalKeyboardKey_4294969353, 4294969354, B.LogicalKeyboardKey_4294969354, 4294969355, B.LogicalKeyboardKey_4294969355, 4294969356, B.LogicalKeyboardKey_4294969356, 4294969357, B.LogicalKeyboardKey_4294969357, 4294969358, B.LogicalKeyboardKey_4294969358, 4294969359, B.LogicalKeyboardKey_4294969359, 4294969360, B.LogicalKeyboardKey_4294969360, 4294969361, B.LogicalKeyboardKey_4294969361, 4294969362, B.LogicalKeyboardKey_4294969362, 4294969363, B.LogicalKeyboardKey_4294969363, 4294969364, B.LogicalKeyboardKey_4294969364, 4294969365, B.LogicalKeyboardKey_4294969365, 4294969366, B.LogicalKeyboardKey_4294969366, 4294969367, B.LogicalKeyboardKey_4294969367, 4294969368, B.LogicalKeyboardKey_4294969368, 4294969601, B.LogicalKeyboardKey_4294969601, 4294969602, B.LogicalKeyboardKey_4294969602, 4294969603, B.LogicalKeyboardKey_4294969603, 4294969604, B.LogicalKeyboardKey_4294969604, 4294969605, B.LogicalKeyboardKey_4294969605, 4294969606, B.LogicalKeyboardKey_4294969606, 4294969607, B.LogicalKeyboardKey_4294969607, 4294969608, B.LogicalKeyboardKey_4294969608, 4294969857, B.LogicalKeyboardKey_4294969857, 4294969858, B.LogicalKeyboardKey_4294969858, 4294969859, B.LogicalKeyboardKey_4294969859, 4294969860, B.LogicalKeyboardKey_4294969860, 4294969861, B.LogicalKeyboardKey_4294969861, 4294969863, B.LogicalKeyboardKey_4294969863, 4294969864, B.LogicalKeyboardKey_4294969864, 4294969865, B.LogicalKeyboardKey_4294969865, 4294969866, B.LogicalKeyboardKey_4294969866, 4294969867, B.LogicalKeyboardKey_4294969867, 4294969868, B.LogicalKeyboardKey_4294969868, 4294969869, B.LogicalKeyboardKey_4294969869, 4294969870, B.LogicalKeyboardKey_4294969870, 4294969871, B.LogicalKeyboardKey_4294969871, 4294969872, B.LogicalKeyboardKey_4294969872, 4294969873, B.LogicalKeyboardKey_4294969873, 4294970113, B.LogicalKeyboardKey_4294970113, 4294970114, B.LogicalKeyboardKey_4294970114, 4294970115, B.LogicalKeyboardKey_4294970115, 4294970116, B.LogicalKeyboardKey_4294970116, 4294970117, B.LogicalKeyboardKey_4294970117, 4294970118, B.LogicalKeyboardKey_4294970118, 4294970119, B.LogicalKeyboardKey_4294970119, 4294970120, B.LogicalKeyboardKey_4294970120, 4294970121, B.LogicalKeyboardKey_4294970121, 4294970122, B.LogicalKeyboardKey_4294970122, 4294970123, B.LogicalKeyboardKey_4294970123, 4294970124, B.LogicalKeyboardKey_4294970124, 4294970125, B.LogicalKeyboardKey_4294970125, 4294970126, B.LogicalKeyboardKey_4294970126, 4294970127, B.LogicalKeyboardKey_4294970127, 4294970369, B.LogicalKeyboardKey_4294970369, 4294970370, B.LogicalKeyboardKey_4294970370, 4294970371, B.LogicalKeyboardKey_4294970371, 4294970372, B.LogicalKeyboardKey_4294970372, 4294970373, B.LogicalKeyboardKey_4294970373, 4294970374, B.LogicalKeyboardKey_4294970374, 4294970375, B.LogicalKeyboardKey_4294970375, 4294970625, B.LogicalKeyboardKey_4294970625, 4294970626, B.LogicalKeyboardKey_4294970626, 4294970627, B.LogicalKeyboardKey_4294970627, 4294970628, B.LogicalKeyboardKey_4294970628, 4294970629, B.LogicalKeyboardKey_4294970629, 4294970630, B.LogicalKeyboardKey_4294970630, 4294970631, B.LogicalKeyboardKey_4294970631, 4294970632, B.LogicalKeyboardKey_4294970632, 4294970633, B.LogicalKeyboardKey_4294970633, 4294970634, B.LogicalKeyboardKey_4294970634, 4294970635, B.LogicalKeyboardKey_4294970635, 4294970636, B.LogicalKeyboardKey_4294970636, 4294970637, B.LogicalKeyboardKey_4294970637, 4294970638, B.LogicalKeyboardKey_4294970638, 4294970639, B.LogicalKeyboardKey_4294970639, 4294970640, B.LogicalKeyboardKey_4294970640, 4294970641, B.LogicalKeyboardKey_4294970641, 4294970642, B.LogicalKeyboardKey_4294970642, 4294970643, B.LogicalKeyboardKey_4294970643, 4294970644, B.LogicalKeyboardKey_4294970644, 4294970645, B.LogicalKeyboardKey_4294970645, 4294970646, B.LogicalKeyboardKey_4294970646, 4294970647, B.LogicalKeyboardKey_4294970647, 4294970648, B.LogicalKeyboardKey_4294970648, 4294970649, B.LogicalKeyboardKey_4294970649, 4294970650, B.LogicalKeyboardKey_4294970650, 4294970651, B.LogicalKeyboardKey_4294970651, 4294970652, B.LogicalKeyboardKey_4294970652, 4294970653, B.LogicalKeyboardKey_4294970653, 4294970654, B.LogicalKeyboardKey_4294970654, 4294970655, B.LogicalKeyboardKey_4294970655, 4294970656, B.LogicalKeyboardKey_4294970656, 4294970657, B.LogicalKeyboardKey_4294970657, 4294970658, B.LogicalKeyboardKey_4294970658, 4294970659, B.LogicalKeyboardKey_4294970659, 4294970660, B.LogicalKeyboardKey_4294970660, 4294970661, B.LogicalKeyboardKey_4294970661, 4294970662, B.LogicalKeyboardKey_4294970662, 4294970663, B.LogicalKeyboardKey_4294970663, 4294970664, B.LogicalKeyboardKey_4294970664, 4294970665, B.LogicalKeyboardKey_4294970665, 4294970666, B.LogicalKeyboardKey_4294970666, 4294970667, B.LogicalKeyboardKey_4294970667, 4294970668, B.LogicalKeyboardKey_4294970668, 4294970669, B.LogicalKeyboardKey_4294970669, 4294970670, B.LogicalKeyboardKey_4294970670, 4294970671, B.LogicalKeyboardKey_4294970671, 4294970672, B.LogicalKeyboardKey_4294970672, 4294970673, B.LogicalKeyboardKey_4294970673, 4294970674, B.LogicalKeyboardKey_4294970674, 4294970675, B.LogicalKeyboardKey_4294970675, 4294970676, B.LogicalKeyboardKey_4294970676, 4294970677, B.LogicalKeyboardKey_4294970677, 4294970678, B.LogicalKeyboardKey_4294970678, 4294970679, B.LogicalKeyboardKey_4294970679, 4294970680, B.LogicalKeyboardKey_4294970680, 4294970681, B.LogicalKeyboardKey_4294970681, 4294970682, B.LogicalKeyboardKey_4294970682, 4294970683, B.LogicalKeyboardKey_4294970683, 4294970684, B.LogicalKeyboardKey_4294970684, 4294970685, B.LogicalKeyboardKey_4294970685, 4294970686, B.LogicalKeyboardKey_4294970686, 4294970687, B.LogicalKeyboardKey_4294970687, 4294970688, B.LogicalKeyboardKey_4294970688, 4294970689, B.LogicalKeyboardKey_4294970689, 4294970690, B.LogicalKeyboardKey_4294970690, 4294970691, B.LogicalKeyboardKey_4294970691, 4294970692, B.LogicalKeyboardKey_4294970692, 4294970693, B.LogicalKeyboardKey_4294970693, 4294970694, B.LogicalKeyboardKey_4294970694, 4294970695, B.LogicalKeyboardKey_4294970695, 4294970696, B.LogicalKeyboardKey_4294970696, 4294970697, B.LogicalKeyboardKey_4294970697, 4294970698, B.LogicalKeyboardKey_4294970698, 4294970699, B.LogicalKeyboardKey_4294970699, 4294970700, B.LogicalKeyboardKey_4294970700, 4294970701, B.LogicalKeyboardKey_4294970701, 4294970702, B.LogicalKeyboardKey_4294970702, 4294970703, B.LogicalKeyboardKey_4294970703, 4294970704, B.LogicalKeyboardKey_4294970704, 4294970705, B.LogicalKeyboardKey_4294970705, 4294970706, B.LogicalKeyboardKey_4294970706, 4294970707, B.LogicalKeyboardKey_4294970707, 4294970708, B.LogicalKeyboardKey_4294970708, 4294970709, B.LogicalKeyboardKey_4294970709, 4294970710, B.LogicalKeyboardKey_4294970710, 4294970711, B.LogicalKeyboardKey_4294970711, 4294970712, B.LogicalKeyboardKey_4294970712, 4294970713, B.LogicalKeyboardKey_4294970713, 4294970714, B.LogicalKeyboardKey_4294970714, 4294970715, B.LogicalKeyboardKey_4294970715, 4294970882, B.LogicalKeyboardKey_4294970882, 4294970884, B.LogicalKeyboardKey_4294970884, 4294970885, B.LogicalKeyboardKey_4294970885, 4294970886, B.LogicalKeyboardKey_4294970886, 4294970887, B.LogicalKeyboardKey_4294970887, 4294970888, B.LogicalKeyboardKey_4294970888, 4294970889, B.LogicalKeyboardKey_4294970889, 4294971137, B.LogicalKeyboardKey_4294971137, 4294971138, B.LogicalKeyboardKey_4294971138, 4294971393, B.LogicalKeyboardKey_4294971393, 4294971394, B.LogicalKeyboardKey_4294971394, 4294971395, B.LogicalKeyboardKey_4294971395, 4294971396, B.LogicalKeyboardKey_4294971396, 4294971397, B.LogicalKeyboardKey_4294971397, 4294971398, B.LogicalKeyboardKey_4294971398, 4294971399, B.LogicalKeyboardKey_4294971399, 4294971400, B.LogicalKeyboardKey_4294971400, 4294971401, B.LogicalKeyboardKey_4294971401, 4294971402, B.LogicalKeyboardKey_4294971402, 4294971403, B.LogicalKeyboardKey_4294971403, 4294971649, B.LogicalKeyboardKey_4294971649, 4294971650, B.LogicalKeyboardKey_4294971650, 4294971651, B.LogicalKeyboardKey_4294971651, 4294971652, B.LogicalKeyboardKey_4294971652, 4294971653, B.LogicalKeyboardKey_4294971653, 4294971654, B.LogicalKeyboardKey_4294971654, 4294971655, B.LogicalKeyboardKey_4294971655, 4294971656, B.LogicalKeyboardKey_4294971656, 4294971657, B.LogicalKeyboardKey_4294971657, 4294971658, B.LogicalKeyboardKey_4294971658, 4294971659, B.LogicalKeyboardKey_4294971659, 4294971660, B.LogicalKeyboardKey_4294971660, 4294971661, B.LogicalKeyboardKey_4294971661, 4294971662, B.LogicalKeyboardKey_4294971662, 4294971663, B.LogicalKeyboardKey_4294971663, 4294971664, B.LogicalKeyboardKey_4294971664, 4294971665, B.LogicalKeyboardKey_4294971665, 4294971666, B.LogicalKeyboardKey_4294971666, 4294971667, B.LogicalKeyboardKey_4294971667, 4294971668, B.LogicalKeyboardKey_4294971668, 4294971669, B.LogicalKeyboardKey_4294971669, 4294971670, B.LogicalKeyboardKey_4294971670, 4294971671, B.LogicalKeyboardKey_4294971671, 4294971672, B.LogicalKeyboardKey_4294971672, 4294971673, B.LogicalKeyboardKey_4294971673, 4294971674, B.LogicalKeyboardKey_4294971674, 4294971675, B.LogicalKeyboardKey_4294971675, 4294971905, B.LogicalKeyboardKey_4294971905, 4294971906, B.LogicalKeyboardKey_4294971906, 8589934592, B.LogicalKeyboardKey_8589934592, 8589934593, B.LogicalKeyboardKey_8589934593, 8589934594, B.LogicalKeyboardKey_8589934594, 8589934595, B.LogicalKeyboardKey_8589934595, 8589934608, B.LogicalKeyboardKey_8589934608, 8589934609, B.LogicalKeyboardKey_8589934609, 8589934610, B.LogicalKeyboardKey_8589934610, 8589934611, B.LogicalKeyboardKey_8589934611, 8589934612, B.LogicalKeyboardKey_8589934612, 8589934624, B.LogicalKeyboardKey_8589934624, 8589934625, B.LogicalKeyboardKey_8589934625, 8589934626, B.LogicalKeyboardKey_8589934626, 8589934848, E.LogicalKeyboardKey_8589934848, 8589934849, E.LogicalKeyboardKey_8589934849, 8589934850, E.LogicalKeyboardKey_8589934850, 8589934851, E.LogicalKeyboardKey_8589934851, 8589934852, E.LogicalKeyboardKey_8589934852, 8589934853, E.LogicalKeyboardKey_8589934853, 8589934854, E.LogicalKeyboardKey_8589934854, 8589934855, E.LogicalKeyboardKey_8589934855, 8589935088, E.LogicalKeyboardKey_8589935088, 8589935090, E.LogicalKeyboardKey_8589935090, 8589935092, E.LogicalKeyboardKey_8589935092, 8589935094, E.LogicalKeyboardKey_8589935094, 8589935117, E.LogicalKeyboardKey_8589935117, 8589935144, B.LogicalKeyboardKey_8589935144, 8589935145, B.LogicalKeyboardKey_8589935145, 8589935146, B.LogicalKeyboardKey_8589935146, 8589935147, B.LogicalKeyboardKey_8589935147, 8589935148, B.LogicalKeyboardKey_8589935148, 8589935149, B.LogicalKeyboardKey_8589935149, 8589935150, E.LogicalKeyboardKey_8589935150, 8589935151, B.LogicalKeyboardKey_8589935151, 8589935152, B.LogicalKeyboardKey_8589935152, 8589935153, E.LogicalKeyboardKey_8589935153, 8589935154, E.LogicalKeyboardKey_8589935154, 8589935155, E.LogicalKeyboardKey_8589935155, 8589935156, E.LogicalKeyboardKey_8589935156, 8589935157, B.LogicalKeyboardKey_8589935157, 8589935158, E.LogicalKeyboardKey_8589935158, 8589935159, E.LogicalKeyboardKey_8589935159, 8589935160, E.LogicalKeyboardKey_8589935160, 8589935161, E.LogicalKeyboardKey_8589935161, 8589935165, B.LogicalKeyboardKey_8589935165, 8589935361, B.LogicalKeyboardKey_8589935361, 8589935362, B.LogicalKeyboardKey_8589935362, 8589935363, B.LogicalKeyboardKey_8589935363, 8589935364, B.LogicalKeyboardKey_8589935364, 8589935365, B.LogicalKeyboardKey_8589935365, 8589935366, B.LogicalKeyboardKey_8589935366, 8589935367, B.LogicalKeyboardKey_8589935367, 8589935368, B.LogicalKeyboardKey_8589935368, 8589935369, B.LogicalKeyboardKey_8589935369, 8589935370, B.LogicalKeyboardKey_8589935370, 8589935371, B.LogicalKeyboardKey_8589935371, 8589935372, B.LogicalKeyboardKey_8589935372, 8589935373, B.LogicalKeyboardKey_8589935373, 8589935374, B.LogicalKeyboardKey_8589935374, 8589935375, B.LogicalKeyboardKey_8589935375, 8589935376, B.LogicalKeyboardKey_8589935376, 8589935377, E.LogicalKeyboardKey_8589935377, 8589935378, B.LogicalKeyboardKey_8589935378, 8589935379, B.LogicalKeyboardKey_8589935379, 8589935380, B.LogicalKeyboardKey_8589935380, 8589935381, B.LogicalKeyboardKey_8589935381, 8589935382, B.LogicalKeyboardKey_8589935382, 8589935383, B.LogicalKeyboardKey_8589935383, 8589935384, B.LogicalKeyboardKey_8589935384, 8589935385, B.LogicalKeyboardKey_8589935385, 8589935386, B.LogicalKeyboardKey_8589935386, 8589935387, B.LogicalKeyboardKey_8589935387, 8589935388, B.LogicalKeyboardKey_8589935388, 8589935389, B.LogicalKeyboardKey_8589935389, 8589935390, B.LogicalKeyboardKey_8589935390, 8589935391, B.LogicalKeyboardKey_8589935391], C.findType("GeneralConstantMap<int,LogicalKeyboardKey>"));
    B.Object_gkc = {KeyA: 0, KeyB: 1, KeyC: 2, KeyD: 3, KeyE: 4, KeyF: 5, KeyG: 6, KeyH: 7, KeyI: 8, KeyJ: 9, KeyK: 10, KeyL: 11, KeyM: 12, KeyN: 13, KeyO: 14, KeyP: 15, KeyQ: 16, KeyR: 17, KeyS: 18, KeyT: 19, KeyU: 20, KeyV: 21, KeyW: 22, KeyX: 23, KeyY: 24, KeyZ: 25, Digit1: 26, Digit2: 27, Digit3: 28, Digit4: 29, Digit5: 30, Digit6: 31, Digit7: 32, Digit8: 33, Digit9: 34, Digit0: 35, Minus: 36, Equal: 37, BracketLeft: 38, BracketRight: 39, Backslash: 40, Semicolon: 41, Quote: 42, Backquote: 43, Comma: 44, Period: 45, Slash: 46};
    B.Map_Am4V8 = new C.ConstantStringMap(B.Object_gkc, ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "[", "]", "\\", ";", "'", "`", ",", ".", "/"], C.findType("ConstantStringMap<String,String>"));
    B.PhysicalKeyboardKey_16 = new A.PhysicalKeyboardKey(16);
    B.PhysicalKeyboardKey_17 = new A.PhysicalKeyboardKey(17);
    B.PhysicalKeyboardKey_18 = new A.PhysicalKeyboardKey(18);
    B.PhysicalKeyboardKey_19 = new A.PhysicalKeyboardKey(19);
    B.PhysicalKeyboardKey_20 = new A.PhysicalKeyboardKey(20);
    B.PhysicalKeyboardKey_21 = new A.PhysicalKeyboardKey(21);
    B.PhysicalKeyboardKey_22 = new A.PhysicalKeyboardKey(22);
    B.PhysicalKeyboardKey_23 = new A.PhysicalKeyboardKey(23);
    B.PhysicalKeyboardKey_24 = new A.PhysicalKeyboardKey(24);
    B.PhysicalKeyboardKey_65666 = new A.PhysicalKeyboardKey(65666);
    B.PhysicalKeyboardKey_65667 = new A.PhysicalKeyboardKey(65667);
    B.PhysicalKeyboardKey_65717 = new A.PhysicalKeyboardKey(65717);
    B.PhysicalKeyboardKey_392961 = new A.PhysicalKeyboardKey(392961);
    B.PhysicalKeyboardKey_392962 = new A.PhysicalKeyboardKey(392962);
    B.PhysicalKeyboardKey_392963 = new A.PhysicalKeyboardKey(392963);
    B.PhysicalKeyboardKey_392964 = new A.PhysicalKeyboardKey(392964);
    B.PhysicalKeyboardKey_392965 = new A.PhysicalKeyboardKey(392965);
    B.PhysicalKeyboardKey_392966 = new A.PhysicalKeyboardKey(392966);
    B.PhysicalKeyboardKey_392967 = new A.PhysicalKeyboardKey(392967);
    B.PhysicalKeyboardKey_392968 = new A.PhysicalKeyboardKey(392968);
    B.PhysicalKeyboardKey_392969 = new A.PhysicalKeyboardKey(392969);
    B.PhysicalKeyboardKey_392970 = new A.PhysicalKeyboardKey(392970);
    B.PhysicalKeyboardKey_392971 = new A.PhysicalKeyboardKey(392971);
    B.PhysicalKeyboardKey_392972 = new A.PhysicalKeyboardKey(392972);
    B.PhysicalKeyboardKey_392973 = new A.PhysicalKeyboardKey(392973);
    B.PhysicalKeyboardKey_392974 = new A.PhysicalKeyboardKey(392974);
    B.PhysicalKeyboardKey_392975 = new A.PhysicalKeyboardKey(392975);
    B.PhysicalKeyboardKey_392976 = new A.PhysicalKeyboardKey(392976);
    B.PhysicalKeyboardKey_392977 = new A.PhysicalKeyboardKey(392977);
    B.PhysicalKeyboardKey_392978 = new A.PhysicalKeyboardKey(392978);
    B.PhysicalKeyboardKey_392979 = new A.PhysicalKeyboardKey(392979);
    B.PhysicalKeyboardKey_392980 = new A.PhysicalKeyboardKey(392980);
    B.PhysicalKeyboardKey_392981 = new A.PhysicalKeyboardKey(392981);
    B.PhysicalKeyboardKey_392982 = new A.PhysicalKeyboardKey(392982);
    B.PhysicalKeyboardKey_392983 = new A.PhysicalKeyboardKey(392983);
    B.PhysicalKeyboardKey_392984 = new A.PhysicalKeyboardKey(392984);
    B.PhysicalKeyboardKey_392985 = new A.PhysicalKeyboardKey(392985);
    B.PhysicalKeyboardKey_392986 = new A.PhysicalKeyboardKey(392986);
    B.PhysicalKeyboardKey_392987 = new A.PhysicalKeyboardKey(392987);
    B.PhysicalKeyboardKey_392988 = new A.PhysicalKeyboardKey(392988);
    B.PhysicalKeyboardKey_392989 = new A.PhysicalKeyboardKey(392989);
    B.PhysicalKeyboardKey_392990 = new A.PhysicalKeyboardKey(392990);
    B.PhysicalKeyboardKey_392991 = new A.PhysicalKeyboardKey(392991);
    B.PhysicalKeyboardKey_458752 = new A.PhysicalKeyboardKey(458752);
    B.PhysicalKeyboardKey_458753 = new A.PhysicalKeyboardKey(458753);
    B.PhysicalKeyboardKey_458754 = new A.PhysicalKeyboardKey(458754);
    B.PhysicalKeyboardKey_458755 = new A.PhysicalKeyboardKey(458755);
    B.PhysicalKeyboardKey_458756 = new A.PhysicalKeyboardKey(458756);
    B.PhysicalKeyboardKey_458757 = new A.PhysicalKeyboardKey(458757);
    B.PhysicalKeyboardKey_458758 = new A.PhysicalKeyboardKey(458758);
    B.PhysicalKeyboardKey_458759 = new A.PhysicalKeyboardKey(458759);
    B.PhysicalKeyboardKey_458760 = new A.PhysicalKeyboardKey(458760);
    B.PhysicalKeyboardKey_458761 = new A.PhysicalKeyboardKey(458761);
    B.PhysicalKeyboardKey_458762 = new A.PhysicalKeyboardKey(458762);
    B.PhysicalKeyboardKey_458763 = new A.PhysicalKeyboardKey(458763);
    B.PhysicalKeyboardKey_458764 = new A.PhysicalKeyboardKey(458764);
    B.PhysicalKeyboardKey_458765 = new A.PhysicalKeyboardKey(458765);
    B.PhysicalKeyboardKey_458766 = new A.PhysicalKeyboardKey(458766);
    B.PhysicalKeyboardKey_458767 = new A.PhysicalKeyboardKey(458767);
    B.PhysicalKeyboardKey_458768 = new A.PhysicalKeyboardKey(458768);
    B.PhysicalKeyboardKey_458769 = new A.PhysicalKeyboardKey(458769);
    B.PhysicalKeyboardKey_458770 = new A.PhysicalKeyboardKey(458770);
    B.PhysicalKeyboardKey_458771 = new A.PhysicalKeyboardKey(458771);
    B.PhysicalKeyboardKey_458772 = new A.PhysicalKeyboardKey(458772);
    B.PhysicalKeyboardKey_458773 = new A.PhysicalKeyboardKey(458773);
    B.PhysicalKeyboardKey_458774 = new A.PhysicalKeyboardKey(458774);
    B.PhysicalKeyboardKey_458775 = new A.PhysicalKeyboardKey(458775);
    B.PhysicalKeyboardKey_458776 = new A.PhysicalKeyboardKey(458776);
    B.PhysicalKeyboardKey_458777 = new A.PhysicalKeyboardKey(458777);
    B.PhysicalKeyboardKey_458778 = new A.PhysicalKeyboardKey(458778);
    B.PhysicalKeyboardKey_458779 = new A.PhysicalKeyboardKey(458779);
    B.PhysicalKeyboardKey_458780 = new A.PhysicalKeyboardKey(458780);
    B.PhysicalKeyboardKey_458781 = new A.PhysicalKeyboardKey(458781);
    B.PhysicalKeyboardKey_458782 = new A.PhysicalKeyboardKey(458782);
    B.PhysicalKeyboardKey_458783 = new A.PhysicalKeyboardKey(458783);
    B.PhysicalKeyboardKey_458784 = new A.PhysicalKeyboardKey(458784);
    B.PhysicalKeyboardKey_458785 = new A.PhysicalKeyboardKey(458785);
    B.PhysicalKeyboardKey_458786 = new A.PhysicalKeyboardKey(458786);
    B.PhysicalKeyboardKey_458787 = new A.PhysicalKeyboardKey(458787);
    B.PhysicalKeyboardKey_458788 = new A.PhysicalKeyboardKey(458788);
    B.PhysicalKeyboardKey_458789 = new A.PhysicalKeyboardKey(458789);
    B.PhysicalKeyboardKey_458790 = new A.PhysicalKeyboardKey(458790);
    B.PhysicalKeyboardKey_458791 = new A.PhysicalKeyboardKey(458791);
    B.PhysicalKeyboardKey_458792 = new A.PhysicalKeyboardKey(458792);
    B.PhysicalKeyboardKey_458793 = new A.PhysicalKeyboardKey(458793);
    B.PhysicalKeyboardKey_458794 = new A.PhysicalKeyboardKey(458794);
    B.PhysicalKeyboardKey_458795 = new A.PhysicalKeyboardKey(458795);
    B.PhysicalKeyboardKey_458796 = new A.PhysicalKeyboardKey(458796);
    B.PhysicalKeyboardKey_458797 = new A.PhysicalKeyboardKey(458797);
    B.PhysicalKeyboardKey_458798 = new A.PhysicalKeyboardKey(458798);
    B.PhysicalKeyboardKey_458799 = new A.PhysicalKeyboardKey(458799);
    B.PhysicalKeyboardKey_458800 = new A.PhysicalKeyboardKey(458800);
    B.PhysicalKeyboardKey_458801 = new A.PhysicalKeyboardKey(458801);
    B.PhysicalKeyboardKey_458803 = new A.PhysicalKeyboardKey(458803);
    B.PhysicalKeyboardKey_458804 = new A.PhysicalKeyboardKey(458804);
    B.PhysicalKeyboardKey_458805 = new A.PhysicalKeyboardKey(458805);
    B.PhysicalKeyboardKey_458806 = new A.PhysicalKeyboardKey(458806);
    B.PhysicalKeyboardKey_458807 = new A.PhysicalKeyboardKey(458807);
    B.PhysicalKeyboardKey_458808 = new A.PhysicalKeyboardKey(458808);
    B.PhysicalKeyboardKey_458809 = new A.PhysicalKeyboardKey(458809);
    B.PhysicalKeyboardKey_458810 = new A.PhysicalKeyboardKey(458810);
    B.PhysicalKeyboardKey_458811 = new A.PhysicalKeyboardKey(458811);
    B.PhysicalKeyboardKey_458812 = new A.PhysicalKeyboardKey(458812);
    B.PhysicalKeyboardKey_458813 = new A.PhysicalKeyboardKey(458813);
    B.PhysicalKeyboardKey_458814 = new A.PhysicalKeyboardKey(458814);
    B.PhysicalKeyboardKey_458815 = new A.PhysicalKeyboardKey(458815);
    B.PhysicalKeyboardKey_458816 = new A.PhysicalKeyboardKey(458816);
    B.PhysicalKeyboardKey_458817 = new A.PhysicalKeyboardKey(458817);
    B.PhysicalKeyboardKey_458818 = new A.PhysicalKeyboardKey(458818);
    B.PhysicalKeyboardKey_458819 = new A.PhysicalKeyboardKey(458819);
    B.PhysicalKeyboardKey_458820 = new A.PhysicalKeyboardKey(458820);
    B.PhysicalKeyboardKey_458821 = new A.PhysicalKeyboardKey(458821);
    B.PhysicalKeyboardKey_458822 = new A.PhysicalKeyboardKey(458822);
    B.PhysicalKeyboardKey_458823 = new A.PhysicalKeyboardKey(458823);
    B.PhysicalKeyboardKey_458824 = new A.PhysicalKeyboardKey(458824);
    B.PhysicalKeyboardKey_458825 = new A.PhysicalKeyboardKey(458825);
    B.PhysicalKeyboardKey_458826 = new A.PhysicalKeyboardKey(458826);
    B.PhysicalKeyboardKey_458827 = new A.PhysicalKeyboardKey(458827);
    B.PhysicalKeyboardKey_458828 = new A.PhysicalKeyboardKey(458828);
    B.PhysicalKeyboardKey_458829 = new A.PhysicalKeyboardKey(458829);
    B.PhysicalKeyboardKey_458830 = new A.PhysicalKeyboardKey(458830);
    B.PhysicalKeyboardKey_458831 = new A.PhysicalKeyboardKey(458831);
    B.PhysicalKeyboardKey_458832 = new A.PhysicalKeyboardKey(458832);
    B.PhysicalKeyboardKey_458833 = new A.PhysicalKeyboardKey(458833);
    B.PhysicalKeyboardKey_458834 = new A.PhysicalKeyboardKey(458834);
    B.PhysicalKeyboardKey_458835 = new A.PhysicalKeyboardKey(458835);
    B.PhysicalKeyboardKey_458836 = new A.PhysicalKeyboardKey(458836);
    B.PhysicalKeyboardKey_458837 = new A.PhysicalKeyboardKey(458837);
    B.PhysicalKeyboardKey_458838 = new A.PhysicalKeyboardKey(458838);
    B.PhysicalKeyboardKey_458839 = new A.PhysicalKeyboardKey(458839);
    B.PhysicalKeyboardKey_458840 = new A.PhysicalKeyboardKey(458840);
    B.PhysicalKeyboardKey_458841 = new A.PhysicalKeyboardKey(458841);
    B.PhysicalKeyboardKey_458842 = new A.PhysicalKeyboardKey(458842);
    B.PhysicalKeyboardKey_458843 = new A.PhysicalKeyboardKey(458843);
    B.PhysicalKeyboardKey_458844 = new A.PhysicalKeyboardKey(458844);
    B.PhysicalKeyboardKey_458845 = new A.PhysicalKeyboardKey(458845);
    B.PhysicalKeyboardKey_458846 = new A.PhysicalKeyboardKey(458846);
    B.PhysicalKeyboardKey_458847 = new A.PhysicalKeyboardKey(458847);
    B.PhysicalKeyboardKey_458848 = new A.PhysicalKeyboardKey(458848);
    B.PhysicalKeyboardKey_458849 = new A.PhysicalKeyboardKey(458849);
    B.PhysicalKeyboardKey_458850 = new A.PhysicalKeyboardKey(458850);
    B.PhysicalKeyboardKey_458851 = new A.PhysicalKeyboardKey(458851);
    B.PhysicalKeyboardKey_458852 = new A.PhysicalKeyboardKey(458852);
    B.PhysicalKeyboardKey_458853 = new A.PhysicalKeyboardKey(458853);
    B.PhysicalKeyboardKey_458854 = new A.PhysicalKeyboardKey(458854);
    B.PhysicalKeyboardKey_458855 = new A.PhysicalKeyboardKey(458855);
    B.PhysicalKeyboardKey_458856 = new A.PhysicalKeyboardKey(458856);
    B.PhysicalKeyboardKey_458857 = new A.PhysicalKeyboardKey(458857);
    B.PhysicalKeyboardKey_458858 = new A.PhysicalKeyboardKey(458858);
    B.PhysicalKeyboardKey_458859 = new A.PhysicalKeyboardKey(458859);
    B.PhysicalKeyboardKey_458860 = new A.PhysicalKeyboardKey(458860);
    B.PhysicalKeyboardKey_458861 = new A.PhysicalKeyboardKey(458861);
    B.PhysicalKeyboardKey_458862 = new A.PhysicalKeyboardKey(458862);
    B.PhysicalKeyboardKey_458863 = new A.PhysicalKeyboardKey(458863);
    B.PhysicalKeyboardKey_458864 = new A.PhysicalKeyboardKey(458864);
    B.PhysicalKeyboardKey_458865 = new A.PhysicalKeyboardKey(458865);
    B.PhysicalKeyboardKey_458866 = new A.PhysicalKeyboardKey(458866);
    B.PhysicalKeyboardKey_458867 = new A.PhysicalKeyboardKey(458867);
    B.PhysicalKeyboardKey_458868 = new A.PhysicalKeyboardKey(458868);
    B.PhysicalKeyboardKey_458869 = new A.PhysicalKeyboardKey(458869);
    B.PhysicalKeyboardKey_458871 = new A.PhysicalKeyboardKey(458871);
    B.PhysicalKeyboardKey_458873 = new A.PhysicalKeyboardKey(458873);
    B.PhysicalKeyboardKey_458874 = new A.PhysicalKeyboardKey(458874);
    B.PhysicalKeyboardKey_458875 = new A.PhysicalKeyboardKey(458875);
    B.PhysicalKeyboardKey_458876 = new A.PhysicalKeyboardKey(458876);
    B.PhysicalKeyboardKey_458877 = new A.PhysicalKeyboardKey(458877);
    B.PhysicalKeyboardKey_458878 = new A.PhysicalKeyboardKey(458878);
    B.PhysicalKeyboardKey_458879 = new A.PhysicalKeyboardKey(458879);
    B.PhysicalKeyboardKey_458880 = new A.PhysicalKeyboardKey(458880);
    B.PhysicalKeyboardKey_458881 = new A.PhysicalKeyboardKey(458881);
    B.PhysicalKeyboardKey_458885 = new A.PhysicalKeyboardKey(458885);
    B.PhysicalKeyboardKey_458887 = new A.PhysicalKeyboardKey(458887);
    B.PhysicalKeyboardKey_458888 = new A.PhysicalKeyboardKey(458888);
    B.PhysicalKeyboardKey_458889 = new A.PhysicalKeyboardKey(458889);
    B.PhysicalKeyboardKey_458890 = new A.PhysicalKeyboardKey(458890);
    B.PhysicalKeyboardKey_458891 = new A.PhysicalKeyboardKey(458891);
    B.PhysicalKeyboardKey_458896 = new A.PhysicalKeyboardKey(458896);
    B.PhysicalKeyboardKey_458897 = new A.PhysicalKeyboardKey(458897);
    B.PhysicalKeyboardKey_458898 = new A.PhysicalKeyboardKey(458898);
    B.PhysicalKeyboardKey_458899 = new A.PhysicalKeyboardKey(458899);
    B.PhysicalKeyboardKey_458900 = new A.PhysicalKeyboardKey(458900);
    B.PhysicalKeyboardKey_458907 = new A.PhysicalKeyboardKey(458907);
    B.PhysicalKeyboardKey_458915 = new A.PhysicalKeyboardKey(458915);
    B.PhysicalKeyboardKey_458934 = new A.PhysicalKeyboardKey(458934);
    B.PhysicalKeyboardKey_458935 = new A.PhysicalKeyboardKey(458935);
    B.PhysicalKeyboardKey_458939 = new A.PhysicalKeyboardKey(458939);
    B.PhysicalKeyboardKey_458960 = new A.PhysicalKeyboardKey(458960);
    B.PhysicalKeyboardKey_458961 = new A.PhysicalKeyboardKey(458961);
    B.PhysicalKeyboardKey_458962 = new A.PhysicalKeyboardKey(458962);
    B.PhysicalKeyboardKey_458963 = new A.PhysicalKeyboardKey(458963);
    B.PhysicalKeyboardKey_458964 = new A.PhysicalKeyboardKey(458964);
    B.PhysicalKeyboardKey_458967 = new A.PhysicalKeyboardKey(458967);
    B.PhysicalKeyboardKey_458968 = new A.PhysicalKeyboardKey(458968);
    B.PhysicalKeyboardKey_458969 = new A.PhysicalKeyboardKey(458969);
    B.PhysicalKeyboardKey_458976 = new A.PhysicalKeyboardKey(458976);
    B.PhysicalKeyboardKey_458977 = new A.PhysicalKeyboardKey(458977);
    B.PhysicalKeyboardKey_458978 = new A.PhysicalKeyboardKey(458978);
    B.PhysicalKeyboardKey_458979 = new A.PhysicalKeyboardKey(458979);
    B.PhysicalKeyboardKey_458980 = new A.PhysicalKeyboardKey(458980);
    B.PhysicalKeyboardKey_458981 = new A.PhysicalKeyboardKey(458981);
    B.PhysicalKeyboardKey_458982 = new A.PhysicalKeyboardKey(458982);
    B.PhysicalKeyboardKey_458983 = new A.PhysicalKeyboardKey(458983);
    B.PhysicalKeyboardKey_786528 = new A.PhysicalKeyboardKey(786528);
    B.PhysicalKeyboardKey_786529 = new A.PhysicalKeyboardKey(786529);
    B.PhysicalKeyboardKey_786543 = new A.PhysicalKeyboardKey(786543);
    B.PhysicalKeyboardKey_786544 = new A.PhysicalKeyboardKey(786544);
    B.PhysicalKeyboardKey_786546 = new A.PhysicalKeyboardKey(786546);
    B.PhysicalKeyboardKey_786547 = new A.PhysicalKeyboardKey(786547);
    B.PhysicalKeyboardKey_786548 = new A.PhysicalKeyboardKey(786548);
    B.PhysicalKeyboardKey_786549 = new A.PhysicalKeyboardKey(786549);
    B.PhysicalKeyboardKey_786553 = new A.PhysicalKeyboardKey(786553);
    B.PhysicalKeyboardKey_786554 = new A.PhysicalKeyboardKey(786554);
    B.PhysicalKeyboardKey_786563 = new A.PhysicalKeyboardKey(786563);
    B.PhysicalKeyboardKey_786572 = new A.PhysicalKeyboardKey(786572);
    B.PhysicalKeyboardKey_786573 = new A.PhysicalKeyboardKey(786573);
    B.PhysicalKeyboardKey_786580 = new A.PhysicalKeyboardKey(786580);
    B.PhysicalKeyboardKey_786588 = new A.PhysicalKeyboardKey(786588);
    B.PhysicalKeyboardKey_786589 = new A.PhysicalKeyboardKey(786589);
    B.PhysicalKeyboardKey_786608 = new A.PhysicalKeyboardKey(786608);
    B.PhysicalKeyboardKey_786609 = new A.PhysicalKeyboardKey(786609);
    B.PhysicalKeyboardKey_786610 = new A.PhysicalKeyboardKey(786610);
    B.PhysicalKeyboardKey_786611 = new A.PhysicalKeyboardKey(786611);
    B.PhysicalKeyboardKey_786612 = new A.PhysicalKeyboardKey(786612);
    B.PhysicalKeyboardKey_786613 = new A.PhysicalKeyboardKey(786613);
    B.PhysicalKeyboardKey_786614 = new A.PhysicalKeyboardKey(786614);
    B.PhysicalKeyboardKey_786615 = new A.PhysicalKeyboardKey(786615);
    B.PhysicalKeyboardKey_786616 = new A.PhysicalKeyboardKey(786616);
    B.PhysicalKeyboardKey_786637 = new A.PhysicalKeyboardKey(786637);
    B.PhysicalKeyboardKey_786639 = new A.PhysicalKeyboardKey(786639);
    B.PhysicalKeyboardKey_786661 = new A.PhysicalKeyboardKey(786661);
    B.PhysicalKeyboardKey_786819 = new A.PhysicalKeyboardKey(786819);
    B.PhysicalKeyboardKey_786820 = new A.PhysicalKeyboardKey(786820);
    B.PhysicalKeyboardKey_786822 = new A.PhysicalKeyboardKey(786822);
    B.PhysicalKeyboardKey_786826 = new A.PhysicalKeyboardKey(786826);
    B.PhysicalKeyboardKey_786829 = new A.PhysicalKeyboardKey(786829);
    B.PhysicalKeyboardKey_786830 = new A.PhysicalKeyboardKey(786830);
    B.PhysicalKeyboardKey_786834 = new A.PhysicalKeyboardKey(786834);
    B.PhysicalKeyboardKey_786836 = new A.PhysicalKeyboardKey(786836);
    B.PhysicalKeyboardKey_786838 = new A.PhysicalKeyboardKey(786838);
    B.PhysicalKeyboardKey_786844 = new A.PhysicalKeyboardKey(786844);
    B.PhysicalKeyboardKey_786846 = new A.PhysicalKeyboardKey(786846);
    B.PhysicalKeyboardKey_786847 = new A.PhysicalKeyboardKey(786847);
    B.PhysicalKeyboardKey_786850 = new A.PhysicalKeyboardKey(786850);
    B.PhysicalKeyboardKey_786855 = new A.PhysicalKeyboardKey(786855);
    B.PhysicalKeyboardKey_786859 = new A.PhysicalKeyboardKey(786859);
    B.PhysicalKeyboardKey_786862 = new A.PhysicalKeyboardKey(786862);
    B.PhysicalKeyboardKey_786865 = new A.PhysicalKeyboardKey(786865);
    B.PhysicalKeyboardKey_786871 = new A.PhysicalKeyboardKey(786871);
    B.PhysicalKeyboardKey_786891 = new A.PhysicalKeyboardKey(786891);
    B.PhysicalKeyboardKey_786945 = new A.PhysicalKeyboardKey(786945);
    B.PhysicalKeyboardKey_786947 = new A.PhysicalKeyboardKey(786947);
    B.PhysicalKeyboardKey_786951 = new A.PhysicalKeyboardKey(786951);
    B.PhysicalKeyboardKey_786952 = new A.PhysicalKeyboardKey(786952);
    B.PhysicalKeyboardKey_786977 = new A.PhysicalKeyboardKey(786977);
    B.PhysicalKeyboardKey_786979 = new A.PhysicalKeyboardKey(786979);
    B.PhysicalKeyboardKey_786980 = new A.PhysicalKeyboardKey(786980);
    B.PhysicalKeyboardKey_786981 = new A.PhysicalKeyboardKey(786981);
    B.PhysicalKeyboardKey_786982 = new A.PhysicalKeyboardKey(786982);
    B.PhysicalKeyboardKey_786983 = new A.PhysicalKeyboardKey(786983);
    B.PhysicalKeyboardKey_786986 = new A.PhysicalKeyboardKey(786986);
    B.PhysicalKeyboardKey_786989 = new A.PhysicalKeyboardKey(786989);
    B.PhysicalKeyboardKey_786990 = new A.PhysicalKeyboardKey(786990);
    B.PhysicalKeyboardKey_786994 = new A.PhysicalKeyboardKey(786994);
    B.PhysicalKeyboardKey_787065 = new A.PhysicalKeyboardKey(787065);
    B.PhysicalKeyboardKey_787081 = new A.PhysicalKeyboardKey(787081);
    B.PhysicalKeyboardKey_787083 = new A.PhysicalKeyboardKey(787083);
    B.PhysicalKeyboardKey_787084 = new A.PhysicalKeyboardKey(787084);
    B.PhysicalKeyboardKey_787101 = new A.PhysicalKeyboardKey(787101);
    B.PhysicalKeyboardKey_787103 = new A.PhysicalKeyboardKey(787103);
    B.Map_arCny = new C.GeneralConstantMap([16, B.PhysicalKeyboardKey_16, 17, B.PhysicalKeyboardKey_17, 18, B.PhysicalKeyboardKey_18, 19, B.PhysicalKeyboardKey_19, 20, B.PhysicalKeyboardKey_20, 21, B.PhysicalKeyboardKey_21, 22, B.PhysicalKeyboardKey_22, 23, B.PhysicalKeyboardKey_23, 24, B.PhysicalKeyboardKey_24, 65666, B.PhysicalKeyboardKey_65666, 65667, B.PhysicalKeyboardKey_65667, 65717, B.PhysicalKeyboardKey_65717, 392961, B.PhysicalKeyboardKey_392961, 392962, B.PhysicalKeyboardKey_392962, 392963, B.PhysicalKeyboardKey_392963, 392964, B.PhysicalKeyboardKey_392964, 392965, B.PhysicalKeyboardKey_392965, 392966, B.PhysicalKeyboardKey_392966, 392967, B.PhysicalKeyboardKey_392967, 392968, B.PhysicalKeyboardKey_392968, 392969, B.PhysicalKeyboardKey_392969, 392970, B.PhysicalKeyboardKey_392970, 392971, B.PhysicalKeyboardKey_392971, 392972, B.PhysicalKeyboardKey_392972, 392973, B.PhysicalKeyboardKey_392973, 392974, B.PhysicalKeyboardKey_392974, 392975, B.PhysicalKeyboardKey_392975, 392976, B.PhysicalKeyboardKey_392976, 392977, B.PhysicalKeyboardKey_392977, 392978, B.PhysicalKeyboardKey_392978, 392979, B.PhysicalKeyboardKey_392979, 392980, B.PhysicalKeyboardKey_392980, 392981, B.PhysicalKeyboardKey_392981, 392982, B.PhysicalKeyboardKey_392982, 392983, B.PhysicalKeyboardKey_392983, 392984, B.PhysicalKeyboardKey_392984, 392985, B.PhysicalKeyboardKey_392985, 392986, B.PhysicalKeyboardKey_392986, 392987, B.PhysicalKeyboardKey_392987, 392988, B.PhysicalKeyboardKey_392988, 392989, B.PhysicalKeyboardKey_392989, 392990, B.PhysicalKeyboardKey_392990, 392991, B.PhysicalKeyboardKey_392991, 458752, B.PhysicalKeyboardKey_458752, 458753, B.PhysicalKeyboardKey_458753, 458754, B.PhysicalKeyboardKey_458754, 458755, B.PhysicalKeyboardKey_458755, 458756, B.PhysicalKeyboardKey_458756, 458757, B.PhysicalKeyboardKey_458757, 458758, B.PhysicalKeyboardKey_458758, 458759, B.PhysicalKeyboardKey_458759, 458760, B.PhysicalKeyboardKey_458760, 458761, B.PhysicalKeyboardKey_458761, 458762, B.PhysicalKeyboardKey_458762, 458763, B.PhysicalKeyboardKey_458763, 458764, B.PhysicalKeyboardKey_458764, 458765, B.PhysicalKeyboardKey_458765, 458766, B.PhysicalKeyboardKey_458766, 458767, B.PhysicalKeyboardKey_458767, 458768, B.PhysicalKeyboardKey_458768, 458769, B.PhysicalKeyboardKey_458769, 458770, B.PhysicalKeyboardKey_458770, 458771, B.PhysicalKeyboardKey_458771, 458772, B.PhysicalKeyboardKey_458772, 458773, B.PhysicalKeyboardKey_458773, 458774, B.PhysicalKeyboardKey_458774, 458775, B.PhysicalKeyboardKey_458775, 458776, B.PhysicalKeyboardKey_458776, 458777, B.PhysicalKeyboardKey_458777, 458778, B.PhysicalKeyboardKey_458778, 458779, B.PhysicalKeyboardKey_458779, 458780, B.PhysicalKeyboardKey_458780, 458781, B.PhysicalKeyboardKey_458781, 458782, B.PhysicalKeyboardKey_458782, 458783, B.PhysicalKeyboardKey_458783, 458784, B.PhysicalKeyboardKey_458784, 458785, B.PhysicalKeyboardKey_458785, 458786, B.PhysicalKeyboardKey_458786, 458787, B.PhysicalKeyboardKey_458787, 458788, B.PhysicalKeyboardKey_458788, 458789, B.PhysicalKeyboardKey_458789, 458790, B.PhysicalKeyboardKey_458790, 458791, B.PhysicalKeyboardKey_458791, 458792, B.PhysicalKeyboardKey_458792, 458793, B.PhysicalKeyboardKey_458793, 458794, B.PhysicalKeyboardKey_458794, 458795, B.PhysicalKeyboardKey_458795, 458796, B.PhysicalKeyboardKey_458796, 458797, B.PhysicalKeyboardKey_458797, 458798, B.PhysicalKeyboardKey_458798, 458799, B.PhysicalKeyboardKey_458799, 458800, B.PhysicalKeyboardKey_458800, 458801, B.PhysicalKeyboardKey_458801, 458803, B.PhysicalKeyboardKey_458803, 458804, B.PhysicalKeyboardKey_458804, 458805, B.PhysicalKeyboardKey_458805, 458806, B.PhysicalKeyboardKey_458806, 458807, B.PhysicalKeyboardKey_458807, 458808, B.PhysicalKeyboardKey_458808, 458809, B.PhysicalKeyboardKey_458809, 458810, B.PhysicalKeyboardKey_458810, 458811, B.PhysicalKeyboardKey_458811, 458812, B.PhysicalKeyboardKey_458812, 458813, B.PhysicalKeyboardKey_458813, 458814, B.PhysicalKeyboardKey_458814, 458815, B.PhysicalKeyboardKey_458815, 458816, B.PhysicalKeyboardKey_458816, 458817, B.PhysicalKeyboardKey_458817, 458818, B.PhysicalKeyboardKey_458818, 458819, B.PhysicalKeyboardKey_458819, 458820, B.PhysicalKeyboardKey_458820, 458821, B.PhysicalKeyboardKey_458821, 458822, B.PhysicalKeyboardKey_458822, 458823, B.PhysicalKeyboardKey_458823, 458824, B.PhysicalKeyboardKey_458824, 458825, B.PhysicalKeyboardKey_458825, 458826, B.PhysicalKeyboardKey_458826, 458827, B.PhysicalKeyboardKey_458827, 458828, B.PhysicalKeyboardKey_458828, 458829, B.PhysicalKeyboardKey_458829, 458830, B.PhysicalKeyboardKey_458830, 458831, B.PhysicalKeyboardKey_458831, 458832, B.PhysicalKeyboardKey_458832, 458833, B.PhysicalKeyboardKey_458833, 458834, B.PhysicalKeyboardKey_458834, 458835, B.PhysicalKeyboardKey_458835, 458836, B.PhysicalKeyboardKey_458836, 458837, B.PhysicalKeyboardKey_458837, 458838, B.PhysicalKeyboardKey_458838, 458839, B.PhysicalKeyboardKey_458839, 458840, B.PhysicalKeyboardKey_458840, 458841, B.PhysicalKeyboardKey_458841, 458842, B.PhysicalKeyboardKey_458842, 458843, B.PhysicalKeyboardKey_458843, 458844, B.PhysicalKeyboardKey_458844, 458845, B.PhysicalKeyboardKey_458845, 458846, B.PhysicalKeyboardKey_458846, 458847, B.PhysicalKeyboardKey_458847, 458848, B.PhysicalKeyboardKey_458848, 458849, B.PhysicalKeyboardKey_458849, 458850, B.PhysicalKeyboardKey_458850, 458851, B.PhysicalKeyboardKey_458851, 458852, B.PhysicalKeyboardKey_458852, 458853, B.PhysicalKeyboardKey_458853, 458854, B.PhysicalKeyboardKey_458854, 458855, B.PhysicalKeyboardKey_458855, 458856, B.PhysicalKeyboardKey_458856, 458857, B.PhysicalKeyboardKey_458857, 458858, B.PhysicalKeyboardKey_458858, 458859, B.PhysicalKeyboardKey_458859, 458860, B.PhysicalKeyboardKey_458860, 458861, B.PhysicalKeyboardKey_458861, 458862, B.PhysicalKeyboardKey_458862, 458863, B.PhysicalKeyboardKey_458863, 458864, B.PhysicalKeyboardKey_458864, 458865, B.PhysicalKeyboardKey_458865, 458866, B.PhysicalKeyboardKey_458866, 458867, B.PhysicalKeyboardKey_458867, 458868, B.PhysicalKeyboardKey_458868, 458869, B.PhysicalKeyboardKey_458869, 458871, B.PhysicalKeyboardKey_458871, 458873, B.PhysicalKeyboardKey_458873, 458874, B.PhysicalKeyboardKey_458874, 458875, B.PhysicalKeyboardKey_458875, 458876, B.PhysicalKeyboardKey_458876, 458877, B.PhysicalKeyboardKey_458877, 458878, B.PhysicalKeyboardKey_458878, 458879, B.PhysicalKeyboardKey_458879, 458880, B.PhysicalKeyboardKey_458880, 458881, B.PhysicalKeyboardKey_458881, 458885, B.PhysicalKeyboardKey_458885, 458887, B.PhysicalKeyboardKey_458887, 458888, B.PhysicalKeyboardKey_458888, 458889, B.PhysicalKeyboardKey_458889, 458890, B.PhysicalKeyboardKey_458890, 458891, B.PhysicalKeyboardKey_458891, 458896, B.PhysicalKeyboardKey_458896, 458897, B.PhysicalKeyboardKey_458897, 458898, B.PhysicalKeyboardKey_458898, 458899, B.PhysicalKeyboardKey_458899, 458900, B.PhysicalKeyboardKey_458900, 458907, B.PhysicalKeyboardKey_458907, 458915, B.PhysicalKeyboardKey_458915, 458934, B.PhysicalKeyboardKey_458934, 458935, B.PhysicalKeyboardKey_458935, 458939, B.PhysicalKeyboardKey_458939, 458960, B.PhysicalKeyboardKey_458960, 458961, B.PhysicalKeyboardKey_458961, 458962, B.PhysicalKeyboardKey_458962, 458963, B.PhysicalKeyboardKey_458963, 458964, B.PhysicalKeyboardKey_458964, 458967, B.PhysicalKeyboardKey_458967, 458968, B.PhysicalKeyboardKey_458968, 458969, B.PhysicalKeyboardKey_458969, 458976, B.PhysicalKeyboardKey_458976, 458977, B.PhysicalKeyboardKey_458977, 458978, B.PhysicalKeyboardKey_458978, 458979, B.PhysicalKeyboardKey_458979, 458980, B.PhysicalKeyboardKey_458980, 458981, B.PhysicalKeyboardKey_458981, 458982, B.PhysicalKeyboardKey_458982, 458983, B.PhysicalKeyboardKey_458983, 786528, B.PhysicalKeyboardKey_786528, 786529, B.PhysicalKeyboardKey_786529, 786543, B.PhysicalKeyboardKey_786543, 786544, B.PhysicalKeyboardKey_786544, 786546, B.PhysicalKeyboardKey_786546, 786547, B.PhysicalKeyboardKey_786547, 786548, B.PhysicalKeyboardKey_786548, 786549, B.PhysicalKeyboardKey_786549, 786553, B.PhysicalKeyboardKey_786553, 786554, B.PhysicalKeyboardKey_786554, 786563, B.PhysicalKeyboardKey_786563, 786572, B.PhysicalKeyboardKey_786572, 786573, B.PhysicalKeyboardKey_786573, 786580, B.PhysicalKeyboardKey_786580, 786588, B.PhysicalKeyboardKey_786588, 786589, B.PhysicalKeyboardKey_786589, 786608, B.PhysicalKeyboardKey_786608, 786609, B.PhysicalKeyboardKey_786609, 786610, B.PhysicalKeyboardKey_786610, 786611, B.PhysicalKeyboardKey_786611, 786612, B.PhysicalKeyboardKey_786612, 786613, B.PhysicalKeyboardKey_786613, 786614, B.PhysicalKeyboardKey_786614, 786615, B.PhysicalKeyboardKey_786615, 786616, B.PhysicalKeyboardKey_786616, 786637, B.PhysicalKeyboardKey_786637, 786639, B.PhysicalKeyboardKey_786639, 786661, B.PhysicalKeyboardKey_786661, 786819, B.PhysicalKeyboardKey_786819, 786820, B.PhysicalKeyboardKey_786820, 786822, B.PhysicalKeyboardKey_786822, 786826, B.PhysicalKeyboardKey_786826, 786829, B.PhysicalKeyboardKey_786829, 786830, B.PhysicalKeyboardKey_786830, 786834, B.PhysicalKeyboardKey_786834, 786836, B.PhysicalKeyboardKey_786836, 786838, B.PhysicalKeyboardKey_786838, 786844, B.PhysicalKeyboardKey_786844, 786846, B.PhysicalKeyboardKey_786846, 786847, B.PhysicalKeyboardKey_786847, 786850, B.PhysicalKeyboardKey_786850, 786855, B.PhysicalKeyboardKey_786855, 786859, B.PhysicalKeyboardKey_786859, 786862, B.PhysicalKeyboardKey_786862, 786865, B.PhysicalKeyboardKey_786865, 786871, B.PhysicalKeyboardKey_786871, 786891, B.PhysicalKeyboardKey_786891, 786945, B.PhysicalKeyboardKey_786945, 786947, B.PhysicalKeyboardKey_786947, 786951, B.PhysicalKeyboardKey_786951, 786952, B.PhysicalKeyboardKey_786952, 786977, B.PhysicalKeyboardKey_786977, 786979, B.PhysicalKeyboardKey_786979, 786980, B.PhysicalKeyboardKey_786980, 786981, B.PhysicalKeyboardKey_786981, 786982, B.PhysicalKeyboardKey_786982, 786983, B.PhysicalKeyboardKey_786983, 786986, B.PhysicalKeyboardKey_786986, 786989, B.PhysicalKeyboardKey_786989, 786990, B.PhysicalKeyboardKey_786990, 786994, B.PhysicalKeyboardKey_786994, 787065, B.PhysicalKeyboardKey_787065, 787081, B.PhysicalKeyboardKey_787081, 787083, B.PhysicalKeyboardKey_787083, 787084, B.PhysicalKeyboardKey_787084, 787101, B.PhysicalKeyboardKey_787101, 787103, B.PhysicalKeyboardKey_787103], C.findType("GeneralConstantMap<int,PhysicalKeyboardKey>"));
    B.Object_4AN = {AVRInput: 0, AVRPower: 1, Accel: 2, Accept: 3, Again: 4, AllCandidates: 5, Alphanumeric: 6, AltGraph: 7, AppSwitch: 8, ArrowDown: 9, ArrowLeft: 10, ArrowRight: 11, ArrowUp: 12, Attn: 13, AudioBalanceLeft: 14, AudioBalanceRight: 15, AudioBassBoostDown: 16, AudioBassBoostToggle: 17, AudioBassBoostUp: 18, AudioFaderFront: 19, AudioFaderRear: 20, AudioSurroundModeNext: 21, AudioTrebleDown: 22, AudioTrebleUp: 23, AudioVolumeDown: 24, AudioVolumeMute: 25, AudioVolumeUp: 26, Backspace: 27, BrightnessDown: 28, BrightnessUp: 29, BrowserBack: 30, BrowserFavorites: 31, BrowserForward: 32, BrowserHome: 33, BrowserRefresh: 34, BrowserSearch: 35, BrowserStop: 36, Call: 37, Camera: 38, CameraFocus: 39, Cancel: 40, CapsLock: 41, ChannelDown: 42, ChannelUp: 43, Clear: 44, Close: 45, ClosedCaptionToggle: 46, CodeInput: 47, ColorF0Red: 48, ColorF1Green: 49, ColorF2Yellow: 50, ColorF3Blue: 51, ColorF4Grey: 52, ColorF5Brown: 53, Compose: 54, ContextMenu: 55, Convert: 56, Copy: 57, CrSel: 58, Cut: 59, DVR: 60, Delete: 61, Dimmer: 62, DisplaySwap: 63, Eisu: 64, Eject: 65, End: 66, EndCall: 67, Enter: 68, EraseEof: 69, Esc: 70, Escape: 71, ExSel: 72, Execute: 73, Exit: 74, F1: 75, F10: 76, F11: 77, F12: 78, F13: 79, F14: 80, F15: 81, F16: 82, F17: 83, F18: 84, F19: 85, F2: 86, F20: 87, F21: 88, F22: 89, F23: 90, F24: 91, F3: 92, F4: 93, F5: 94, F6: 95, F7: 96, F8: 97, F9: 98, FavoriteClear0: 99, FavoriteClear1: 100, FavoriteClear2: 101, FavoriteClear3: 102, FavoriteRecall0: 103, FavoriteRecall1: 104, FavoriteRecall2: 105, FavoriteRecall3: 106, FavoriteStore0: 107, FavoriteStore1: 108, FavoriteStore2: 109, FavoriteStore3: 110, FinalMode: 111, Find: 112, Fn: 113, FnLock: 114, GoBack: 115, GoHome: 116, GroupFirst: 117, GroupLast: 118, GroupNext: 119, GroupPrevious: 120, Guide: 121, GuideNextDay: 122, GuidePreviousDay: 123, HangulMode: 124, HanjaMode: 125, Hankaku: 126, HeadsetHook: 127, Help: 128, Hibernate: 129, Hiragana: 130, HiraganaKatakana: 131, Home: 132, Hyper: 133, Info: 134, Insert: 135, InstantReplay: 136, JunjaMode: 137, KanaMode: 138, KanjiMode: 139, Katakana: 140, Key11: 141, Key12: 142, LastNumberRedial: 143, LaunchApplication1: 144, LaunchApplication2: 145, LaunchAssistant: 146, LaunchCalendar: 147, LaunchContacts: 148, LaunchControlPanel: 149, LaunchMail: 150, LaunchMediaPlayer: 151, LaunchMusicPlayer: 152, LaunchPhone: 153, LaunchScreenSaver: 154, LaunchSpreadsheet: 155, LaunchWebBrowser: 156, LaunchWebCam: 157, LaunchWordProcessor: 158, Link: 159, ListProgram: 160, LiveContent: 161, Lock: 162, LogOff: 163, MailForward: 164, MailReply: 165, MailSend: 166, MannerMode: 167, MediaApps: 168, MediaAudioTrack: 169, MediaClose: 170, MediaFastForward: 171, MediaLast: 172, MediaPause: 173, MediaPlay: 174, MediaPlayPause: 175, MediaRecord: 176, MediaRewind: 177, MediaSkip: 178, MediaSkipBackward: 179, MediaSkipForward: 180, MediaStepBackward: 181, MediaStepForward: 182, MediaStop: 183, MediaTopMenu: 184, MediaTrackNext: 185, MediaTrackPrevious: 186, MicrophoneToggle: 187, MicrophoneVolumeDown: 188, MicrophoneVolumeMute: 189, MicrophoneVolumeUp: 190, ModeChange: 191, NavigateIn: 192, NavigateNext: 193, NavigateOut: 194, NavigatePrevious: 195, New: 196, NextCandidate: 197, NextFavoriteChannel: 198, NextUserProfile: 199, NonConvert: 200, Notification: 201, NumLock: 202, OnDemand: 203, Open: 204, PageDown: 205, PageUp: 206, Pairing: 207, Paste: 208, Pause: 209, PinPDown: 210, PinPMove: 211, PinPToggle: 212, PinPUp: 213, Play: 214, PlaySpeedDown: 215, PlaySpeedReset: 216, PlaySpeedUp: 217, Power: 218, PowerOff: 219, PreviousCandidate: 220, Print: 221, PrintScreen: 222, Process: 223, Props: 224, RandomToggle: 225, RcLowBattery: 226, RecordSpeedNext: 227, Redo: 228, RfBypass: 229, Romaji: 230, STBInput: 231, STBPower: 232, Save: 233, ScanChannelsToggle: 234, ScreenModeNext: 235, ScrollLock: 236, Select: 237, Settings: 238, ShiftLevel5: 239, SingleCandidate: 240, Soft1: 241, Soft2: 242, Soft3: 243, Soft4: 244, Soft5: 245, Soft6: 246, Soft7: 247, Soft8: 248, SpeechCorrectionList: 249, SpeechInputToggle: 250, SpellCheck: 251, SplitScreenToggle: 252, Standby: 253, Subtitle: 254, Super: 255, Symbol: 256, SymbolLock: 257, TV: 258, TV3DMode: 259, TVAntennaCable: 260, TVAudioDescription: 261, TVAudioDescriptionMixDown: 262, TVAudioDescriptionMixUp: 263, TVContentsMenu: 264, TVDataService: 265, TVInput: 266, TVInputComponent1: 267, TVInputComponent2: 268, TVInputComposite1: 269, TVInputComposite2: 270, TVInputHDMI1: 271, TVInputHDMI2: 272, TVInputHDMI3: 273, TVInputHDMI4: 274, TVInputVGA1: 275, TVMediaContext: 276, TVNetwork: 277, TVNumberEntry: 278, TVPower: 279, TVRadioService: 280, TVSatellite: 281, TVSatelliteBS: 282, TVSatelliteCS: 283, TVSatelliteToggle: 284, TVTerrestrialAnalog: 285, TVTerrestrialDigital: 286, TVTimer: 287, Tab: 288, Teletext: 289, Undo: 290, Unidentified: 291, VideoModeNext: 292, VoiceDial: 293, WakeUp: 294, Wink: 295, Zenkaku: 296, ZenkakuHankaku: 297, ZoomIn: 298, ZoomOut: 299, ZoomToggle: 300};
    B.Map_o06v8 = new C.ConstantStringMap(B.Object_4AN, [4294970632, 4294970633, 4294967553, 4294968577, 4294968578, 4294969089, 4294969090, 4294967555, 4294971393, 4294968065, 4294968066, 4294968067, 4294968068, 4294968579, 4294970625, 4294970626, 4294970627, 4294970882, 4294970628, 4294970629, 4294970630, 4294970631, 4294970884, 4294970885, 4294969871, 4294969873, 4294969872, 4294967304, 4294968833, 4294968834, 4294970369, 4294970370, 4294970371, 4294970372, 4294970373, 4294970374, 4294970375, 4294971394, 4294968835, 4294971395, 4294968580, 4294967556, 4294970634, 4294970635, 4294968321, 4294969857, 4294970642, 4294969091, 4294970636, 4294970637, 4294970638, 4294970639, 4294970640, 4294970641, 4294969092, 4294968581, 4294969093, 4294968322, 4294968323, 4294968324, 4294970703, 4294967423, 4294970643, 4294970644, 4294969108, 4294968836, 4294968069, 4294971396, 4294967309, 4294968325, 4294967323, 4294967323, 4294968326, 4294968582, 4294970645, 4294969345, 4294969354, 4294969355, 4294969356, 4294969357, 4294969358, 4294969359, 4294969360, 4294969361, 4294969362, 4294969363, 4294969346, 4294969364, 4294969365, 4294969366, 4294969367, 4294969368, 4294969347, 4294969348, 4294969349, 4294969350, 4294969351, 4294969352, 4294969353, 4294970646, 4294970647, 4294970648, 4294970649, 4294970650, 4294970651, 4294970652, 4294970653, 4294970654, 4294970655, 4294970656, 4294970657, 4294969094, 4294968583, 4294967558, 4294967559, 4294971397, 4294971398, 4294969095, 4294969096, 4294969097, 4294969098, 4294970658, 4294970659, 4294970660, 4294969105, 4294969106, 4294969109, 4294971399, 4294968584, 4294968841, 4294969110, 4294969111, 4294968070, 4294967560, 4294970661, 4294968327, 4294970662, 4294969107, 4294969112, 4294969113, 4294969114, 4294971905, 4294971906, 4294971400, 4294970118, 4294970113, 4294970126, 4294970114, 4294970124, 4294970127, 4294970115, 4294970116, 4294970117, 4294970125, 4294970119, 4294970120, 4294970121, 4294970122, 4294970123, 4294970663, 4294970664, 4294970665, 4294970666, 4294968837, 4294969858, 4294969859, 4294969860, 4294971402, 4294970667, 4294970704, 4294970715, 4294970668, 4294970669, 4294970670, 4294970671, 4294969861, 4294970672, 4294970673, 4294970674, 4294970705, 4294970706, 4294970707, 4294970708, 4294969863, 4294970709, 4294969864, 4294969865, 4294970886, 4294970887, 4294970889, 4294970888, 4294969099, 4294970710, 4294970711, 4294970712, 4294970713, 4294969866, 4294969100, 4294970675, 4294970676, 4294969101, 4294971401, 4294967562, 4294970677, 4294969867, 4294968071, 4294968072, 4294970714, 4294968328, 4294968585, 4294970678, 4294970679, 4294970680, 4294970681, 4294968586, 4294970682, 4294970683, 4294970684, 4294968838, 4294968839, 4294969102, 4294969868, 4294968840, 4294969103, 4294968587, 4294970685, 4294970686, 4294970687, 4294968329, 4294970688, 4294969115, 4294970693, 4294970694, 4294969869, 4294970689, 4294970690, 4294967564, 4294968588, 4294970691, 4294967569, 4294969104, 4294969601, 4294969602, 4294969603, 4294969604, 4294969605, 4294969606, 4294969607, 4294969608, 4294971137, 4294971138, 4294969870, 4294970692, 4294968842, 4294970695, 4294967566, 4294967567, 4294967568, 4294970697, 4294971649, 4294971650, 4294971651, 4294971652, 4294971653, 4294971654, 4294971655, 4294970698, 4294971656, 4294971657, 4294971658, 4294971659, 4294971660, 4294971661, 4294971662, 4294971663, 4294971664, 4294971665, 4294971666, 4294971667, 4294970699, 4294971668, 4294971669, 4294971670, 4294971671, 4294971672, 4294971673, 4294971674, 4294971675, 4294967305, 4294970696, 4294968330, 4294967297, 4294970700, 4294971403, 4294968843, 4294970701, 4294969116, 4294969117, 4294968589, 4294968590, 4294970702], C.findType("ConstantStringMap<String,int>"));
    B.Map_o0QDz = new C.ConstantStringMap(B.Object_4AN, [B.LogicalKeyboardKey_4294970632, B.LogicalKeyboardKey_4294970633, B.LogicalKeyboardKey_4294967553, B.LogicalKeyboardKey_4294968577, B.LogicalKeyboardKey_4294968578, B.LogicalKeyboardKey_4294969089, B.LogicalKeyboardKey_4294969090, B.LogicalKeyboardKey_4294967555, B.LogicalKeyboardKey_4294971393, E.LogicalKeyboardKey_4294968065, E.LogicalKeyboardKey_4294968066, E.LogicalKeyboardKey_4294968067, E.LogicalKeyboardKey_4294968068, B.LogicalKeyboardKey_4294968579, B.LogicalKeyboardKey_4294970625, B.LogicalKeyboardKey_4294970626, B.LogicalKeyboardKey_4294970627, B.LogicalKeyboardKey_4294970882, B.LogicalKeyboardKey_4294970628, B.LogicalKeyboardKey_4294970629, B.LogicalKeyboardKey_4294970630, B.LogicalKeyboardKey_4294970631, B.LogicalKeyboardKey_4294970884, B.LogicalKeyboardKey_4294970885, B.LogicalKeyboardKey_4294969871, B.LogicalKeyboardKey_4294969873, B.LogicalKeyboardKey_4294969872, E.LogicalKeyboardKey_4294967304, B.LogicalKeyboardKey_4294968833, B.LogicalKeyboardKey_4294968834, B.LogicalKeyboardKey_4294970369, B.LogicalKeyboardKey_4294970370, B.LogicalKeyboardKey_4294970371, B.LogicalKeyboardKey_4294970372, B.LogicalKeyboardKey_4294970373, B.LogicalKeyboardKey_4294970374, B.LogicalKeyboardKey_4294970375, B.LogicalKeyboardKey_4294971394, B.LogicalKeyboardKey_4294968835, B.LogicalKeyboardKey_4294971395, B.LogicalKeyboardKey_4294968580, B.LogicalKeyboardKey_4294967556, B.LogicalKeyboardKey_4294970634, B.LogicalKeyboardKey_4294970635, B.LogicalKeyboardKey_4294968321, B.LogicalKeyboardKey_4294969857, B.LogicalKeyboardKey_4294970642, B.LogicalKeyboardKey_4294969091, B.LogicalKeyboardKey_4294970636, B.LogicalKeyboardKey_4294970637, B.LogicalKeyboardKey_4294970638, B.LogicalKeyboardKey_4294970639, B.LogicalKeyboardKey_4294970640, B.LogicalKeyboardKey_4294970641, B.LogicalKeyboardKey_4294969092, B.LogicalKeyboardKey_4294968581, B.LogicalKeyboardKey_4294969093, B.LogicalKeyboardKey_4294968322, B.LogicalKeyboardKey_4294968323, B.LogicalKeyboardKey_4294968324, B.LogicalKeyboardKey_4294970703, E.LogicalKeyboardKey_4294967423, B.LogicalKeyboardKey_4294970643, B.LogicalKeyboardKey_4294970644, B.LogicalKeyboardKey_4294969108, B.LogicalKeyboardKey_4294968836, E.LogicalKeyboardKey_4294968069, B.LogicalKeyboardKey_4294971396, E.LogicalKeyboardKey_4294967309, B.LogicalKeyboardKey_4294968325, E.LogicalKeyboardKey_4294967323, E.LogicalKeyboardKey_4294967323, B.LogicalKeyboardKey_4294968326, B.LogicalKeyboardKey_4294968582, B.LogicalKeyboardKey_4294970645, B.LogicalKeyboardKey_4294969345, B.LogicalKeyboardKey_4294969354, B.LogicalKeyboardKey_4294969355, B.LogicalKeyboardKey_4294969356, B.LogicalKeyboardKey_4294969357, B.LogicalKeyboardKey_4294969358, B.LogicalKeyboardKey_4294969359, B.LogicalKeyboardKey_4294969360, B.LogicalKeyboardKey_4294969361, B.LogicalKeyboardKey_4294969362, B.LogicalKeyboardKey_4294969363, B.LogicalKeyboardKey_4294969346, B.LogicalKeyboardKey_4294969364, B.LogicalKeyboardKey_4294969365, B.LogicalKeyboardKey_4294969366, B.LogicalKeyboardKey_4294969367, B.LogicalKeyboardKey_4294969368, B.LogicalKeyboardKey_4294969347, B.LogicalKeyboardKey_4294969348, B.LogicalKeyboardKey_4294969349, B.LogicalKeyboardKey_4294969350, B.LogicalKeyboardKey_4294969351, B.LogicalKeyboardKey_4294969352, B.LogicalKeyboardKey_4294969353, B.LogicalKeyboardKey_4294970646, B.LogicalKeyboardKey_4294970647, B.LogicalKeyboardKey_4294970648, B.LogicalKeyboardKey_4294970649, B.LogicalKeyboardKey_4294970650, B.LogicalKeyboardKey_4294970651, B.LogicalKeyboardKey_4294970652, B.LogicalKeyboardKey_4294970653, B.LogicalKeyboardKey_4294970654, B.LogicalKeyboardKey_4294970655, B.LogicalKeyboardKey_4294970656, B.LogicalKeyboardKey_4294970657, B.LogicalKeyboardKey_4294969094, B.LogicalKeyboardKey_4294968583, B.LogicalKeyboardKey_4294967558, B.LogicalKeyboardKey_4294967559, B.LogicalKeyboardKey_4294971397, B.LogicalKeyboardKey_4294971398, B.LogicalKeyboardKey_4294969095, B.LogicalKeyboardKey_4294969096, B.LogicalKeyboardKey_4294969097, B.LogicalKeyboardKey_4294969098, B.LogicalKeyboardKey_4294970658, B.LogicalKeyboardKey_4294970659, B.LogicalKeyboardKey_4294970660, B.LogicalKeyboardKey_4294969105, B.LogicalKeyboardKey_4294969106, B.LogicalKeyboardKey_4294969109, B.LogicalKeyboardKey_4294971399, B.LogicalKeyboardKey_4294968584, B.LogicalKeyboardKey_4294968841, B.LogicalKeyboardKey_4294969110, B.LogicalKeyboardKey_4294969111, E.LogicalKeyboardKey_4294968070, B.LogicalKeyboardKey_4294967560, B.LogicalKeyboardKey_4294970661, B.LogicalKeyboardKey_4294968327, B.LogicalKeyboardKey_4294970662, B.LogicalKeyboardKey_4294969107, B.LogicalKeyboardKey_4294969112, B.LogicalKeyboardKey_4294969113, B.LogicalKeyboardKey_4294969114, B.LogicalKeyboardKey_4294971905, B.LogicalKeyboardKey_4294971906, B.LogicalKeyboardKey_4294971400, B.LogicalKeyboardKey_4294970118, B.LogicalKeyboardKey_4294970113, B.LogicalKeyboardKey_4294970126, B.LogicalKeyboardKey_4294970114, B.LogicalKeyboardKey_4294970124, B.LogicalKeyboardKey_4294970127, B.LogicalKeyboardKey_4294970115, B.LogicalKeyboardKey_4294970116, B.LogicalKeyboardKey_4294970117, B.LogicalKeyboardKey_4294970125, B.LogicalKeyboardKey_4294970119, B.LogicalKeyboardKey_4294970120, B.LogicalKeyboardKey_4294970121, B.LogicalKeyboardKey_4294970122, B.LogicalKeyboardKey_4294970123, B.LogicalKeyboardKey_4294970663, B.LogicalKeyboardKey_4294970664, B.LogicalKeyboardKey_4294970665, B.LogicalKeyboardKey_4294970666, B.LogicalKeyboardKey_4294968837, B.LogicalKeyboardKey_4294969858, B.LogicalKeyboardKey_4294969859, B.LogicalKeyboardKey_4294969860, B.LogicalKeyboardKey_4294971402, B.LogicalKeyboardKey_4294970667, B.LogicalKeyboardKey_4294970704, B.LogicalKeyboardKey_4294970715, B.LogicalKeyboardKey_4294970668, B.LogicalKeyboardKey_4294970669, B.LogicalKeyboardKey_4294970670, B.LogicalKeyboardKey_4294970671, B.LogicalKeyboardKey_4294969861, B.LogicalKeyboardKey_4294970672, B.LogicalKeyboardKey_4294970673, B.LogicalKeyboardKey_4294970674, B.LogicalKeyboardKey_4294970705, B.LogicalKeyboardKey_4294970706, B.LogicalKeyboardKey_4294970707, B.LogicalKeyboardKey_4294970708, B.LogicalKeyboardKey_4294969863, B.LogicalKeyboardKey_4294970709, B.LogicalKeyboardKey_4294969864, B.LogicalKeyboardKey_4294969865, B.LogicalKeyboardKey_4294970886, B.LogicalKeyboardKey_4294970887, B.LogicalKeyboardKey_4294970889, B.LogicalKeyboardKey_4294970888, B.LogicalKeyboardKey_4294969099, B.LogicalKeyboardKey_4294970710, B.LogicalKeyboardKey_4294970711, B.LogicalKeyboardKey_4294970712, B.LogicalKeyboardKey_4294970713, B.LogicalKeyboardKey_4294969866, B.LogicalKeyboardKey_4294969100, B.LogicalKeyboardKey_4294970675, B.LogicalKeyboardKey_4294970676, B.LogicalKeyboardKey_4294969101, B.LogicalKeyboardKey_4294971401, E.LogicalKeyboardKey_4294967562, B.LogicalKeyboardKey_4294970677, B.LogicalKeyboardKey_4294969867, E.LogicalKeyboardKey_4294968071, E.LogicalKeyboardKey_4294968072, B.LogicalKeyboardKey_4294970714, B.LogicalKeyboardKey_4294968328, B.LogicalKeyboardKey_4294968585, B.LogicalKeyboardKey_4294970678, B.LogicalKeyboardKey_4294970679, B.LogicalKeyboardKey_4294970680, B.LogicalKeyboardKey_4294970681, B.LogicalKeyboardKey_4294968586, B.LogicalKeyboardKey_4294970682, B.LogicalKeyboardKey_4294970683, B.LogicalKeyboardKey_4294970684, B.LogicalKeyboardKey_4294968838, B.LogicalKeyboardKey_4294968839, B.LogicalKeyboardKey_4294969102, B.LogicalKeyboardKey_4294969868, B.LogicalKeyboardKey_4294968840, B.LogicalKeyboardKey_4294969103, B.LogicalKeyboardKey_4294968587, B.LogicalKeyboardKey_4294970685, B.LogicalKeyboardKey_4294970686, B.LogicalKeyboardKey_4294970687, B.LogicalKeyboardKey_4294968329, B.LogicalKeyboardKey_4294970688, B.LogicalKeyboardKey_4294969115, B.LogicalKeyboardKey_4294970693, B.LogicalKeyboardKey_4294970694, B.LogicalKeyboardKey_4294969869, B.LogicalKeyboardKey_4294970689, B.LogicalKeyboardKey_4294970690, B.LogicalKeyboardKey_4294967564, E.LogicalKeyboardKey_4294968588, B.LogicalKeyboardKey_4294970691, B.LogicalKeyboardKey_4294967569, B.LogicalKeyboardKey_4294969104, B.LogicalKeyboardKey_4294969601, B.LogicalKeyboardKey_4294969602, B.LogicalKeyboardKey_4294969603, B.LogicalKeyboardKey_4294969604, B.LogicalKeyboardKey_4294969605, B.LogicalKeyboardKey_4294969606, B.LogicalKeyboardKey_4294969607, B.LogicalKeyboardKey_4294969608, B.LogicalKeyboardKey_4294971137, B.LogicalKeyboardKey_4294971138, B.LogicalKeyboardKey_4294969870, B.LogicalKeyboardKey_4294970692, B.LogicalKeyboardKey_4294968842, B.LogicalKeyboardKey_4294970695, B.LogicalKeyboardKey_4294967566, B.LogicalKeyboardKey_4294967567, B.LogicalKeyboardKey_4294967568, B.LogicalKeyboardKey_4294970697, B.LogicalKeyboardKey_4294971649, B.LogicalKeyboardKey_4294971650, B.LogicalKeyboardKey_4294971651, B.LogicalKeyboardKey_4294971652, B.LogicalKeyboardKey_4294971653, B.LogicalKeyboardKey_4294971654, B.LogicalKeyboardKey_4294971655, B.LogicalKeyboardKey_4294970698, B.LogicalKeyboardKey_4294971656, B.LogicalKeyboardKey_4294971657, B.LogicalKeyboardKey_4294971658, B.LogicalKeyboardKey_4294971659, B.LogicalKeyboardKey_4294971660, B.LogicalKeyboardKey_4294971661, B.LogicalKeyboardKey_4294971662, B.LogicalKeyboardKey_4294971663, B.LogicalKeyboardKey_4294971664, B.LogicalKeyboardKey_4294971665, B.LogicalKeyboardKey_4294971666, B.LogicalKeyboardKey_4294971667, B.LogicalKeyboardKey_4294970699, B.LogicalKeyboardKey_4294971668, B.LogicalKeyboardKey_4294971669, B.LogicalKeyboardKey_4294971670, B.LogicalKeyboardKey_4294971671, B.LogicalKeyboardKey_4294971672, B.LogicalKeyboardKey_4294971673, B.LogicalKeyboardKey_4294971674, B.LogicalKeyboardKey_4294971675, E.LogicalKeyboardKey_4294967305, B.LogicalKeyboardKey_4294970696, B.LogicalKeyboardKey_4294968330, B.LogicalKeyboardKey_4294967297, B.LogicalKeyboardKey_4294970700, B.LogicalKeyboardKey_4294971403, B.LogicalKeyboardKey_4294968843, B.LogicalKeyboardKey_4294970701, B.LogicalKeyboardKey_4294969116, B.LogicalKeyboardKey_4294969117, B.LogicalKeyboardKey_4294968589, B.LogicalKeyboardKey_4294968590, B.LogicalKeyboardKey_4294970702], C.findType("ConstantStringMap<String,LogicalKeyboardKey>"));
    B.Object_e3c = {Abort: 0, Again: 1, AltLeft: 2, AltRight: 3, ArrowDown: 4, ArrowLeft: 5, ArrowRight: 6, ArrowUp: 7, AudioVolumeDown: 8, AudioVolumeMute: 9, AudioVolumeUp: 10, Backquote: 11, Backslash: 12, Backspace: 13, BracketLeft: 14, BracketRight: 15, BrightnessDown: 16, BrightnessUp: 17, BrowserBack: 18, BrowserFavorites: 19, BrowserForward: 20, BrowserHome: 21, BrowserRefresh: 22, BrowserSearch: 23, BrowserStop: 24, CapsLock: 25, Comma: 26, ContextMenu: 27, ControlLeft: 28, ControlRight: 29, Convert: 30, Copy: 31, Cut: 32, Delete: 33, Digit0: 34, Digit1: 35, Digit2: 36, Digit3: 37, Digit4: 38, Digit5: 39, Digit6: 40, Digit7: 41, Digit8: 42, Digit9: 43, DisplayToggleIntExt: 44, Eject: 45, End: 46, Enter: 47, Equal: 48, Escape: 49, Esc: 50, F1: 51, F10: 52, F11: 53, F12: 54, F13: 55, F14: 56, F15: 57, F16: 58, F17: 59, F18: 60, F19: 61, F2: 62, F20: 63, F21: 64, F22: 65, F23: 66, F24: 67, F3: 68, F4: 69, F5: 70, F6: 71, F7: 72, F8: 73, F9: 74, Find: 75, Fn: 76, FnLock: 77, GameButton1: 78, GameButton10: 79, GameButton11: 80, GameButton12: 81, GameButton13: 82, GameButton14: 83, GameButton15: 84, GameButton16: 85, GameButton2: 86, GameButton3: 87, GameButton4: 88, GameButton5: 89, GameButton6: 90, GameButton7: 91, GameButton8: 92, GameButton9: 93, GameButtonA: 94, GameButtonB: 95, GameButtonC: 96, GameButtonLeft1: 97, GameButtonLeft2: 98, GameButtonMode: 99, GameButtonRight1: 100, GameButtonRight2: 101, GameButtonSelect: 102, GameButtonStart: 103, GameButtonThumbLeft: 104, GameButtonThumbRight: 105, GameButtonX: 106, GameButtonY: 107, GameButtonZ: 108, Help: 109, Home: 110, Hyper: 111, Insert: 112, IntlBackslash: 113, IntlRo: 114, IntlYen: 115, KanaMode: 116, KeyA: 117, KeyB: 118, KeyC: 119, KeyD: 120, KeyE: 121, KeyF: 122, KeyG: 123, KeyH: 124, KeyI: 125, KeyJ: 126, KeyK: 127, KeyL: 128, KeyM: 129, KeyN: 130, KeyO: 131, KeyP: 132, KeyQ: 133, KeyR: 134, KeyS: 135, KeyT: 136, KeyU: 137, KeyV: 138, KeyW: 139, KeyX: 140, KeyY: 141, KeyZ: 142, KeyboardLayoutSelect: 143, Lang1: 144, Lang2: 145, Lang3: 146, Lang4: 147, Lang5: 148, LaunchApp1: 149, LaunchApp2: 150, LaunchAssistant: 151, LaunchControlPanel: 152, LaunchMail: 153, LaunchScreenSaver: 154, MailForward: 155, MailReply: 156, MailSend: 157, MediaFastForward: 158, MediaPause: 159, MediaPlay: 160, MediaPlayPause: 161, MediaRecord: 162, MediaRewind: 163, MediaSelect: 164, MediaStop: 165, MediaTrackNext: 166, MediaTrackPrevious: 167, MetaLeft: 168, MetaRight: 169, MicrophoneMuteToggle: 170, Minus: 171, NonConvert: 172, NumLock: 173, Numpad0: 174, Numpad1: 175, Numpad2: 176, Numpad3: 177, Numpad4: 178, Numpad5: 179, Numpad6: 180, Numpad7: 181, Numpad8: 182, Numpad9: 183, NumpadAdd: 184, NumpadBackspace: 185, NumpadClear: 186, NumpadClearEntry: 187, NumpadComma: 188, NumpadDecimal: 189, NumpadDivide: 190, NumpadEnter: 191, NumpadEqual: 192, NumpadMemoryAdd: 193, NumpadMemoryClear: 194, NumpadMemoryRecall: 195, NumpadMemoryStore: 196, NumpadMemorySubtract: 197, NumpadMultiply: 198, NumpadParenLeft: 199, NumpadParenRight: 200, NumpadSubtract: 201, Open: 202, PageDown: 203, PageUp: 204, Paste: 205, Pause: 206, Period: 207, Power: 208, PrintScreen: 209, PrivacyScreenToggle: 210, Props: 211, Quote: 212, Resume: 213, ScrollLock: 214, Select: 215, SelectTask: 216, Semicolon: 217, ShiftLeft: 218, ShiftRight: 219, ShowAllWindows: 220, Slash: 221, Sleep: 222, Space: 223, Super: 224, Suspend: 225, Tab: 226, Turbo: 227, Undo: 228, WakeUp: 229, ZoomToggle: 230};
    B.Map_xwOPX = new C.ConstantStringMap(B.Object_e3c, [B.PhysicalKeyboardKey_458907, B.PhysicalKeyboardKey_458873, B.PhysicalKeyboardKey_458978, B.PhysicalKeyboardKey_458982, B.PhysicalKeyboardKey_458833, B.PhysicalKeyboardKey_458832, B.PhysicalKeyboardKey_458831, B.PhysicalKeyboardKey_458834, B.PhysicalKeyboardKey_458881, B.PhysicalKeyboardKey_458879, B.PhysicalKeyboardKey_458880, B.PhysicalKeyboardKey_458805, B.PhysicalKeyboardKey_458801, B.PhysicalKeyboardKey_458794, B.PhysicalKeyboardKey_458799, B.PhysicalKeyboardKey_458800, B.PhysicalKeyboardKey_786544, B.PhysicalKeyboardKey_786543, B.PhysicalKeyboardKey_786980, B.PhysicalKeyboardKey_786986, B.PhysicalKeyboardKey_786981, B.PhysicalKeyboardKey_786979, B.PhysicalKeyboardKey_786983, B.PhysicalKeyboardKey_786977, B.PhysicalKeyboardKey_786982, B.PhysicalKeyboardKey_458809, B.PhysicalKeyboardKey_458806, B.PhysicalKeyboardKey_458853, B.PhysicalKeyboardKey_458976, B.PhysicalKeyboardKey_458980, B.PhysicalKeyboardKey_458890, B.PhysicalKeyboardKey_458876, B.PhysicalKeyboardKey_458875, B.PhysicalKeyboardKey_458828, B.PhysicalKeyboardKey_458791, B.PhysicalKeyboardKey_458782, B.PhysicalKeyboardKey_458783, B.PhysicalKeyboardKey_458784, B.PhysicalKeyboardKey_458785, B.PhysicalKeyboardKey_458786, B.PhysicalKeyboardKey_458787, B.PhysicalKeyboardKey_458788, B.PhysicalKeyboardKey_458789, B.PhysicalKeyboardKey_458790, B.PhysicalKeyboardKey_65717, B.PhysicalKeyboardKey_786616, B.PhysicalKeyboardKey_458829, B.PhysicalKeyboardKey_458792, B.PhysicalKeyboardKey_458798, B.PhysicalKeyboardKey_458793, B.PhysicalKeyboardKey_458793, B.PhysicalKeyboardKey_458810, B.PhysicalKeyboardKey_458819, B.PhysicalKeyboardKey_458820, B.PhysicalKeyboardKey_458821, B.PhysicalKeyboardKey_458856, B.PhysicalKeyboardKey_458857, B.PhysicalKeyboardKey_458858, B.PhysicalKeyboardKey_458859, B.PhysicalKeyboardKey_458860, B.PhysicalKeyboardKey_458861, B.PhysicalKeyboardKey_458862, B.PhysicalKeyboardKey_458811, B.PhysicalKeyboardKey_458863, B.PhysicalKeyboardKey_458864, B.PhysicalKeyboardKey_458865, B.PhysicalKeyboardKey_458866, B.PhysicalKeyboardKey_458867, B.PhysicalKeyboardKey_458812, B.PhysicalKeyboardKey_458813, B.PhysicalKeyboardKey_458814, B.PhysicalKeyboardKey_458815, B.PhysicalKeyboardKey_458816, B.PhysicalKeyboardKey_458817, B.PhysicalKeyboardKey_458818, B.PhysicalKeyboardKey_458878, B.PhysicalKeyboardKey_18, B.PhysicalKeyboardKey_19, B.PhysicalKeyboardKey_392961, B.PhysicalKeyboardKey_392970, B.PhysicalKeyboardKey_392971, B.PhysicalKeyboardKey_392972, B.PhysicalKeyboardKey_392973, B.PhysicalKeyboardKey_392974, B.PhysicalKeyboardKey_392975, B.PhysicalKeyboardKey_392976, B.PhysicalKeyboardKey_392962, B.PhysicalKeyboardKey_392963, B.PhysicalKeyboardKey_392964, B.PhysicalKeyboardKey_392965, B.PhysicalKeyboardKey_392966, B.PhysicalKeyboardKey_392967, B.PhysicalKeyboardKey_392968, B.PhysicalKeyboardKey_392969, B.PhysicalKeyboardKey_392977, B.PhysicalKeyboardKey_392978, B.PhysicalKeyboardKey_392979, B.PhysicalKeyboardKey_392980, B.PhysicalKeyboardKey_392981, B.PhysicalKeyboardKey_392982, B.PhysicalKeyboardKey_392983, B.PhysicalKeyboardKey_392984, B.PhysicalKeyboardKey_392985, B.PhysicalKeyboardKey_392986, B.PhysicalKeyboardKey_392987, B.PhysicalKeyboardKey_392988, B.PhysicalKeyboardKey_392989, B.PhysicalKeyboardKey_392990, B.PhysicalKeyboardKey_392991, B.PhysicalKeyboardKey_458869, B.PhysicalKeyboardKey_458826, B.PhysicalKeyboardKey_16, B.PhysicalKeyboardKey_458825, B.PhysicalKeyboardKey_458852, B.PhysicalKeyboardKey_458887, B.PhysicalKeyboardKey_458889, B.PhysicalKeyboardKey_458888, B.PhysicalKeyboardKey_458756, B.PhysicalKeyboardKey_458757, B.PhysicalKeyboardKey_458758, B.PhysicalKeyboardKey_458759, B.PhysicalKeyboardKey_458760, B.PhysicalKeyboardKey_458761, B.PhysicalKeyboardKey_458762, B.PhysicalKeyboardKey_458763, B.PhysicalKeyboardKey_458764, B.PhysicalKeyboardKey_458765, B.PhysicalKeyboardKey_458766, B.PhysicalKeyboardKey_458767, B.PhysicalKeyboardKey_458768, B.PhysicalKeyboardKey_458769, B.PhysicalKeyboardKey_458770, B.PhysicalKeyboardKey_458771, B.PhysicalKeyboardKey_458772, B.PhysicalKeyboardKey_458773, B.PhysicalKeyboardKey_458774, B.PhysicalKeyboardKey_458775, B.PhysicalKeyboardKey_458776, B.PhysicalKeyboardKey_458777, B.PhysicalKeyboardKey_458778, B.PhysicalKeyboardKey_458779, B.PhysicalKeyboardKey_458780, B.PhysicalKeyboardKey_458781, B.PhysicalKeyboardKey_787101, B.PhysicalKeyboardKey_458896, B.PhysicalKeyboardKey_458897, B.PhysicalKeyboardKey_458898, B.PhysicalKeyboardKey_458899, B.PhysicalKeyboardKey_458900, B.PhysicalKeyboardKey_786836, B.PhysicalKeyboardKey_786834, B.PhysicalKeyboardKey_786891, B.PhysicalKeyboardKey_786847, B.PhysicalKeyboardKey_786826, B.PhysicalKeyboardKey_786865, B.PhysicalKeyboardKey_787083, B.PhysicalKeyboardKey_787081, B.PhysicalKeyboardKey_787084, B.PhysicalKeyboardKey_786611, B.PhysicalKeyboardKey_786609, B.PhysicalKeyboardKey_786608, B.PhysicalKeyboardKey_786637, B.PhysicalKeyboardKey_786610, B.PhysicalKeyboardKey_786612, B.PhysicalKeyboardKey_786819, B.PhysicalKeyboardKey_786615, B.PhysicalKeyboardKey_786613, B.PhysicalKeyboardKey_786614, B.PhysicalKeyboardKey_458979, B.PhysicalKeyboardKey_458983, B.PhysicalKeyboardKey_24, B.PhysicalKeyboardKey_458797, B.PhysicalKeyboardKey_458891, B.PhysicalKeyboardKey_458835, B.PhysicalKeyboardKey_458850, B.PhysicalKeyboardKey_458841, B.PhysicalKeyboardKey_458842, B.PhysicalKeyboardKey_458843, B.PhysicalKeyboardKey_458844, B.PhysicalKeyboardKey_458845, B.PhysicalKeyboardKey_458846, B.PhysicalKeyboardKey_458847, B.PhysicalKeyboardKey_458848, B.PhysicalKeyboardKey_458849, B.PhysicalKeyboardKey_458839, B.PhysicalKeyboardKey_458939, B.PhysicalKeyboardKey_458968, B.PhysicalKeyboardKey_458969, B.PhysicalKeyboardKey_458885, B.PhysicalKeyboardKey_458851, B.PhysicalKeyboardKey_458836, B.PhysicalKeyboardKey_458840, B.PhysicalKeyboardKey_458855, B.PhysicalKeyboardKey_458963, B.PhysicalKeyboardKey_458962, B.PhysicalKeyboardKey_458961, B.PhysicalKeyboardKey_458960, B.PhysicalKeyboardKey_458964, B.PhysicalKeyboardKey_458837, B.PhysicalKeyboardKey_458934, B.PhysicalKeyboardKey_458935, B.PhysicalKeyboardKey_458838, B.PhysicalKeyboardKey_458868, B.PhysicalKeyboardKey_458830, B.PhysicalKeyboardKey_458827, B.PhysicalKeyboardKey_458877, B.PhysicalKeyboardKey_458824, B.PhysicalKeyboardKey_458807, B.PhysicalKeyboardKey_458854, B.PhysicalKeyboardKey_458822, B.PhysicalKeyboardKey_23, B.PhysicalKeyboardKey_458915, B.PhysicalKeyboardKey_458804, B.PhysicalKeyboardKey_21, B.PhysicalKeyboardKey_458823, B.PhysicalKeyboardKey_458871, B.PhysicalKeyboardKey_786850, B.PhysicalKeyboardKey_458803, B.PhysicalKeyboardKey_458977, B.PhysicalKeyboardKey_458981, B.PhysicalKeyboardKey_787103, B.PhysicalKeyboardKey_458808, B.PhysicalKeyboardKey_65666, B.PhysicalKeyboardKey_458796, B.PhysicalKeyboardKey_17, B.PhysicalKeyboardKey_20, B.PhysicalKeyboardKey_458795, B.PhysicalKeyboardKey_22, B.PhysicalKeyboardKey_458874, B.PhysicalKeyboardKey_65667, B.PhysicalKeyboardKey_786994], C.findType("ConstantStringMap<String,PhysicalKeyboardKey>"));
    B.MethodCall_popRoute_null = new D.MethodCall0("popRoute", null);
    B.MethodChannel_KD4 = new D.MethodChannel("flutter/service_worker", E.C_StandardMethodCodec0);
    B.OptionalMethodChannel_6FR = new D.OptionalMethodChannel("flutter/textinput", E.C_JSONMethodCodec0);
    B.OptionalMethodChannel_GXw = new D.OptionalMethodChannel("flutter/keyboard", E.C_StandardMethodCodec0);
    B.OptionalMethodChannel_IJ0 = new D.OptionalMethodChannel("flutter/restoration", E.C_StandardMethodCodec0);
    B.OptionalMethodChannel_ayZ = new D.OptionalMethodChannel("flutter/menu", E.C_StandardMethodCodec0);
    B.OptionalMethodChannel_jWO = new D.OptionalMethodChannel("flutter/backgesture", E.C_StandardMethodCodec0);
    B.Orientation_0 = new A.Orientation(0, "portrait");
    B.Orientation_1 = new A.Orientation(1, "landscape");
    B.Priority_100000 = new A.Priority(100000);
    B.RenderingServiceExtensions_10 = new A.RenderingServiceExtensions(10, "debugDumpSemanticsTreeInInverseHitTestOrder");
    B.RenderingServiceExtensions_11 = new A.RenderingServiceExtensions(11, "profileRenderObjectPaints");
    B.RenderingServiceExtensions_12 = new A.RenderingServiceExtensions(12, "profileRenderObjectLayouts");
    B.RenderingServiceExtensions_8 = new A.RenderingServiceExtensions(8, "debugDumpRenderTree");
    B.RenderingServiceExtensions_9 = new A.RenderingServiceExtensions(9, "debugDumpSemanticsTreeInTraversalOrder");
    B.SchedulerServiceExtensions_0 = new A.SchedulerServiceExtensions(0, "timeDilation");
    B.ServicesServiceExtensions_0 = new A.ServicesServiceExtensions(0, "profilePlatformChannels");
    B.TestHistoryEntry_StJ = new A.TestHistoryEntry("default", null, "/");
    B.TextInputAction_0 = new A.TextInputAction(0, "none");
    B.TextInputAction_1 = new A.TextInputAction(1, "unspecified");
    B.TextInputAction_10 = new A.TextInputAction(10, "route");
    B.TextInputAction_11 = new A.TextInputAction(11, "emergencyCall");
    B.TextInputAction_12 = new A.TextInputAction(12, "newline");
    B.TextInputAction_2 = new A.TextInputAction(2, "done");
    B.TextInputAction_3 = new A.TextInputAction(3, "go");
    B.TextInputAction_4 = new A.TextInputAction(4, "search");
    B.TextInputAction_5 = new A.TextInputAction(5, "send");
    B.TextInputAction_6 = new A.TextInputAction(6, "next");
    B.TextInputAction_7 = new A.TextInputAction(7, "previous");
    B.TextInputAction_8 = new A.TextInputAction(8, "continueAction");
    B.TextInputAction_9 = new A.TextInputAction(9, "join");
    B.TextInputType_1 = new A.TextInputType(1);
    B.TextInputType_10 = new A.TextInputType(10);
    B.TextSelection_vdW = new D.TextSelection(-1, -1, E.TextAffinity_1, false, -1, -1);
    B.Type_PerformanceModeRequestHandle_STY = C.typeLiteral("PerformanceModeRequestHandle");
    B.Type_PipelineOwner_AdK = C.typeLiteral("PipelineOwner");
    B.Type_RestorationBucket_QTB = C.typeLiteral("RestorationBucket");
    B.Type_SemanticsHandle_DV7 = C.typeLiteral("SemanticsHandle");
    B.Type_SemanticsOwner_i3t = C.typeLiteral("SemanticsOwner");
    B.Type__HighlightModeManager_DOw = C.typeLiteral("_HighlightModeManager");
    B.WidgetsServiceExtensions_0 = new A.WidgetsServiceExtensions(0, "debugDumpApp");
    B.WidgetsServiceExtensions_1 = new A.WidgetsServiceExtensions(1, "debugDumpFocusTree");
    B.WidgetsServiceExtensions_3 = new A.WidgetsServiceExtensions(3, "didSendFirstFrameEvent");
    B.WidgetsServiceExtensions_4 = new A.WidgetsServiceExtensions(4, "didSendFirstFrameRasterizedEvent");
    B.WidgetsServiceExtensions_6 = new A.WidgetsServiceExtensions(6, "profileWidgetBuilds");
    B.WidgetsServiceExtensions_7 = new A.WidgetsServiceExtensions(7, "profileUserWidgetBuilds");
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_0);
    B.KeyboardSide_1 = new A.KeyboardSide(1, "left");
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_1);
    B.KeyboardSide_2 = new A.KeyboardSide(2, "right");
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_4_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_4, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_5_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_5, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_6_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_6, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_7_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_7, B.KeyboardSide_3);
  })();
  (function staticFields() {
    $._initializationState = B.DebugEngineInitializationState_0;
    $.RawKeyboard__instance = null;
    $._extensions = C.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Future_ServiceExtensionResponse_Function_2_String_and_Map_String_String);
    $._FakeUserTag__instances = C.LinkedHashMap_LinkedHashMap$_empty(type$.String, C.findType("_FakeUserTag"));
    $._popStateListenersCache = C.LinkedHashMap_LinkedHashMap$_empty(type$.dynamic_Function_Object, type$.JavaScriptObject);
    $.activeDevToolsServerAddress = null;
    $.connectedVmServiceUri = null;
    $.LicenseRegistry__collectors = null;
    $._timeDilation = 1;
    $.SystemChrome__pendingStyle = null;
    $.SystemChrome__latestStyle = null;
    $._viewWidgets = C.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Widget);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "_kLogicalAltLeft", "$get$_kLogicalAltLeft", () => 8589934852);
    _lazyFinal($, "_kLogicalAltRight", "$get$_kLogicalAltRight", () => 8589934853);
    _lazyFinal($, "_kLogicalControlLeft", "$get$_kLogicalControlLeft", () => 8589934848);
    _lazyFinal($, "_kLogicalControlRight", "$get$_kLogicalControlRight", () => 8589934849);
    _lazyFinal($, "_kLogicalShiftLeft", "$get$_kLogicalShiftLeft", () => 8589934850);
    _lazyFinal($, "_kLogicalShiftRight", "$get$_kLogicalShiftRight", () => 8589934851);
    _lazyFinal($, "_kLogicalMetaLeft", "$get$_kLogicalMetaLeft", () => 8589934854);
    _lazyFinal($, "_kLogicalMetaRight", "$get$_kLogicalMetaRight", () => 8589934855);
    _lazyFinal($, "_kPhysicalAltLeft", "$get$_kPhysicalAltLeft", () => 458978);
    _lazyFinal($, "_kPhysicalAltRight", "$get$_kPhysicalAltRight", () => 458982);
    _lazyFinal($, "_kPhysicalShiftLeft", "$get$_kPhysicalShiftLeft", () => 458977);
    _lazyFinal($, "_kPhysicalShiftRight", "$get$_kPhysicalShiftRight", () => 458981);
    _lazyFinal($, "_kPhysicalMetaLeft", "$get$_kPhysicalMetaLeft", () => 458979);
    _lazyFinal($, "_kPhysicalMetaRight", "$get$_kPhysicalMetaRight", () => 458983);
    _lazyFinal($, "_kLogicalKeyToModifierGetter", "$get$_kLogicalKeyToModifierGetter", () => C.LinkedHashMap_LinkedHashMap$_literal([$.$get$_kLogicalAltLeft(), new A._kLogicalKeyToModifierGetter_closure(), $.$get$_kLogicalAltRight(), new A._kLogicalKeyToModifierGetter_closure0(), $.$get$_kLogicalControlLeft(), new A._kLogicalKeyToModifierGetter_closure1(), $.$get$_kLogicalControlRight(), new A._kLogicalKeyToModifierGetter_closure2(), $.$get$_kLogicalShiftLeft(), new A._kLogicalKeyToModifierGetter_closure3(), $.$get$_kLogicalShiftRight(), new A._kLogicalKeyToModifierGetter_closure4(), $.$get$_kLogicalMetaLeft(), new A._kLogicalKeyToModifierGetter_closure5(), $.$get$_kLogicalMetaRight(), new A._kLogicalKeyToModifierGetter_closure6()], type$.int, type$.bool_Function_FlutterHtmlKeyboardEvent));
    _lazyFinal($, "_kUseDead", "$get$_kUseDead", () => C.String_String$fromCharCode(254));
    _lazyFinal($, "_kLowerA", "$get$_kLowerA", () => 97);
    _lazyFinal($, "_kUpperA", "$get$_kUpperA", () => 65);
    _lazyFinal($, "_kLowerZ", "$get$_kLowerZ", () => 122);
    _lazyFinal($, "_kUpperZ", "$get$_kUpperZ", () => 90);
    _lazyFinal($, "_kMarshallIntBase", "$get$_kMarshallIntBase", () => 48);
    _lazyFinal($, "EmbeddedTestFont_flutterTest", "$get$EmbeddedTestFont_flutterTest", () => A.EmbeddedTestFont$_($.$get$_flutterTestData(), "FlutterTest"));
    _lazyFinal($, "_flutterTestData", "$get$_flutterTestData", () => A.NativeUint8List_NativeUint8List$fromList(C._setArrayType([0, 1, 0, 0, 0, 14, 0, 128, 0, 3, 0, 96, 66, 65, 83, 69, 138, 75, 135, 1, 0, 0, 11, 36, 0, 0, 0, 130, 71, 68, 69, 70, 0, 41, 0, 20, 0, 0, 11, 4, 0, 0, 0, 30, 79, 83, 47, 50, 19, 253, 144, 242, 0, 0, 1, 104, 0, 0, 0, 96, 99, 109, 97, 112, 236, 17, 6, 15, 0, 0, 2, 0, 0, 0, 5, 4, 99, 118, 116, 32, 0, 0, 0, 0, 0, 0, 7, 24, 0, 0, 0, 2, 103, 108, 121, 102, 9, 133, 137, 248, 0, 0, 7, 60, 0, 0, 0, 216, 104, 101, 97, 100, 129, 27, 239, 253, 0, 0, 0, 236, 0, 0, 0, 54, 104, 104, 101, 97, 7, 2, 3, 15, 0, 0, 1, 36, 0, 0, 0, 36, 104, 109, 116, 120, 27, 134, 0, 128, 0, 0, 1, 200, 0, 0, 0, 56, 108, 111, 99, 97, 2, 126, 2, 80, 0, 0, 7, 28, 0, 0, 0, 30, 109, 97, 120, 112, 0, 82, 0, 45, 0, 0, 1, 72, 0, 0, 0, 32, 110, 97, 109, 101, 26, 239, 122, 91, 0, 0, 8, 20, 0, 0, 2, 37, 112, 111, 115, 116, 137, 132, 40, 55, 0, 0, 10, 60, 0, 0, 0, 199, 112, 114, 101, 112, 111, 72, 104, 37, 0, 0, 7, 4, 0, 0, 0, 17, 0, 1, 0, 0, 0, 1, 0, 0, 171, 180, 145, 21, 95, 15, 60, 245, 0, 31, 4, 0, 0, 0, 0, 0, 142, 244, 86, 128, 0, 0, 0, 0, 142, 244, 86, 128, 0, 0, 255, 0, 4, 0, 3, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 255, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 1, 0, 0, 0, 14, 0, 8, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 64, 0, 34, 0, 0, 0, 0, 0, 4, 2, 5, 1, 144, 0, 5, 0, 0, 2, 153, 2, 204, 0, 0, 0, 143, 2, 153, 2, 204, 0, 0, 1, 235, 0, 51, 1, 9, 0, 0, 2, 0, 5, 3, 0, 0, 0, 0, 0, 0, 128, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 32, 254, 255, 3, 0, 255, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 32, 0, 1, 4, 0, 0, 128, 0, 0, 0, 0, 1, 85, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 1, 85, 0, 0, 1, 0, 0, 0, 0, 170, 0, 0, 0, 204, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 28, 0, 1, 0, 0, 0, 0, 3, 254, 0, 3, 0, 1, 0, 0, 0, 28, 0, 4, 3, 226, 0, 0, 0, 100, 0, 64, 0, 5, 0, 36, 0, 126, 0, 255, 1, 49, 1, 83, 1, 120, 1, 146, 2, 201, 2, 221, 3, 148, 3, 169, 3, 192, 32, 10, 32, 38, 32, 48, 32, 58, 32, 68, 33, 38, 34, 6, 34, 18, 34, 30, 34, 43, 34, 72, 34, 101, 34, 242, 37, 202, 48, 7, 78, 3, 78, 9, 78, 45, 78, 93, 78, 140, 78, 148, 81, 109, 83, 65, 84, 38, 86, 219, 87, 31, 101, 135, 102, 47, 103, 44, 107, 99, 108, 52, 109, 75, 112, 107, 120, 110, 139, 213, 145, 209, 240, 2, 254, 255, 255, 255, 0, 0, 0, 32, 0, 161, 1, 49, 1, 82, 1, 120, 1, 146, 2, 198, 2, 216, 3, 148, 3, 165, 3, 188, 32, 2, 32, 19, 32, 48, 32, 57, 32, 68, 33, 34, 34, 2, 34, 15, 34, 25, 34, 43, 34, 72, 34, 96, 34, 242, 37, 202, 48, 7, 78, 0, 78, 9, 78, 45, 78, 93, 78, 140, 78, 148, 81, 107, 83, 65, 84, 38, 86, 215, 87, 31, 101, 135, 102, 47, 103, 40, 107, 99, 108, 52, 109, 75, 112, 107, 120, 110, 139, 213, 145, 209, 240, 0, 254, 255, 255, 255, 0, 0, 0, 0, 254, 210, 0, 0, 254, 139, 254, 113, 0, 0, 0, 0, 252, 111, 0, 0, 0, 0, 0, 0, 0, 0, 223, 211, 0, 0, 223, 191, 0, 0, 0, 0, 0, 0, 0, 0, 221, 216, 221, 187, 0, 0, 221, 17, 218, 57, 207, 252, 0, 0, 177, 250, 177, 214, 177, 166, 177, 119, 177, 111, 0, 0, 172, 194, 171, 221, 0, 0, 168, 228, 154, 124, 153, 212, 0, 0, 148, 160, 147, 207, 146, 184, 143, 152, 135, 149, 116, 46, 110, 50, 0, 0, 1, 14, 0, 1, 0, 100, 1, 32, 0, 0, 1, 218, 0, 0, 0, 0, 1, 216, 1, 222, 0, 0, 1, 230, 1, 238, 1, 246, 2, 6, 0, 0, 2, 42, 0, 0, 2, 42, 2, 50, 2, 58, 2, 64, 0, 0, 0, 0, 2, 70, 0, 0, 0, 0, 0, 0, 2, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 70, 0, 0, 0, 0, 2, 70, 0, 0, 0, 0, 0, 0, 2, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 66, 0, 0, 0, 0, 0, 6, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 8, 0, 9, 0, 10, 0, 0, 0, 0, 0, 11, 0, 12, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 24, 184, 0, 0, 76, 184, 0, 192, 99, 184, 0, 4, 98, 32, 103, 97, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 38, 0, 38, 0, 60, 0, 84, 0, 108, 0, 108, 0, 108, 0, 108, 0, 108, 0, 108, 0, 108, 0, 108, 0, 108, 0, 0, 0, 2, 0, 128, 0, 0, 3, 128, 3, 0, 0, 3, 0, 7, 0, 34, 0, 179, 0, 0, 0, 0, 22, 224, 18, 178, 1, 1, 1, 21, 54, 22, 176, 0, 47, 176, 1, 47, 176, 2, 47, 176, 3, 47, 176, 4, 47, 176, 7, 47, 37, 33, 17, 33, 3, 17, 33, 17, 1, 0, 2, 0, 254, 0, 128, 3, 0, 128, 2, 0, 253, 128, 3, 0, 253, 0, 0, 1, 0, 0, 255, 0, 4, 0, 3, 0, 0, 3, 0, 17, 0, 179, 0, 0, 0, 0, 22, 224, 18, 178, 1, 1, 1, 21, 54, 22, 0, 25, 1, 33, 17, 4, 0, 255, 0, 4, 0, 252, 0, 0, 0, 1, 0, 0, 255, 0, 4, 0, 0, 0, 0, 3, 0, 22, 0, 179, 0, 0, 0, 0, 22, 224, 18, 178, 1, 1, 1, 21, 54, 22, 176, 1, 47, 176, 2, 47, 25, 1, 33, 17, 4, 0, 255, 0, 1, 0, 255, 0, 0, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 3, 0, 22, 0, 179, 0, 0, 0, 0, 22, 224, 18, 178, 1, 1, 1, 21, 54, 22, 176, 0, 47, 176, 3, 47, 49, 17, 33, 17, 4, 0, 3, 0, 253, 0, 0, 0, 0, 0, 0, 14, 0, 174, 0, 1, 0, 0, 0, 0, 0, 0, 0, 29, 0, 60, 0, 1, 0, 0, 0, 0, 0, 1, 0, 7, 0, 106, 0, 1, 0, 0, 0, 0, 0, 2, 0, 7, 0, 130, 0, 1, 0, 0, 0, 0, 0, 3, 0, 38, 0, 216, 0, 1, 0, 0, 0, 0, 0, 4, 0, 11, 1, 23, 0, 1, 0, 0, 0, 0, 0, 5, 0, 15, 1, 67, 0, 1, 0, 0, 0, 0, 0, 6, 0, 11, 1, 107, 0, 3, 0, 1, 4, 9, 0, 0, 0, 58, 0, 0, 0, 3, 0, 1, 4, 9, 0, 1, 0, 14, 0, 90, 0, 3, 0, 1, 4, 9, 0, 2, 0, 14, 0, 114, 0, 3, 0, 1, 4, 9, 0, 3, 0, 76, 0, 138, 0, 3, 0, 1, 4, 9, 0, 4, 0, 22, 0, 255, 0, 3, 0, 1, 4, 9, 0, 5, 0, 30, 1, 35, 0, 3, 0, 1, 4, 9, 0, 6, 0, 22, 1, 83, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 40, 0, 99, 0, 41, 0, 32, 0, 49, 0, 57, 0, 56, 0, 48, 0, 44, 0, 32, 0, 65, 0, 110, 0, 111, 0, 110, 0, 121, 0, 109, 0, 111, 0, 117, 0, 115, 0, 0, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 49, 57, 56, 48, 44, 32, 65, 110, 111, 110, 121, 109, 111, 117, 115, 0, 0, 77, 0, 105, 0, 110, 0, 103, 0, 76, 0, 105, 0, 85, 0, 0, 77, 105, 110, 103, 76, 105, 85, 0, 0, 82, 0, 101, 0, 103, 0, 117, 0, 108, 0, 97, 0, 114, 0, 0, 82, 101, 103, 117, 108, 97, 114, 0, 0, 70, 0, 111, 0, 110, 0, 116, 0, 70, 0, 111, 0, 114, 0, 103, 0, 101, 0, 32, 0, 50, 0, 46, 0, 48, 0, 32, 0, 58, 0, 32, 0, 70, 0, 108, 0, 117, 0, 116, 0, 116, 0, 101, 0, 114, 0, 84, 0, 101, 0, 115, 0, 116, 0, 32, 0, 58, 0, 32, 0, 49, 0, 45, 0, 49, 0, 45, 0, 49, 0, 57, 0, 56, 0, 48, 0, 0, 70, 111, 110, 116, 70, 111, 114, 103, 101, 32, 50, 46, 48, 32, 58, 32, 70, 108, 117, 116, 116, 101, 114, 84, 101, 115, 116, 32, 58, 32, 49, 45, 49, 45, 49, 57, 56, 48, 0, 0, 70, 0, 108, 0, 117, 0, 116, 0, 116, 0, 101, 0, 114, 0, 84, 0, 101, 0, 115, 0, 116, 0, 0, 70, 108, 117, 116, 116, 101, 114, 84, 101, 115, 116, 0, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 32, 0, 48, 0, 48, 0, 49, 0, 46, 0, 48, 0, 48, 0, 48, 0, 0, 86, 101, 114, 115, 105, 111, 110, 32, 48, 48, 49, 46, 48, 48, 48, 0, 0, 70, 0, 108, 0, 117, 0, 116, 0, 116, 0, 101, 0, 114, 0, 84, 0, 101, 0, 115, 0, 116, 0, 0, 70, 108, 117, 116, 116, 101, 114, 84, 101, 115, 116, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 255, 126, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1, 0, 2, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 6, 83, 113, 117, 97, 114, 101, 14, 65, 115, 99, 101, 110, 116, 32, 70, 108, 117, 115, 104, 101, 100, 15, 68, 101, 115, 99, 101, 110, 116, 32, 70, 108, 117, 115, 104, 101, 100, 12, 70, 117, 108, 108, 32, 65, 100, 118, 97, 110, 99, 101, 11, 49, 47, 50, 32, 65, 100, 118, 97, 110, 99, 101, 11, 49, 47, 51, 32, 65, 100, 118, 97, 110, 99, 101, 11, 49, 47, 52, 32, 65, 100, 118, 97, 110, 99, 101, 11, 49, 47, 54, 32, 65, 100, 118, 97, 110, 99, 101, 11, 49, 47, 53, 32, 65, 100, 118, 97, 110, 99, 101, 12, 49, 47, 49, 48, 32, 65, 100, 118, 97, 110, 99, 101, 12, 90, 101, 114, 111, 32, 65, 100, 118, 97, 110, 99, 101, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 22, 0, 0, 0, 2, 0, 1, 0, 3, 0, 13, 0, 1, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 4, 0, 18, 0, 3, 104, 97, 110, 103, 105, 100, 101, 111, 114, 111, 109, 110, 0, 3, 103, 114, 101, 107, 0, 20, 104, 97, 110, 105, 0, 48, 108, 97, 116, 110, 0, 76, 0, 6, 0, 0, 0, 0, 0, 2, 0, 3, 0, 10, 0, 14, 0, 18, 0, 1, 3, 0, 0, 1, 255, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 3, 0, 10, 0, 14, 0, 18, 0, 1, 3, 0, 0, 1, 255, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 2, 0, 3, 0, 10, 0, 14, 0, 18, 0, 1, 3, 0, 0, 1, 255, 0, 0, 1, 0, 0, 0, 0], C.findType("JSArray<int>"))));
    _lazyFinal($, "_FakeUserTag__defaultTag", "$get$_FakeUserTag__defaultTag", () => A._FakeUserTag__FakeUserTag("Default"));
    _lazy($, "_currentTag", "$get$_currentTag", () => $.$get$_FakeUserTag__defaultTag());
    _lazyFinal($, "_jsBoxedDartObjectProperty", "$get$_jsBoxedDartObjectProperty", () => Symbol("jsBoxedDartObjectProperty"));
    _lazy($, "_realDefaultUrlStrategy", "$get$_realDefaultUrlStrategy", () => C.boolConversionCheck(D.debugEmulateFlutterTesterEnvironment()) ? A.TestUrlStrategy$fromEntry(B.TestHistoryEntry_StJ) : B.C_HashUrlStrategy);
    _lazyFinal($, "KeyboardLockMode__knownLockModes", "$get$KeyboardLockMode__knownLockModes", () => C.LinkedHashMap_LinkedHashMap$_literal([4294967562, E.KeyboardLockMode_YYi, 4294967564, B.KeyboardLockMode_Y98, 4294967556, B.KeyboardLockMode_kyW], type$.int, type$.KeyboardLockMode));
    _lazyFinal($, "RawKeyboard_instance0", "$get$RawKeyboard_instance", () => A.RawKeyboard$_0());
    _lazyFinal($, "RawKeyboard__modifierKeyMap", "$get$RawKeyboard__modifierKeyMap", () => {
      var t1 = type$.PhysicalKeyboardKey;
      return C.LinkedHashMap_LinkedHashMap$_literal([B._ModifierSidePair_ModifierKey_2_KeyboardSide_1, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_2, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458982], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978, B.PhysicalKeyboardKey_458982], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_0, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_1, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_2, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458981], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977, B.PhysicalKeyboardKey_458981], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_0, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_1, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_2, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458980], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976, B.PhysicalKeyboardKey_458980], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_0, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_1, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_2, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458983], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979, B.PhysicalKeyboardKey_458983], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_0, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979], t1), B._ModifierSidePair_ModifierKey_4_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458809], t1), B._ModifierSidePair_ModifierKey_5_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458835], t1), B._ModifierSidePair_ModifierKey_6_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458823], t1), B._ModifierSidePair_ModifierKey_7_KeyboardSide_3, C.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_18], t1)], C.findType("_ModifierSidePair"), C.findType("Set<PhysicalKeyboardKey>"));
    });
    _lazyFinal($, "RawKeyboard__allModifiersExceptFn", "$get$RawKeyboard__allModifiersExceptFn", () => C.LinkedHashMap_LinkedHashMap$_literal([B.PhysicalKeyboardKey_458978, E.LogicalKeyboardKey_8589934852, B.PhysicalKeyboardKey_458982, E.LogicalKeyboardKey_8589934853, B.PhysicalKeyboardKey_458977, E.LogicalKeyboardKey_8589934850, B.PhysicalKeyboardKey_458981, E.LogicalKeyboardKey_8589934851, B.PhysicalKeyboardKey_458976, E.LogicalKeyboardKey_8589934848, B.PhysicalKeyboardKey_458980, E.LogicalKeyboardKey_8589934849, B.PhysicalKeyboardKey_458979, E.LogicalKeyboardKey_8589934854, B.PhysicalKeyboardKey_458983, E.LogicalKeyboardKey_8589934855, B.PhysicalKeyboardKey_458809, B.LogicalKeyboardKey_4294967556, B.PhysicalKeyboardKey_458835, E.LogicalKeyboardKey_4294967562, B.PhysicalKeyboardKey_458823, B.LogicalKeyboardKey_4294967564], type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey));
    _lazyFinal($, "RawKeyboard__allModifiers", "$get$RawKeyboard__allModifiers", () => {
      var t1 = C.LinkedHashMap_LinkedHashMap$_empty(type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey);
      t1.$indexSet(0, B.PhysicalKeyboardKey_18, B.LogicalKeyboardKey_4294967558);
      t1.addAll$1(0, $.$get$RawKeyboard__allModifiersExceptFn());
      return t1;
    });
    _lazyFinal($, "TextInput__instance", "$get$TextInput__instance", () => A.TextInput$_());
    _lazyFinal($, "_PlatformTextInputControl_instance", "$get$_PlatformTextInputControl_instance", () => A._PlatformTextInputControl$_());
    _lazy($, "_flutterApp", "$get$_flutterApp", () => D.Future_Future(new A._flutterApp_closure(), type$.JSObject));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "home.client.dart.js_3", e: "endPart", h: h});
})($__dart_deferred_initializers__, "PHauARo8GOeMGugp6slQW6n4UDc=");
;
//# sourceMappingURL=home.client.dart.js_3.part.js.map
