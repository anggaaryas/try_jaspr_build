// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.3.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.clients.dart.js_4", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B,
  A = {
    HashMap_HashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return A._HashMap$($K, $V);
          hashCode = B.collection___defaultHashCode$closure();
        } else {
          if (B.core__identityHashCode$closure() === hashCode && B.core__identical$closure() === equals)
            return A._IdentityHashMap$($K, $V);
          if (equals == null)
            equals = B.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = B.collection___defaultHashCode$closure();
        if (equals == null)
          equals = B.collection___defaultEquals$closure();
      }
      return A._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap$($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__isStringKey(key) {
      return typeof key == "string" && key !== "__proto__";
    },
    _HashMap__isNumericKey(key) {
      return typeof key == "number" && (key & 1073741823) === key;
    },
    _HashMap__hasTableEntry(table, key) {
      return table[key] != null;
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__deleteTableEntry(table, key) {
      delete table[key];
    },
    _HashMap__newHashTable() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      A._HashMap__setTableEntry(table, _s20_, table);
      A._HashMap__deleteTableEntry(table, _s20_);
      return table;
    },
    _IdentityHashMap$($K, $V) {
      return new A._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
    },
    _CustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._CustomHashMap_closure($K);
      return new A._CustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    _HashMapKeyIterable$(_map, $E) {
      return new A._HashMapKeyIterable(_map, $E._eval$1("_HashMapKeyIterable<0>"));
    },
    _HashMapKeyIterator$(_map, _keys, $E) {
      return new A._HashMapKeyIterator(_map, _keys, $E._eval$1("_HashMapKeyIterator<0>"));
    },
    LinkedHashMap_LinkedHashMap($K, $V) {
      var t1 = B.JsLinkedHashMap$($K, $V);
      return t1;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap($K, $V);
      J.addAll$1$ax(t1, other);
      return t1;
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_containsValue_closure: function _HashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    }
  };
  J = holdersList[1];
  B = holdersList[0];
  A = hunkHelpers.updateHolder(holdersList[12], A);
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty(_) {
      return !B.boolConversionCheck(this.get$isEmpty(0));
    },
    get$keys() {
      return A._HashMapKeyIterable$(this, B._instanceType(this)._precomputed1);
    },
    get$values() {
      var t1 = B._instanceType(this);
      return B.MappedIterable_MappedIterable(this.get$keys(), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (B.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = this._collection$_strings;
        return strings == null ? false : A._HashMap__hasTableEntry(strings, key);
      } else if (B.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = this._collection$_nums;
        return nums == null ? false : A._HashMap__hasTableEntry(nums, key);
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var t1,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      t1 = this._findBucketIndex$2(this._collection$_getBucket$2(rest, key), key);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    containsValue$1(value) {
      return J.any$1$ax(this._collection$_computeKeys$0(), new A._HashMap_containsValue_closure(this, value));
    },
    addAll$1(_, other) {
      B._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A._HashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (B.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (B.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._collection$_getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = B._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (B.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (B.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = B._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_collection$_length(t1 + 1);
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          t1 = _this._collection$_length;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.set$_collection$_length(t1 + 1);
          _this._collection$_keys = null;
        }
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = B._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (B.boolConversionCheck(_this.containsKey$1(key))) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (B.boolConversionCheck(A._HashMap__isStringKey(key)))
        return _this._removeHashTableEntry$2(_this._collection$_strings, key);
      else if (B.boolConversionCheck(A._HashMap__isNumericKey(key)))
        return _this._removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, t1, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_collection$_length(t1 - 1);
      _this._collection$_keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        A._HashMap__deleteTableEntry(rest, hash);
      return result;
    },
    clear$0(_) {
      var _this = this,
        t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_keys = null;
        _this._collection$_length = 0;
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = B._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._collection$_computeKeys$0();
      for ($length = J.get$length$asx(keys), t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._collection$_keys)
          throw B.wrapException(B.ConcurrentModificationError$(_this));
      }
    },
    _collection$_computeKeys$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = B.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var _this = this,
        t1 = B._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (!B.boolConversionCheck(A._HashMap__hasTableEntry(table, key))) {
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_collection$_length(t1 + 1);
        _this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value, t1, _this = this;
      if (table != null && B.boolConversionCheck(A._HashMap__hasTableEntry(table, key))) {
        value = B._instanceType(_this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        A._HashMap__deleteTableEntry(table, key);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_collection$_length(t1 - 1);
        _this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _collection$_getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (B.boolConversionCheck(J.$eq$(bucket[i], key)))
          return i;
      return -1;
    },
    set$_collection$_length(_length) {
      this._collection$_length = B._asInt(_length);
    },
    $isHashMap: 1
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return B.identityHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._CustomHashMap.prototype = {
    $index(_, key) {
      if (!B.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_get(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$_HashMap$_set(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!B.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    remove$1(_, key) {
      if (!B.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_remove(key);
    },
    _computeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; i += 2)
        if (B.boolConversionCheck(t2.call$2(bucket[i], t1._as(key))))
          return i;
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_map._collection$_length, 0);
    },
    get$isNotEmpty(_) {
      return !B.boolConversionCheck(J.$eq$(this._collection$_map._collection$_length, 0));
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return A._HashMapKeyIterator$(t1, t1._collection$_computeKeys$0(), this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(element);
    },
    forEach$1(_, f) {
      var t1, keys, $length, i;
      this.$ti._eval$1("~(1)")._as(f);
      t1 = this._collection$_map;
      keys = t1._collection$_computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw B.wrapException(B.ConcurrentModificationError$(t1));
      }
    },
    $isHideEfficientLengthIterable: 1
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._collection$_keys)
        throw B.wrapException(B.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = B._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return B._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A._HashMap_containsValue_closure.prototype = {
    call$1(each) {
      return J.$eq$(J.$index$asx(this.$this, each), this.value);
    },
    $signature: 62
  };
  A._HashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = B._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return B._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A._CustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 62
  };
  (function aliases() {
    var _ = A._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _.super$_HashMap$_remove = _._remove$1;
  })();
  (function inheritance() {
    var _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A._HashMap, B.MapBase);
    _inheritMany(B.Closure, [A._HashMap_values_closure, A._HashMap_containsValue_closure, A._CustomHashMap_closure]);
    _inherit(A._HashMap_addAll_closure, B.Closure2Args);
    _inheritMany(A._HashMap, [A._IdentityHashMap, A._CustomHashMap]);
    _inherit(A._HashMapKeyIterable, B.EfficientLengthIterable);
    _inherit(A._HashMapKeyIterator, B.Object);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"_HashMap":{"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[],"MapBase.K":"1","MapBase.V":"2"},"HashMap":{"Map":["1","2"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[],"MapBase.K":"1","MapBase.V":"2"}}'));
  var type$ = {
    dynamic: B.findType("@")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.clients.dart.js_4", e: "endPart", h: h});
})($__dart_deferred_initializers__, "zkZx4VDDAPL7lQRe212t/suFwm8=");
;
//# sourceMappingURL=main.clients.dart.js_4.part.js.map
